ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"port.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvTaskExitError,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	prvTaskExitError:
  25              	.LFB5:
  26              		.file 1 "os/portable/GCC/ARM_CM7/r0p1/port.c"
   1:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
   2:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * FreeRTOS Kernel V10.4.3
   3:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:os/portable/GCC/ARM_CM7/r0p1/port.c ****  *
   5:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * the Software without restriction, including without limitation the rights to
   8:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * subject to the following conditions:
  11:os/portable/GCC/ARM_CM7/r0p1/port.c ****  *
  12:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * copies or substantial portions of the Software.
  14:os/portable/GCC/ARM_CM7/r0p1/port.c ****  *
  15:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:os/portable/GCC/ARM_CM7/r0p1/port.c ****  *
  22:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * https://www.FreeRTOS.org
  23:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * https://github.com/FreeRTOS
  24:os/portable/GCC/ARM_CM7/r0p1/port.c ****  *
  25:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
  26:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  27:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------
  28:os/portable/GCC/ARM_CM7/r0p1/port.c **** * Implementation of functions defined in portable.h for the ARM CM7 port.
  29:os/portable/GCC/ARM_CM7/r0p1/port.c **** *----------------------------------------------------------*/
  30:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  31:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* Scheduler includes. */
  32:os/portable/GCC/ARM_CM7/r0p1/port.c **** #include "FreeRTOS.h"
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 2


  33:os/portable/GCC/ARM_CM7/r0p1/port.c **** #include "task.h"
  34:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  35:os/portable/GCC/ARM_CM7/r0p1/port.c **** #ifndef __VFP_FP__
  36:os/portable/GCC/ARM_CM7/r0p1/port.c ****     #error This port can only be used when the project options are configured to enable hardware fl
  37:os/portable/GCC/ARM_CM7/r0p1/port.c **** #endif
  38:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  39:os/portable/GCC/ARM_CM7/r0p1/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  40:os/portable/GCC/ARM_CM7/r0p1/port.c ****     #define configSYSTICK_CLOCK_HZ      configCPU_CLOCK_HZ
  41:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Ensure the SysTick is clocked at the same frequency as the core. */
  42:os/portable/GCC/ARM_CM7/r0p1/port.c ****     #define portNVIC_SYSTICK_CLK_BIT    ( 1UL << 2UL )
  43:os/portable/GCC/ARM_CM7/r0p1/port.c **** #else
  44:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  45:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* The way the SysTick is clocked is not modified in case it is not the same
  46:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * as the core. */
  47:os/portable/GCC/ARM_CM7/r0p1/port.c ****     #define portNVIC_SYSTICK_CLK_BIT    ( 0 )
  48:os/portable/GCC/ARM_CM7/r0p1/port.c **** #endif
  49:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  50:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to manipulate the core.  Registers first... */
  51:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_CTRL_REG             ( *( ( volatile uint32_t * ) 0xe000e010 ) )
  52:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_LOAD_REG             ( *( ( volatile uint32_t * ) 0xe000e014 ) )
  53:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG    ( *( ( volatile uint32_t * ) 0xe000e018 ) )
  54:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SHPR3_REG                    ( *( ( volatile uint32_t * ) 0xe000ed20 ) )
  55:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* ...then bits in the registers. */
  56:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_INT_BIT              ( 1UL << 1UL )
  57:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT           ( 1UL << 0UL )
  58:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT       ( 1UL << 16UL )
  59:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_PENDSVCLEAR_BIT              ( 1UL << 27UL )
  60:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT       ( 1UL << 25UL )
  61:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  62:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_PENDSV_PRI                   ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  63:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_SYSTICK_PRI                  ( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) <<
  64:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  65:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to check the validity of an interrupt priority. */
  66:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER       ( 16 )
  67:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16       ( 0xE000E3F0 )
  68:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portAIRCR_REG                         ( *( ( volatile uint32_t * ) 0xE000ED0C ) )
  69:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMAX_8_BIT_VALUE                   ( ( uint8_t ) 0xff )
  70:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portTOP_BIT_OF_BYTE                   ( ( uint8_t ) 0x80 )
  71:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMAX_PRIGROUP_BITS                 ( ( uint8_t ) 7 )
  72:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portPRIORITY_GROUP_MASK               ( 0x07UL << 8UL )
  73:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portPRIGROUP_SHIFT                    ( 8UL )
  74:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  75:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  76:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portVECTACTIVE_MASK                   ( 0xFFUL )
  77:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  78:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to manipulate the VFP. */
  79:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portFPCCR                             ( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating po
  80:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portASPEN_AND_LSPEN_BITS              ( 0x3UL << 30UL )
  81:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  82:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* Constants required to set up the initial stack. */
  83:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portINITIAL_XPSR                      ( 0x01000000 )
  84:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portINITIAL_EXC_RETURN                ( 0xfffffffd )
  85:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  86:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* The systick is a 24-bit counter. */
  87:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMAX_24_BIT_NUMBER                 ( 0xffffffUL )
  88:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  89:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 3


  90:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  91:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portSTART_ADDRESS_MASK                ( ( StackType_t ) 0xfffffffeUL )
  92:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  93:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
  94:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * occurred while the SysTick counter is stopped during tickless idle
  95:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * calculations. */
  96:os/portable/GCC/ARM_CM7/r0p1/port.c **** #define portMISSED_COUNTS_FACTOR              ( 45UL )
  97:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
  98:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
  99:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * prvTaskExitError() in case it messes up unwinding of the stack in the
 100:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * debugger. */
 101:os/portable/GCC/ARM_CM7/r0p1/port.c **** #ifdef configTASK_RETURN_ADDRESS
 102:os/portable/GCC/ARM_CM7/r0p1/port.c ****     #define portTASK_RETURN_ADDRESS    configTASK_RETURN_ADDRESS
 103:os/portable/GCC/ARM_CM7/r0p1/port.c **** #else
 104:os/portable/GCC/ARM_CM7/r0p1/port.c ****     #define portTASK_RETURN_ADDRESS    prvTaskExitError
 105:os/portable/GCC/ARM_CM7/r0p1/port.c **** #endif
 106:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 107:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 108:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 109:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * file is weak to allow application writers to change the timer used to
 110:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * generate the tick interrupt.
 111:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 112:os/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortSetupTimerInterrupt( void );
 113:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 114:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 115:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * Exception handlers.
 116:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 117:os/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortPendSVHandler( void ) __attribute__( ( naked ) );
 118:os/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortSysTickHandler( void );
 119:os/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortSVCHandler( void ) __attribute__( ( naked ) );
 120:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 121:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 122:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 123:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 124:os/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvPortStartFirstTask( void ) __attribute__( ( naked ) );
 125:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 126:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 127:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * Function to enable the VFP.
 128:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 129:os/portable/GCC/ARM_CM7/r0p1/port.c **** static void vPortEnableVFP( void ) __attribute__( ( naked ) );
 130:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 131:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 132:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 133:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 134:os/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvTaskExitError( void );
 135:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 136:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 137:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 138:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 139:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * variable. */
 140:os/portable/GCC/ARM_CM7/r0p1/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
 141:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 142:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 143:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * The number of SysTick increments that make up one tick period.
 144:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 145:os/portable/GCC/ARM_CM7/r0p1/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 146:os/portable/GCC/ARM_CM7/r0p1/port.c ****     static uint32_t ulTimerCountsForOneTick = 0;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 4


 147:os/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 148:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 149:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 150:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 151:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * 24 bit resolution of the SysTick timer.
 152:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 153:os/portable/GCC/ARM_CM7/r0p1/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 154:os/portable/GCC/ARM_CM7/r0p1/port.c ****     static uint32_t xMaximumPossibleSuppressedTicks = 0;
 155:os/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 156:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 157:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 158:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 159:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * power functionality only.
 160:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 161:os/portable/GCC/ARM_CM7/r0p1/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 162:os/portable/GCC/ARM_CM7/r0p1/port.c ****     static uint32_t ulStoppedTimerCompensation = 0;
 163:os/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 164:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 165:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 166:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 167:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 168:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 169:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 170:os/portable/GCC/ARM_CM7/r0p1/port.c **** #if ( configASSERT_DEFINED == 1 )
 171:os/portable/GCC/ARM_CM7/r0p1/port.c ****     static uint8_t ucMaxSysCallPriority = 0;
 172:os/portable/GCC/ARM_CM7/r0p1/port.c ****     static uint32_t ulMaxPRIGROUPValue = 0;
 173:os/portable/GCC/ARM_CM7/r0p1/port.c ****     static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t *
 174:os/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* configASSERT_DEFINED */
 175:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 176:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 177:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 178:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 179:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * See header file for description.
 180:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 181:os/portable/GCC/ARM_CM7/r0p1/port.c **** StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
 182:os/portable/GCC/ARM_CM7/r0p1/port.c ****                                      TaskFunction_t pxCode,
 183:os/portable/GCC/ARM_CM7/r0p1/port.c ****                                      void * pvParameters )
 184:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 185:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 186:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * interrupt. */
 187:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 188:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Offset added to account for the way the MCU uses the stack on entry/exit
 189:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * of interrupts, and to ensure alignment. */
 190:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack--;
 191:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 192:os/portable/GCC/ARM_CM7/r0p1/port.c ****     *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 193:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack--;
 194:os/portable/GCC/ARM_CM7/r0p1/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 195:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack--;
 196:os/portable/GCC/ARM_CM7/r0p1/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 197:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 198:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Save code space by skipping register initialisation. */
 199:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 200:os/portable/GCC/ARM_CM7/r0p1/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 201:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 202:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* A save method is being used that requires each task to maintain its
 203:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * own exec return value. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 5


 204:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack--;
 205:os/portable/GCC/ARM_CM7/r0p1/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 206:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 207:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 208:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 209:os/portable/GCC/ARM_CM7/r0p1/port.c ****     return pxTopOfStack;
 210:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 211:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 212:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 213:os/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvTaskExitError( void )
 214:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
  27              		.loc 1 214 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
 215:os/portable/GCC/ARM_CM7/r0p1/port.c ****     volatile uint32_t ulDummy = 0;
  35              		.loc 1 215 5 view .LVU1
  36              		.loc 1 215 23 is_stmt 0 view .LVU2
  37 0002 0023     		movs	r3, #0
  38 0004 0193     		str	r3, [sp, #4]
 216:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 217:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* A function that implements a task must not exit or attempt to return to
 218:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * its caller as there is nothing to return to.  If a task wants to exit it
 219:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * should instead call vTaskDelete( NULL ).
 220:os/portable/GCC/ARM_CM7/r0p1/port.c ****      *
 221:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * Artificially force an assert() to be triggered if configASSERT() is
 222:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * defined, then stop here so application writers can catch the error. */
 223:os/portable/GCC/ARM_CM7/r0p1/port.c ****     configASSERT( uxCriticalNesting == ~0UL );
  39              		.loc 1 223 5 is_stmt 1 view .LVU3
  40 0006 0F4B     		ldr	r3, .L6
  41 0008 1B68     		ldr	r3, [r3]
  42 000a B3F1FF3F 		cmp	r3, #-1
  43 000e 0AD0     		beq	.L2
  44              		.loc 1 223 5 view .LVU4
  45              	.LBB27:
  46              	.LBI27:
  47              		.file 2 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FreeRTOS Kernel V10.4.3
   3:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
   5:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * subject to the following conditions:
  11:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  12:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * copies or substantial portions of the Software.
  14:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  15:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 6


  17:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  22:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * https://www.FreeRTOS.org
  23:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * https://github.com/FreeRTOS
  24:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  25:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * 1 tab == 4 spaces!
  26:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  27:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  28:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  29:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  30:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define PORTMACRO_H
  31:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  32:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifdef __cplusplus
  33:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         extern "C" {
  34:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
  35:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  36:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  37:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  38:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  39:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  41:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  42:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  43:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  44:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  45:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  46:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  47:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portCHAR          char
  48:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portFLOAT         float
  49:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portDOUBLE        double
  50:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portLONG          long
  51:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSHORT         short
  52:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portBASE_TYPE     long
  54:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  55:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     typedef long             BaseType_t;
  57:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         typedef uint16_t     TickType_t;
  61:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #else
  63:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         typedef uint32_t     TickType_t;
  64:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  66:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * not need to be guarded with a critical section. */
  68:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
  70:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  71:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  72:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
  73:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 7


  74:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  78:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  79:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
  80:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portYIELD()                                 \
  81:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {                                                   \
  82:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****                                                         \
  85:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
  90:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  91:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  96:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  97:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
  98:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     extern void vPortEnterCritical( void );
  99:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     extern void vPortExitCritical( void );
 100:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 107:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 108:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 109:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * (which build with all the ports) will build. */
 112:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 115:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 116:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 117:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 121:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 122:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 123:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 124:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 127:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 128:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 130:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Generic helper function. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 8


 131:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         {
 133:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             uint8_t ucReturn;
 134:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 135:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 137:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             return ucReturn;
 138:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         }
 139:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 140:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Check the configuration. */
 141:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #endif
 144:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 145:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 149:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 150:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 151:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 153:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 155:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 156:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 157:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifdef configASSERT
 158:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 161:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 162:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 163:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portNOP()
 164:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 165:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portINLINE              __inline
 166:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 167:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifndef portFORCE_INLINE
 168:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 170:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 171:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 173:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         BaseType_t xReturn;
 175:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 176:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 179:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         {
 181:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             xReturn = pdFALSE;
 182:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         }
 183:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         else
 184:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         {
 185:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             xReturn = pdTRUE;
 186:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         }
 187:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 9


 188:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         return xReturn;
 189:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 190:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 192:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  48              		.loc 2 193 34 view .LVU5
  49              	.LBB28:
 194:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         uint32_t ulNewBASEPRI;
  50              		.loc 2 195 9 view .LVU6
 196:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile
  51              		.loc 2 197 9 view .LVU7
  52              		.syntax unified
  53              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  54 0010 4FF05003 			mov r3, #80												
  55 0014 72B6     		cpsid i													
  56 0016 83F31188 		msr basepri, r3											
  57 001a BFF36F8F 		isb														
  58 001e BFF34F8F 		dsb														
  59 0022 62B6     		cpsie i													
  60              	
  61              	@ 0 "" 2
  62              	.LVL0:
  63              		.thumb
  64              		.syntax unified
  65              	.L3:
  66              		.loc 2 197 9 is_stmt 0 view .LVU8
  67              	.LBE28:
  68              	.LBE27:
  69              		.loc 1 223 5 is_stmt 1 discriminator 1 view .LVU9
  70              		.loc 1 223 5 discriminator 1 view .LVU10
  71              		.loc 1 223 5 discriminator 1 view .LVU11
  72 0024 FEE7     		b	.L3
  73              	.L2:
  74              		.loc 1 223 46 view .LVU12
 224:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portDISABLE_INTERRUPTS();
  75              		.loc 1 224 5 view .LVU13
  76              	.LBB29:
  77              	.LBI29:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
  78              		.loc 2 193 34 view .LVU14
  79              	.LBB30:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  80              		.loc 2 195 9 view .LVU15
  81              		.loc 2 197 9 view .LVU16
  82              		.syntax unified
  83              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  84 0026 4FF05003 			mov r3, #80												
  85 002a 72B6     		cpsid i													
  86 002c 83F31188 		msr basepri, r3											
  87 0030 BFF36F8F 		isb														
  88 0034 BFF34F8F 		dsb														
  89 0038 62B6     		cpsie i													
  90              	
  91              	@ 0 "" 2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 10


  92              	.LVL1:
  93              		.thumb
  94              		.syntax unified
  95              	.L4:
  96              		.loc 2 197 9 is_stmt 0 view .LVU17
  97              	.LBE30:
  98              	.LBE29:
 225:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 226:os/portable/GCC/ARM_CM7/r0p1/port.c ****     while( ulDummy == 0 )
 227:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 228:os/portable/GCC/ARM_CM7/r0p1/port.c ****         /* This file calls prvTaskExitError() after the scheduler has been
 229:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * started to remove a compiler warning about the function being defined
 230:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * but never called.  ulDummy is used purely to quieten other warnings
 231:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * about code appearing after this function is called - making ulDummy
 232:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * volatile makes the compiler think the function could return and
 233:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * therefore not output an 'unreachable code' warning for code that appears
 234:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * after it. */
 235:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
  99              		.loc 1 235 5 is_stmt 1 discriminator 1 view .LVU18
 226:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 100              		.loc 1 226 10 discriminator 1 view .LVU19
 226:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 101              		.loc 1 226 20 is_stmt 0 discriminator 1 view .LVU20
 102 003a 019B     		ldr	r3, [sp, #4]
 226:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 103              		.loc 1 226 10 discriminator 1 view .LVU21
 104 003c 002B     		cmp	r3, #0
 105 003e FCD0     		beq	.L4
 236:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 106              		.loc 1 236 1 view .LVU22
 107 0040 02B0     		add	sp, sp, #8
 108              	.LCFI1:
 109              		.cfi_def_cfa_offset 0
 110              		@ sp needed
 111 0042 7047     		bx	lr
 112              	.L7:
 113              		.align	2
 114              	.L6:
 115 0044 00000000 		.word	.LANCHOR0
 116              		.cfi_endproc
 117              	.LFE5:
 119              		.section	.text.prvPortStartFirstTask,"ax",%progbits
 120              		.align	1
 121              		.syntax unified
 122              		.thumb
 123              		.thumb_func
 124              		.fpu fpv5-d16
 126              	prvPortStartFirstTask:
 127              	.LFB7:
 237:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 238:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 239:os/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortSVCHandler( void )
 240:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 241:os/portable/GCC/ARM_CM7/r0p1/port.c ****     __asm volatile (
 242:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 243:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldr r1, [r3]					\n"/* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 244:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldr r0, [r1]					\n"/* The first item in pxCurrentTCB is the task top of stack. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 11


 245:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldmia r0!, {r4-r11, r14}		\n"/* Pop the registers that are not automatically saved on exc
 246:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	msr psp, r0						\n"/* Restore the task stack pointer. */
 247:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	isb								\n"
 248:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	mov r0, #0 						\n"
 249:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	msr	basepri, r0					\n"
 250:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	bx r14							\n"
 251:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "									\n"
 252:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	.align 4						\n"
 253:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 254:os/portable/GCC/ARM_CM7/r0p1/port.c ****         );
 255:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 256:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 257:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 258:os/portable/GCC/ARM_CM7/r0p1/port.c **** static void prvPortStartFirstTask( void )
 259:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 128              		.loc 1 259 1 is_stmt 1 view -0
 129              		.cfi_startproc
 130              		@ Naked Function: prologue and epilogue provided by programmer.
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 0, uses_anonymous_args = 0
 260:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Start the first task.  This also clears the bit that indicates the FPU is
 261:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * in use in case the FPU was used before the scheduler was started - which
 262:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * would otherwise result in the unnecessary leaving of space in the SVC stack
 263:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * for lazy saving of FPU registers. */
 264:os/portable/GCC/ARM_CM7/r0p1/port.c ****     __asm volatile (
 133              		.loc 1 264 5 view .LVU24
 134              		.syntax unified
 135              	@ 264 "os/portable/GCC/ARM_CM7/r0p1/port.c" 1
 136 0000 0848     		 ldr r0, =0xE000ED08 	
 137 0002 0068     	 ldr r0, [r0] 			
 138 0004 0068     	 ldr r0, [r0] 			
 139 0006 80F30888 	 msr msp, r0			
 140 000a 4FF00000 	 mov r0, #0			
 141 000e 80F31488 	 msr control, r0		
 142 0012 62B6     	 cpsie i				
 143 0014 61B6     	 cpsie f				
 144 0016 BFF34F8F 	 dsb					
 145 001a BFF36F8F 	 isb					
 146 001e 00DF     	 svc 0					
 147 0020 00BF     	 nop					
 148 0022 000008ED 	 .ltorg				
 148      00E0
 149              	
 150              	@ 0 "" 2
 265:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " ldr r0, =0xE000ED08 	\n"/* Use the NVIC offset register to locate the stack. */
 266:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " ldr r0, [r0] 			\n"
 267:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " ldr r0, [r0] 			\n"
 268:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " msr msp, r0			\n"/* Set the msp back to the start of the stack. */
 269:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " mov r0, #0			\n"/* Clear the bit that indicates the FPU is in use, see comment above. */
 270:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " msr control, r0		\n"
 271:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " cpsie i				\n"/* Globally enable interrupts. */
 272:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " cpsie f				\n"
 273:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " dsb					\n"
 274:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " isb					\n"
 275:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " svc 0					\n"/* System call to start first task. */
 276:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " nop					\n"
 277:os/portable/GCC/ARM_CM7/r0p1/port.c ****         " .ltorg				\n"
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 12


 278:os/portable/GCC/ARM_CM7/r0p1/port.c ****         );
 279:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 151              		.loc 1 279 1 is_stmt 0 view .LVU25
 152              		.thumb
 153              		.syntax unified
 154              		.cfi_endproc
 155              	.LFE7:
 157              		.section	.text.vPortEnableVFP,"ax",%progbits
 158              		.align	1
 159              		.syntax unified
 160              		.thumb
 161              		.thumb_func
 162              		.fpu fpv5-d16
 164              	vPortEnableVFP:
 165              	.LFB15:
 280:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 281:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 282:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 283:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * See header file for description.
 284:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 285:os/portable/GCC/ARM_CM7/r0p1/port.c **** BaseType_t xPortStartScheduler( void )
 286:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 287:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 288:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 289:os/portable/GCC/ARM_CM7/r0p1/port.c ****     configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 290:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 291:os/portable/GCC/ARM_CM7/r0p1/port.c ****     #if ( configASSERT_DEFINED == 1 )
 292:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 293:os/portable/GCC/ARM_CM7/r0p1/port.c ****             volatile uint32_t ulOriginalPriority;
 294:os/portable/GCC/ARM_CM7/r0p1/port.c ****             volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( 
 295:os/portable/GCC/ARM_CM7/r0p1/port.c ****             volatile uint8_t ucMaxPriorityValue;
 296:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 297:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Determine the maximum priority from which ISR safe FreeRTOS API
 298:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * functions can be called.  ISR safe functions are those that end in
 299:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 300:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * ensure interrupt entry is as fast and simple as possible.
 301:os/portable/GCC/ARM_CM7/r0p1/port.c ****              *
 302:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * Save the interrupt priority value that is about to be clobbered. */
 303:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ulOriginalPriority = *pucFirstUserPriorityRegister;
 304:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 305:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Determine the number of priority bits available.  First write to all
 306:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * possible bits. */
 307:os/portable/GCC/ARM_CM7/r0p1/port.c ****             *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 308:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 309:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Read the value back to see how many bits stuck. */
 310:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 311:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 312:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Use the same mask on the maximum system call priority. */
 313:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 314:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 315:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Calculate the maximum acceptable priority group value for the number
 316:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * of bits read back. */
 317:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 318:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 319:os/portable/GCC/ARM_CM7/r0p1/port.c ****             while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 320:os/portable/GCC/ARM_CM7/r0p1/port.c ****             {
 321:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 ulMaxPRIGROUPValue--;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 13


 322:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 323:os/portable/GCC/ARM_CM7/r0p1/port.c ****             }
 324:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 325:os/portable/GCC/ARM_CM7/r0p1/port.c ****             #ifdef __NVIC_PRIO_BITS
 326:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 {
 327:os/portable/GCC/ARM_CM7/r0p1/port.c ****                     /* Check the CMSIS configuration that defines the number of
 328:os/portable/GCC/ARM_CM7/r0p1/port.c ****                      * priority bits matches the number of priority bits actually queried
 329:os/portable/GCC/ARM_CM7/r0p1/port.c ****                      * from the hardware. */
 330:os/portable/GCC/ARM_CM7/r0p1/port.c ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BIT
 331:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 }
 332:os/portable/GCC/ARM_CM7/r0p1/port.c ****             #endif
 333:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 334:os/portable/GCC/ARM_CM7/r0p1/port.c ****             #ifdef configPRIO_BITS
 335:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 {
 336:os/portable/GCC/ARM_CM7/r0p1/port.c ****                     /* Check the FreeRTOS configuration that defines the number of
 337:os/portable/GCC/ARM_CM7/r0p1/port.c ****                      * priority bits matches the number of priority bits actually queried
 338:os/portable/GCC/ARM_CM7/r0p1/port.c ****                      * from the hardware. */
 339:os/portable/GCC/ARM_CM7/r0p1/port.c ****                     configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS
 340:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 }
 341:os/portable/GCC/ARM_CM7/r0p1/port.c ****             #endif
 342:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 343:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Shift the priority group value back to its position within the AIRCR
 344:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * register. */
 345:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 346:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 347:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 348:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Restore the clobbered interrupt priority register to its original
 349:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * value. */
 350:os/portable/GCC/ARM_CM7/r0p1/port.c ****             *pucFirstUserPriorityRegister = ulOriginalPriority;
 351:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 352:os/portable/GCC/ARM_CM7/r0p1/port.c ****     #endif /* conifgASSERT_DEFINED */
 353:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 354:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Make PendSV and SysTick the lowest priority interrupts. */
 355:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 356:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 357:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 358:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Start the timer that generates the tick ISR.  Interrupts are disabled
 359:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * here already. */
 360:os/portable/GCC/ARM_CM7/r0p1/port.c ****     vPortSetupTimerInterrupt();
 361:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 362:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Initialise the critical nesting count ready for the first task. */
 363:os/portable/GCC/ARM_CM7/r0p1/port.c ****     uxCriticalNesting = 0;
 364:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 365:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Ensure the VFP is enabled - it should be anyway. */
 366:os/portable/GCC/ARM_CM7/r0p1/port.c ****     vPortEnableVFP();
 367:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 368:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Lazy save always. */
 369:os/portable/GCC/ARM_CM7/r0p1/port.c ****     *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 370:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 371:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Start the first task. */
 372:os/portable/GCC/ARM_CM7/r0p1/port.c ****     prvPortStartFirstTask();
 373:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 374:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Should never get here as the tasks will now be executing!  Call the task
 375:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * exit error function to prevent compiler warnings about a static function
 376:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * not being called in the case that the application writer overrides this
 377:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * functionality by defining configTASK_RETURN_ADDRESS.  Call
 378:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * vTaskSwitchContext() so link time optimisation does not remove the
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 14


 379:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * symbol. */
 380:os/portable/GCC/ARM_CM7/r0p1/port.c ****     vTaskSwitchContext();
 381:os/portable/GCC/ARM_CM7/r0p1/port.c ****     prvTaskExitError();
 382:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 383:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Should not get here! */
 384:os/portable/GCC/ARM_CM7/r0p1/port.c ****     return 0;
 385:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 386:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 387:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 388:os/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortEndScheduler( void )
 389:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 390:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Not implemented in ports where there is nothing to return to.
 391:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * Artificially force an assert. */
 392:os/portable/GCC/ARM_CM7/r0p1/port.c ****     configASSERT( uxCriticalNesting == 1000UL );
 393:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 394:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 395:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 396:os/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortEnterCritical( void )
 397:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 398:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portDISABLE_INTERRUPTS();
 399:os/portable/GCC/ARM_CM7/r0p1/port.c ****     uxCriticalNesting++;
 400:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 401:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* This is not the interrupt safe version of the enter critical function so
 402:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * assert() if it is being called from an interrupt context.  Only API
 403:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * functions that end in "FromISR" can be used in an interrupt.  Only assert if
 404:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * the critical nesting count is 1 to protect against recursive calls if the
 405:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * assert function also uses a critical section. */
 406:os/portable/GCC/ARM_CM7/r0p1/port.c ****     if( uxCriticalNesting == 1 )
 407:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 408:os/portable/GCC/ARM_CM7/r0p1/port.c ****         configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 409:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 410:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 411:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 412:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 413:os/portable/GCC/ARM_CM7/r0p1/port.c **** void vPortExitCritical( void )
 414:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 415:os/portable/GCC/ARM_CM7/r0p1/port.c ****     configASSERT( uxCriticalNesting );
 416:os/portable/GCC/ARM_CM7/r0p1/port.c ****     uxCriticalNesting--;
 417:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 418:os/portable/GCC/ARM_CM7/r0p1/port.c ****     if( uxCriticalNesting == 0 )
 419:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 420:os/portable/GCC/ARM_CM7/r0p1/port.c ****         portENABLE_INTERRUPTS();
 421:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 422:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 423:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 424:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 425:os/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortPendSVHandler( void )
 426:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 427:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* This is a naked function. */
 428:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 429:os/portable/GCC/ARM_CM7/r0p1/port.c ****     __asm volatile
 430:os/portable/GCC/ARM_CM7/r0p1/port.c ****     (
 431:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	mrs r0, psp							\n"
 432:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	isb									\n"
 433:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 434:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldr	r3, pxCurrentTCBConst			\n"/* Get the location of the current TCB. */
 435:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldr	r2, [r3]						\n"
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 15


 436:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 437:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	tst r14, #0x10						\n"/* Is the task using the FPU context?  If so, push high vfp regist
 438:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	it eq								\n"
 439:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	vstmdbeq r0!, {s16-s31}				\n"
 440:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 441:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	stmdb r0!, {r4-r11, r14}			\n"/* Save the core registers. */
 442:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	str r0, [r2]						\n"/* Save the new top of stack into the first member of the TCB. */
 443:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 444:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	stmdb sp!, {r0, r3}					\n"
 445:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	mov r0, %0 							\n"
 446:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	cpsid i								\n"/* Errata workaround. */
 447:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	msr basepri, r0						\n"
 448:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	dsb									\n"
 449:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	isb									\n"
 450:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	cpsie i								\n"/* Errata workaround. */
 451:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	bl vTaskSwitchContext				\n"
 452:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	mov r0, #0							\n"
 453:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	msr basepri, r0						\n"
 454:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldmia sp!, {r0, r3}					\n"
 455:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 456:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldr r1, [r3]						\n"/* The first item in pxCurrentTCB is the task top of stack. */
 457:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldr r0, [r1]						\n"
 458:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 459:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldmia r0!, {r4-r11, r14}			\n"/* Pop the core registers. */
 460:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 461:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	tst r14, #0x10						\n"/* Is the task using the FPU context?  If so, pop the high vfp reg
 462:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	it eq								\n"
 463:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	vldmiaeq r0!, {s16-s31}				\n"
 464:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 465:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	msr psp, r0							\n"
 466:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	isb									\n"
 467:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 468:os/portable/GCC/ARM_CM7/r0p1/port.c ****         #ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 469:os/portable/GCC/ARM_CM7/r0p1/port.c ****             #if WORKAROUND_PMU_CM001 == 1
 470:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 "			push { r14 }				\n"
 471:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 "			pop { pc }					\n"
 472:os/portable/GCC/ARM_CM7/r0p1/port.c ****             #endif
 473:os/portable/GCC/ARM_CM7/r0p1/port.c ****         #endif
 474:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 475:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	bx r14								\n"
 476:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "										\n"
 477:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	.align 4							\n"
 478:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "pxCurrentTCBConst: .word pxCurrentTCB	\n"
 479:os/portable/GCC/ARM_CM7/r0p1/port.c ****         ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 480:os/portable/GCC/ARM_CM7/r0p1/port.c ****     );
 481:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 482:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 483:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 484:os/portable/GCC/ARM_CM7/r0p1/port.c **** void xPortSysTickHandler( void )
 485:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 486:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 487:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * executes all interrupts must be unmasked.  There is therefore no need to
 488:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * save and then restore the interrupt mask value as its value is already
 489:os/portable/GCC/ARM_CM7/r0p1/port.c ****      * known. */
 490:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portDISABLE_INTERRUPTS();
 491:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 492:os/portable/GCC/ARM_CM7/r0p1/port.c ****         /* Increment the RTOS tick. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 16


 493:os/portable/GCC/ARM_CM7/r0p1/port.c ****         if( xTaskIncrementTick() != pdFALSE )
 494:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 495:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* A context switch is required.  Context switching is performed in
 496:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * the PendSV interrupt.  Pend the PendSV interrupt. */
 497:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 498:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 499:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 500:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portENABLE_INTERRUPTS();
 501:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 502:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 503:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 504:os/portable/GCC/ARM_CM7/r0p1/port.c **** #if ( configUSE_TICKLESS_IDLE == 1 )
 505:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 506:os/portable/GCC/ARM_CM7/r0p1/port.c ****     __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 507:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 508:os/portable/GCC/ARM_CM7/r0p1/port.c ****         uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 509:os/portable/GCC/ARM_CM7/r0p1/port.c ****         TickType_t xModifiableIdleTime;
 510:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 511:os/portable/GCC/ARM_CM7/r0p1/port.c ****         /* Make sure the SysTick reload value does not overflow the counter. */
 512:os/portable/GCC/ARM_CM7/r0p1/port.c ****         if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 513:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 514:os/portable/GCC/ARM_CM7/r0p1/port.c ****             xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 515:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 516:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 517:os/portable/GCC/ARM_CM7/r0p1/port.c ****         /* Stop the SysTick momentarily.  The time the SysTick is stopped for
 518:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * is accounted for as best it can be, but using the tickless mode will
 519:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * inevitably result in some tiny drift of the time maintained by the
 520:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * kernel with respect to calendar time. */
 521:os/portable/GCC/ARM_CM7/r0p1/port.c ****         portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 522:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 523:os/portable/GCC/ARM_CM7/r0p1/port.c ****         /* Calculate the reload value required to wait xExpectedIdleTime
 524:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * tick periods.  -1 is used because this code will execute part way
 525:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * through one of the tick periods. */
 526:os/portable/GCC/ARM_CM7/r0p1/port.c ****         ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpecte
 527:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 528:os/portable/GCC/ARM_CM7/r0p1/port.c ****         if( ulReloadValue > ulStoppedTimerCompensation )
 529:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 530:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ulReloadValue -= ulStoppedTimerCompensation;
 531:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 532:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 533:os/portable/GCC/ARM_CM7/r0p1/port.c ****         /* Enter a critical section but don't use the taskENTER_CRITICAL()
 534:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * method as that will mask interrupts that should exit sleep mode. */
 535:os/portable/GCC/ARM_CM7/r0p1/port.c ****         __asm volatile ( "cpsid i" ::: "memory" );
 536:os/portable/GCC/ARM_CM7/r0p1/port.c ****         __asm volatile ( "dsb" );
 537:os/portable/GCC/ARM_CM7/r0p1/port.c ****         __asm volatile ( "isb" );
 538:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 539:os/portable/GCC/ARM_CM7/r0p1/port.c ****         /* If a context switch is pending or a task is waiting for the scheduler
 540:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * to be unsuspended then abandon the low power entry. */
 541:os/portable/GCC/ARM_CM7/r0p1/port.c ****         if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 542:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 543:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Restart from whatever is left in the count register to complete
 544:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * this tick period. */
 545:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 546:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 547:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Restart SysTick. */
 548:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 549:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 17


 550:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Reset the reload register to the value required for normal tick
 551:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * periods. */
 552:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 553:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 554:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Re-enable interrupts - see comments above the cpsid instruction()
 555:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * above. */
 556:os/portable/GCC/ARM_CM7/r0p1/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 557:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 558:os/portable/GCC/ARM_CM7/r0p1/port.c ****         else
 559:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 560:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Set the new reload value. */
 561:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 562:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 563:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Clear the SysTick count flag and set the count value back to
 564:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * zero. */
 565:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 566:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 567:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Restart SysTick. */
 568:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 569:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 570:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 571:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * set its parameter to 0 to indicate that its implementation contains
 572:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * its own wait for interrupt or wait for event instruction, and so wfi
 573:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * should not be executed again.  However, the original expected idle
 574:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * time variable must remain unmodified, so a copy is taken. */
 575:os/portable/GCC/ARM_CM7/r0p1/port.c ****             xModifiableIdleTime = xExpectedIdleTime;
 576:os/portable/GCC/ARM_CM7/r0p1/port.c ****             configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 577:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 578:os/portable/GCC/ARM_CM7/r0p1/port.c ****             if( xModifiableIdleTime > 0 )
 579:os/portable/GCC/ARM_CM7/r0p1/port.c ****             {
 580:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 __asm volatile ( "dsb" ::: "memory" );
 581:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 __asm volatile ( "wfi" );
 582:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 __asm volatile ( "isb" );
 583:os/portable/GCC/ARM_CM7/r0p1/port.c ****             }
 584:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 585:os/portable/GCC/ARM_CM7/r0p1/port.c ****             configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 586:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 587:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Re-enable interrupts to allow the interrupt that brought the MCU
 588:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * out of sleep mode to execute immediately.  see comments above
 589:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * __disable_interrupt() call above. */
 590:os/portable/GCC/ARM_CM7/r0p1/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 591:os/portable/GCC/ARM_CM7/r0p1/port.c ****             __asm volatile ( "dsb" );
 592:os/portable/GCC/ARM_CM7/r0p1/port.c ****             __asm volatile ( "isb" );
 593:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 594:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Disable interrupts again because the clock is about to be stopped
 595:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * and interrupts that execute while the clock is stopped will increase
 596:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * any slippage between the time maintained by the RTOS and calendar
 597:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * time. */
 598:os/portable/GCC/ARM_CM7/r0p1/port.c ****             __asm volatile ( "cpsid i" ::: "memory" );
 599:os/portable/GCC/ARM_CM7/r0p1/port.c ****             __asm volatile ( "dsb" );
 600:os/portable/GCC/ARM_CM7/r0p1/port.c ****             __asm volatile ( "isb" );
 601:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 602:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Disable the SysTick clock without reading the
 603:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * portNVIC_SYSTICK_CTRL_REG register to ensure the
 604:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 605:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * the time the SysTick is stopped for is accounted for as best it can
 606:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * be, but using the tickless mode will inevitably result in some tiny
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 18


 607:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * drift of the time maintained by the kernel with respect to calendar
 608:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * time*/
 609:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 610:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 611:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Determine if the SysTick clock has already counted to zero and
 612:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * been set back to the current reload value (the reload back being
 613:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * correct for the entire expected idle time) or if the SysTick is yet
 614:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * to count to zero (in which case an interrupt other than the SysTick
 615:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * must have brought the system out of sleep mode). */
 616:os/portable/GCC/ARM_CM7/r0p1/port.c ****             if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 617:os/portable/GCC/ARM_CM7/r0p1/port.c ****             {
 618:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 uint32_t ulCalculatedLoadValue;
 619:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 620:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 /* The tick interrupt is already pending, and the SysTick count
 621:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * reloaded with ulReloadValue.  Reset the
 622:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 623:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * period. */
 624:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portN
 625:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 626:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 /* Don't allow a tiny value, or values that have somehow
 627:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * underflowed because the post sleep hook did something
 628:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * that took too long. */
 629:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadVal
 630:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 {
 631:os/portable/GCC/ARM_CM7/r0p1/port.c ****                     ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 632:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 }
 633:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 634:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 635:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 636:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 /* As the pending tick will be processed as soon as this
 637:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * function exits, the tick value maintained by the tick is stepped
 638:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * forward by one less than the time spent waiting. */
 639:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 640:os/portable/GCC/ARM_CM7/r0p1/port.c ****             }
 641:os/portable/GCC/ARM_CM7/r0p1/port.c ****             else
 642:os/portable/GCC/ARM_CM7/r0p1/port.c ****             {
 643:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 /* Something other than the tick interrupt ended the sleep.
 644:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * Work out how long the sleep lasted rounded to complete tick
 645:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * periods (not the ulReload value which accounted for part
 646:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * ticks). */
 647:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - po
 648:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 649:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 /* How many complete tick periods passed while the processor
 650:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * was waiting? */
 651:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 652:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 653:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 /* The reload value is set to whatever fraction of a single tick
 654:os/portable/GCC/ARM_CM7/r0p1/port.c ****                  * period remains. */
 655:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOne
 656:os/portable/GCC/ARM_CM7/r0p1/port.c ****             }
 657:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 658:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 659:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 660:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * value. */
 661:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 662:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 663:os/portable/GCC/ARM_CM7/r0p1/port.c ****             vTaskStepTick( ulCompleteTickPeriods );
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 19


 664:os/portable/GCC/ARM_CM7/r0p1/port.c ****             portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 665:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 666:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Exit with interrupts enabled. */
 667:os/portable/GCC/ARM_CM7/r0p1/port.c ****             __asm volatile ( "cpsie i" ::: "memory" );
 668:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 669:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 670:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 671:os/portable/GCC/ARM_CM7/r0p1/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 672:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 673:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 674:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*
 675:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 676:os/portable/GCC/ARM_CM7/r0p1/port.c ****  * frequency.
 677:os/portable/GCC/ARM_CM7/r0p1/port.c ****  */
 678:os/portable/GCC/ARM_CM7/r0p1/port.c **** __attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
 679:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 680:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 681:os/portable/GCC/ARM_CM7/r0p1/port.c ****     #if ( configUSE_TICKLESS_IDLE == 1 )
 682:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 683:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 684:os/portable/GCC/ARM_CM7/r0p1/port.c ****             xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 685:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSY
 686:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 687:os/portable/GCC/ARM_CM7/r0p1/port.c ****     #endif /* configUSE_TICKLESS_IDLE */
 688:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 689:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Stop and clear the SysTick. */
 690:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SYSTICK_CTRL_REG = 0UL;
 691:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 692:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 693:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Configure SysTick to interrupt at the requested rate. */
 694:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 695:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 696:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 697:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 698:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 699:os/portable/GCC/ARM_CM7/r0p1/port.c **** /* This is a naked function. */
 700:os/portable/GCC/ARM_CM7/r0p1/port.c **** static void vPortEnableVFP( void )
 701:os/portable/GCC/ARM_CM7/r0p1/port.c **** {
 166              		.loc 1 701 1 is_stmt 1 view -0
 167              		.cfi_startproc
 168              		@ Naked Function: prologue and epilogue provided by programmer.
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 702:os/portable/GCC/ARM_CM7/r0p1/port.c ****     __asm volatile
 171              		.loc 1 702 5 view .LVU27
 172              		.syntax unified
 173              	@ 702 "os/portable/GCC/ARM_CM7/r0p1/port.c" 1
 174 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 175 0004 0168     		ldr r1, [r0]				
 176              									
 177 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 178 000a 0160     		str r1, [r0]				
 179 000c 7047     		bx r14						
 180 000e 000088ED 		.ltorg						
 180      00E0
 181              	
 182              	@ 0 "" 2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 20


 703:os/portable/GCC/ARM_CM7/r0p1/port.c ****     (
 704:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldr.w r0, =0xE000ED88		\n"/* The FPU enable bits are in the CPACR. */
 705:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldr r1, [r0]				\n"
 706:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "								\n"
 707:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
 708:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	str r1, [r0]				\n"
 709:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	bx r14						\n"
 710:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	.ltorg						\n"
 711:os/portable/GCC/ARM_CM7/r0p1/port.c ****     );
 712:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 183              		.loc 1 712 1 is_stmt 0 view .LVU28
 184              		.thumb
 185              		.syntax unified
 186              		.cfi_endproc
 187              	.LFE15:
 189              		.section	.text.pxPortInitialiseStack,"ax",%progbits
 190              		.align	1
 191              		.global	pxPortInitialiseStack
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu fpv5-d16
 197              	pxPortInitialiseStack:
 198              	.LVL2:
 199              	.LFB4:
 184:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Simulate the stack frame as it would be created by a context switch
 200              		.loc 1 184 1 is_stmt 1 view -0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              		@ link register save eliminated.
 190:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 205              		.loc 1 190 5 view .LVU30
 192:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack--;
 206              		.loc 1 192 5 view .LVU31
 192:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack--;
 207              		.loc 1 192 19 is_stmt 0 view .LVU32
 208 0000 4FF08073 		mov	r3, #16777216
 209 0004 40F8043C 		str	r3, [r0, #-4]
 193:os/portable/GCC/ARM_CM7/r0p1/port.c ****     *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 210              		.loc 1 193 5 is_stmt 1 view .LVU33
 211              	.LVL3:
 194:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack--;
 212              		.loc 1 194 5 view .LVU34
 194:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack--;
 213              		.loc 1 194 48 is_stmt 0 view .LVU35
 214 0008 21F00101 		bic	r1, r1, #1
 215              	.LVL4:
 194:os/portable/GCC/ARM_CM7/r0p1/port.c ****     pxTopOfStack--;
 216              		.loc 1 194 19 view .LVU36
 217 000c 40F8081C 		str	r1, [r0, #-8]
 195:os/portable/GCC/ARM_CM7/r0p1/port.c ****     *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 218              		.loc 1 195 5 is_stmt 1 view .LVU37
 219              	.LVL5:
 196:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 220              		.loc 1 196 5 view .LVU38
 196:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 21


 221              		.loc 1 196 21 is_stmt 0 view .LVU39
 222 0010 054B     		ldr	r3, .L11
 196:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 223              		.loc 1 196 19 view .LVU40
 224 0012 40F80C3C 		str	r3, [r0, #-12]
 199:os/portable/GCC/ARM_CM7/r0p1/port.c ****     *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 225              		.loc 1 199 5 is_stmt 1 view .LVU41
 226              	.LVL6:
 200:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 227              		.loc 1 200 5 view .LVU42
 200:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 228              		.loc 1 200 19 is_stmt 0 view .LVU43
 229 0016 40F8202C 		str	r2, [r0, #-32]
 204:os/portable/GCC/ARM_CM7/r0p1/port.c ****     *pxTopOfStack = portINITIAL_EXC_RETURN;
 230              		.loc 1 204 5 is_stmt 1 view .LVU44
 231              	.LVL7:
 205:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 232              		.loc 1 205 5 view .LVU45
 205:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 233              		.loc 1 205 19 is_stmt 0 view .LVU46
 234 001a 6FF00203 		mvn	r3, #2
 235 001e 40F8243C 		str	r3, [r0, #-36]
 207:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 236              		.loc 1 207 5 is_stmt 1 view .LVU47
 237              	.LVL8:
 209:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 238              		.loc 1 209 5 view .LVU48
 210:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 239              		.loc 1 210 1 is_stmt 0 view .LVU49
 240 0022 4438     		subs	r0, r0, #68
 241              	.LVL9:
 210:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 242              		.loc 1 210 1 view .LVU50
 243 0024 7047     		bx	lr
 244              	.L12:
 245 0026 00BF     		.align	2
 246              	.L11:
 247 0028 00000000 		.word	prvTaskExitError
 248              		.cfi_endproc
 249              	.LFE4:
 251              		.section	.text.SVC_Handler,"ax",%progbits
 252              		.align	1
 253              		.global	SVC_Handler
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu fpv5-d16
 259              	SVC_Handler:
 260              	.LFB6:
 240:os/portable/GCC/ARM_CM7/r0p1/port.c ****     __asm volatile (
 261              		.loc 1 240 1 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ Naked Function: prologue and epilogue provided by programmer.
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 241:os/portable/GCC/ARM_CM7/r0p1/port.c ****         "	ldr	r3, pxCurrentTCBConst2		\n"/* Restore the context. */
 266              		.loc 1 241 5 view .LVU52
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 22


 267              		.syntax unified
 268              	@ 241 "os/portable/GCC/ARM_CM7/r0p1/port.c" 1
 269 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 270 0002 1968     		ldr r1, [r3]					
 271 0004 0868     		ldr r0, [r1]					
 272 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 273 000a 80F30988 		msr psp, r0						
 274 000e BFF36F8F 		isb								
 275 0012 4FF00000 		mov r0, #0 						
 276 0016 80F31188 		msr	basepri, r0					
 277 001a 7047     		bx r14							
 278              										
 279 001c AFF30080 		.align 4						
 280 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 281              	
 282              	@ 0 "" 2
 255:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 283              		.loc 1 255 1 is_stmt 0 view .LVU53
 284              		.thumb
 285              		.syntax unified
 286              		.cfi_endproc
 287              	.LFE6:
 289              		.section	.text.vPortEndScheduler,"ax",%progbits
 290              		.align	1
 291              		.global	vPortEndScheduler
 292              		.syntax unified
 293              		.thumb
 294              		.thumb_func
 295              		.fpu fpv5-d16
 297              	vPortEndScheduler:
 298              	.LFB9:
 389:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Not implemented in ports where there is nothing to return to.
 299              		.loc 1 389 1 is_stmt 1 view -0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              		@ link register save eliminated.
 392:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 304              		.loc 1 392 5 view .LVU55
 305 0000 084B     		ldr	r3, .L17
 306 0002 1B68     		ldr	r3, [r3]
 307 0004 B3F57A7F 		cmp	r3, #1000
 308 0008 0AD0     		beq	.L14
 392:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 309              		.loc 1 392 5 view .LVU56
 310              	.LBB31:
 311              	.LBI31:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 312              		.loc 2 193 34 view .LVU57
 313              	.LBB32:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 314              		.loc 2 195 9 view .LVU58
 315              		.loc 2 197 9 view .LVU59
 316              		.syntax unified
 317              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 318 000a 4FF05003 			mov r3, #80												
 319 000e 72B6     		cpsid i													
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 23


 320 0010 83F31188 		msr basepri, r3											
 321 0014 BFF36F8F 		isb														
 322 0018 BFF34F8F 		dsb														
 323 001c 62B6     		cpsie i													
 324              	
 325              	@ 0 "" 2
 326              	.LVL10:
 327              		.thumb
 328              		.syntax unified
 329              	.L16:
 330              		.loc 2 197 9 is_stmt 0 view .LVU60
 331              	.LBE32:
 332              	.LBE31:
 392:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 333              		.loc 1 392 5 is_stmt 1 discriminator 1 view .LVU61
 392:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 334              		.loc 1 392 5 discriminator 1 view .LVU62
 392:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 335              		.loc 1 392 5 discriminator 1 view .LVU63
 336 001e FEE7     		b	.L16
 337              	.L14:
 393:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 338              		.loc 1 393 1 is_stmt 0 view .LVU64
 339 0020 7047     		bx	lr
 340              	.L18:
 341 0022 00BF     		.align	2
 342              	.L17:
 343 0024 00000000 		.word	.LANCHOR0
 344              		.cfi_endproc
 345              	.LFE9:
 347              		.section	.text.vPortEnterCritical,"ax",%progbits
 348              		.align	1
 349              		.global	vPortEnterCritical
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 353              		.fpu fpv5-d16
 355              	vPortEnterCritical:
 356              	.LFB10:
 397:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portDISABLE_INTERRUPTS();
 357              		.loc 1 397 1 is_stmt 1 view -0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 398:os/portable/GCC/ARM_CM7/r0p1/port.c ****     uxCriticalNesting++;
 362              		.loc 1 398 5 view .LVU66
 363              	.LBB33:
 364              	.LBI33:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 365              		.loc 2 193 34 view .LVU67
 366              	.LBB34:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 367              		.loc 2 195 9 view .LVU68
 368              		.loc 2 197 9 view .LVU69
 369              		.syntax unified
 370              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 24


 371 0000 4FF05003 			mov r3, #80												
 372 0004 72B6     		cpsid i													
 373 0006 83F31188 		msr basepri, r3											
 374 000a BFF36F8F 		isb														
 375 000e BFF34F8F 		dsb														
 376 0012 62B6     		cpsie i													
 377              	
 378              	@ 0 "" 2
 379              		.thumb
 380              		.syntax unified
 381              	.LBE34:
 382              	.LBE33:
 399:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 383              		.loc 1 399 5 view .LVU70
 399:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 384              		.loc 1 399 22 is_stmt 0 view .LVU71
 385 0014 0B4A     		ldr	r2, .L23
 386 0016 1368     		ldr	r3, [r2]
 387 0018 0133     		adds	r3, r3, #1
 388 001a 1360     		str	r3, [r2]
 406:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 389              		.loc 1 406 5 is_stmt 1 view .LVU72
 406:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 390              		.loc 1 406 7 is_stmt 0 view .LVU73
 391 001c 012B     		cmp	r3, #1
 392 001e 00D0     		beq	.L22
 393              	.L19:
 410:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 394              		.loc 1 410 1 view .LVU74
 395 0020 7047     		bx	lr
 396              	.L22:
 408:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 397              		.loc 1 408 9 is_stmt 1 view .LVU75
 398 0022 094B     		ldr	r3, .L23+4
 399 0024 1B68     		ldr	r3, [r3]
 400 0026 13F0FF0F 		tst	r3, #255
 401 002a F9D0     		beq	.L19
 408:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 402              		.loc 1 408 9 view .LVU76
 403              	.LBB35:
 404              	.LBI35:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 405              		.loc 2 193 34 view .LVU77
 406              	.LBB36:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 407              		.loc 2 195 9 view .LVU78
 408              		.loc 2 197 9 view .LVU79
 409              		.syntax unified
 410              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 411 002c 4FF05003 			mov r3, #80												
 412 0030 72B6     		cpsid i													
 413 0032 83F31188 		msr basepri, r3											
 414 0036 BFF36F8F 		isb														
 415 003a BFF34F8F 		dsb														
 416 003e 62B6     		cpsie i													
 417              	
 418              	@ 0 "" 2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 25


 419              	.LVL11:
 420              		.thumb
 421              		.syntax unified
 422              	.L21:
 423              		.loc 2 197 9 is_stmt 0 view .LVU80
 424              	.LBE36:
 425              	.LBE35:
 408:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 426              		.loc 1 408 9 is_stmt 1 discriminator 1 view .LVU81
 408:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 427              		.loc 1 408 9 discriminator 1 view .LVU82
 408:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 428              		.loc 1 408 9 discriminator 1 view .LVU83
 429 0040 FEE7     		b	.L21
 430              	.L24:
 431 0042 00BF     		.align	2
 432              	.L23:
 433 0044 00000000 		.word	.LANCHOR0
 434 0048 04ED00E0 		.word	-536810236
 435              		.cfi_endproc
 436              	.LFE10:
 438              		.section	.text.vPortExitCritical,"ax",%progbits
 439              		.align	1
 440              		.global	vPortExitCritical
 441              		.syntax unified
 442              		.thumb
 443              		.thumb_func
 444              		.fpu fpv5-d16
 446              	vPortExitCritical:
 447              	.LFB11:
 414:os/portable/GCC/ARM_CM7/r0p1/port.c ****     configASSERT( uxCriticalNesting );
 448              		.loc 1 414 1 view -0
 449              		.cfi_startproc
 450              		@ args = 0, pretend = 0, frame = 0
 451              		@ frame_needed = 0, uses_anonymous_args = 0
 452              		@ link register save eliminated.
 415:os/portable/GCC/ARM_CM7/r0p1/port.c ****     uxCriticalNesting--;
 453              		.loc 1 415 5 view .LVU85
 454 0000 0A4B     		ldr	r3, .L29
 455 0002 1B68     		ldr	r3, [r3]
 456 0004 53B9     		cbnz	r3, .L26
 415:os/portable/GCC/ARM_CM7/r0p1/port.c ****     uxCriticalNesting--;
 457              		.loc 1 415 5 view .LVU86
 458              	.LBB37:
 459              	.LBI37:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 460              		.loc 2 193 34 view .LVU87
 461              	.LBB38:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 462              		.loc 2 195 9 view .LVU88
 463              		.loc 2 197 9 view .LVU89
 464              		.syntax unified
 465              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 466 0006 4FF05003 			mov r3, #80												
 467 000a 72B6     		cpsid i													
 468 000c 83F31188 		msr basepri, r3											
 469 0010 BFF36F8F 		isb														
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 26


 470 0014 BFF34F8F 		dsb														
 471 0018 62B6     		cpsie i													
 472              	
 473              	@ 0 "" 2
 474              	.LVL12:
 475              		.thumb
 476              		.syntax unified
 477              	.L27:
 478              		.loc 2 197 9 is_stmt 0 view .LVU90
 479              	.LBE38:
 480              	.LBE37:
 415:os/portable/GCC/ARM_CM7/r0p1/port.c ****     uxCriticalNesting--;
 481              		.loc 1 415 5 is_stmt 1 discriminator 1 view .LVU91
 415:os/portable/GCC/ARM_CM7/r0p1/port.c ****     uxCriticalNesting--;
 482              		.loc 1 415 5 discriminator 1 view .LVU92
 415:os/portable/GCC/ARM_CM7/r0p1/port.c ****     uxCriticalNesting--;
 483              		.loc 1 415 5 discriminator 1 view .LVU93
 484 001a FEE7     		b	.L27
 485              	.L26:
 415:os/portable/GCC/ARM_CM7/r0p1/port.c ****     uxCriticalNesting--;
 486              		.loc 1 415 38 discriminator 2 view .LVU94
 416:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 487              		.loc 1 416 5 discriminator 2 view .LVU95
 416:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 488              		.loc 1 416 22 is_stmt 0 discriminator 2 view .LVU96
 489 001c 013B     		subs	r3, r3, #1
 490 001e 034A     		ldr	r2, .L29
 491 0020 1360     		str	r3, [r2]
 418:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 492              		.loc 1 418 5 is_stmt 1 discriminator 2 view .LVU97
 418:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 493              		.loc 1 418 7 is_stmt 0 discriminator 2 view .LVU98
 494 0022 0BB9     		cbnz	r3, .L25
 420:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 495              		.loc 1 420 9 is_stmt 1 view .LVU99
 496              	.LVL13:
 497              	.LBB39:
 498              	.LBI39:
 198:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 199:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	mov %0, %1												\n"\
 200:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	cpsid i													\n"\
 201:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	msr basepri, %0											\n"\
 202:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	isb														\n"\
 203:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	dsb														\n"\
 204:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	cpsie i													\n"\
 205:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 206:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         );
 207:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 208:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 209:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 210:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 211:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 212:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 213:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 214:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 215:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile
 216:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 27


 217:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	mrs %0, basepri											\n"\
 218:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	mov %1, %2												\n"\
 219:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	cpsid i													\n"\
 220:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	msr basepri, %1											\n"\
 221:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	isb														\n"\
 222:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	dsb														\n"\
 223:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	cpsie i													\n"\
 224:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 225:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         );
 226:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 227:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
 228:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****          * warnings. */
 229:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         return ulOriginalBASEPRI;
 230:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 231:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 232:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 233:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 499              		.loc 2 233 34 view .LVU100
 500              	.LBB40:
 234:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 235:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile
 501              		.loc 2 235 9 view .LVU101
 502              		.syntax unified
 503              	@ 235 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 504 0024 83F31188 			msr basepri, r3	
 505              	@ 0 "" 2
 506              	.LVL14:
 507              		.thumb
 508              		.syntax unified
 509              	.L25:
 510              		.loc 2 235 9 is_stmt 0 view .LVU102
 511              	.LBE40:
 512              	.LBE39:
 422:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 513              		.loc 1 422 1 view .LVU103
 514 0028 7047     		bx	lr
 515              	.L30:
 516 002a 00BF     		.align	2
 517              	.L29:
 518 002c 00000000 		.word	.LANCHOR0
 519              		.cfi_endproc
 520              	.LFE11:
 522              		.section	.text.PendSV_Handler,"ax",%progbits
 523              		.align	1
 524              		.global	PendSV_Handler
 525              		.syntax unified
 526              		.thumb
 527              		.thumb_func
 528              		.fpu fpv5-d16
 530              	PendSV_Handler:
 531              	.LFB12:
 426:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* This is a naked function. */
 532              		.loc 1 426 1 is_stmt 1 view -0
 533              		.cfi_startproc
 534              		@ Naked Function: prologue and epilogue provided by programmer.
 535              		@ args = 0, pretend = 0, frame = 0
 536              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 28


 429:os/portable/GCC/ARM_CM7/r0p1/port.c ****     (
 537              		.loc 1 429 5 view .LVU105
 538              		.syntax unified
 539              	@ 429 "os/portable/GCC/ARM_CM7/r0p1/port.c" 1
 540 0000 EFF30980 			mrs r0, psp							
 541 0004 BFF36F8F 		isb									
 542              											
 543 0008 154B     		ldr	r3, pxCurrentTCBConst			
 544 000a 1A68     		ldr	r2, [r3]						
 545              											
 546 000c 1EF0100F 		tst r14, #0x10						
 547 0010 08BF     		it eq								
 548 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 549              											
 550 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 551 001a 1060     		str r0, [r2]						
 552              											
 553 001c 2DE90900 		stmdb sp!, {r0, r3}					
 554 0020 4FF05000 		mov r0, #80 							
 555 0024 72B6     		cpsid i								
 556 0026 80F31188 		msr basepri, r0						
 557 002a BFF34F8F 		dsb									
 558 002e BFF36F8F 		isb									
 559 0032 62B6     		cpsie i								
 560 0034 FFF7FEFF 		bl vTaskSwitchContext				
 561 0038 4FF00000 		mov r0, #0							
 562 003c 80F31188 		msr basepri, r0						
 563 0040 09BC     		ldmia sp!, {r0, r3}					
 564              											
 565 0042 1968     		ldr r1, [r3]						
 566 0044 0868     		ldr r0, [r1]						
 567              											
 568 0046 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 569              											
 570 004a 1EF0100F 		tst r14, #0x10						
 571 004e 08BF     		it eq								
 572 0050 B0EC108A 		vldmiaeq r0!, {s16-s31}				
 573              											
 574 0054 80F30988 		msr psp, r0							
 575 0058 BFF36F8F 		isb									
 576              											
 577              											
 578 005c 7047     		bx r14								
 579              											
 580 005e 00BF     		.align 4							
 581 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 582              	
 583              	@ 0 "" 2
 481:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 584              		.loc 1 481 1 is_stmt 0 view .LVU106
 585              		.thumb
 586              		.syntax unified
 587              		.cfi_endproc
 588              	.LFE12:
 590              		.section	.text.xPortSysTickHandler,"ax",%progbits
 591              		.align	1
 592              		.global	xPortSysTickHandler
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 29


 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu fpv5-d16
 598              	xPortSysTickHandler:
 599              	.LFB13:
 485:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* The SysTick runs at the lowest interrupt priority, so when this interrupt
 600              		.loc 1 485 1 is_stmt 1 view -0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604 0000 08B5     		push	{r3, lr}
 605              	.LCFI2:
 606              		.cfi_def_cfa_offset 8
 607              		.cfi_offset 3, -8
 608              		.cfi_offset 14, -4
 490:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 609              		.loc 1 490 5 view .LVU108
 610              	.LBB41:
 611              	.LBI41:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 612              		.loc 2 193 34 view .LVU109
 613              	.LBB42:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 614              		.loc 2 195 9 view .LVU110
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 615              		.loc 2 197 9 view .LVU111
 616              		.syntax unified
 617              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 618 0002 4FF05003 			mov r3, #80												
 619 0006 72B6     		cpsid i													
 620 0008 83F31188 		msr basepri, r3											
 621 000c BFF36F8F 		isb														
 622 0010 BFF34F8F 		dsb														
 623 0014 62B6     		cpsie i													
 624              	
 625              	@ 0 "" 2
 626              		.thumb
 627              		.syntax unified
 628              	.LBE42:
 629              	.LBE41:
 493:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 630              		.loc 1 493 9 view .LVU112
 493:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 631              		.loc 1 493 13 is_stmt 0 view .LVU113
 632 0016 FFF7FEFF 		bl	xTaskIncrementTick
 633              	.LVL15:
 493:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 634              		.loc 1 493 11 view .LVU114
 635 001a 18B1     		cbz	r0, .L33
 497:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 636              		.loc 1 497 13 is_stmt 1 view .LVU115
 497:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 637              		.loc 1 497 35 is_stmt 0 view .LVU116
 638 001c 034B     		ldr	r3, .L35
 639 001e 4FF08052 		mov	r2, #268435456
 640 0022 1A60     		str	r2, [r3]
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 30


 641              	.L33:
 500:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 642              		.loc 1 500 5 is_stmt 1 view .LVU117
 643              	.LVL16:
 644              	.LBB43:
 645              	.LBI43:
 233:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 646              		.loc 2 233 34 view .LVU118
 647              	.LBB44:
 648              		.loc 2 235 9 view .LVU119
 649 0024 0023     		movs	r3, #0
 650              		.syntax unified
 651              	@ 235 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 652 0026 83F31188 			msr basepri, r3	
 653              	@ 0 "" 2
 654              	.LVL17:
 655              		.loc 2 235 9 is_stmt 0 view .LVU120
 656              		.thumb
 657              		.syntax unified
 658              	.LBE44:
 659              	.LBE43:
 501:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 660              		.loc 1 501 1 view .LVU121
 661 002a 08BD     		pop	{r3, pc}
 662              	.L36:
 663              		.align	2
 664              	.L35:
 665 002c 04ED00E0 		.word	-536810236
 666              		.cfi_endproc
 667              	.LFE13:
 669              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 670              		.align	1
 671              		.weak	vPortSetupTimerInterrupt
 672              		.syntax unified
 673              		.thumb
 674              		.thumb_func
 675              		.fpu fpv5-d16
 677              	vPortSetupTimerInterrupt:
 678              	.LFB14:
 679:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* Calculate the constants required to configure the tick interrupt. */
 679              		.loc 1 679 1 is_stmt 1 view -0
 680              		.cfi_startproc
 681              		@ args = 0, pretend = 0, frame = 0
 682              		@ frame_needed = 0, uses_anonymous_args = 0
 683              		@ link register save eliminated.
 690:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 684              		.loc 1 690 5 view .LVU123
 690:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 685              		.loc 1 690 31 is_stmt 0 view .LVU124
 686 0000 084A     		ldr	r2, .L38
 687 0002 0023     		movs	r3, #0
 688 0004 1360     		str	r3, [r2]
 691:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 689              		.loc 1 691 5 is_stmt 1 view .LVU125
 691:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 690              		.loc 1 691 40 is_stmt 0 view .LVU126
 691 0006 0849     		ldr	r1, .L38+4
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 31


 692 0008 0B60     		str	r3, [r1]
 694:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 693              		.loc 1 694 5 is_stmt 1 view .LVU127
 694:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 694              		.loc 1 694 58 is_stmt 0 view .LVU128
 695 000a 084B     		ldr	r3, .L38+8
 696 000c 1B68     		ldr	r3, [r3]
 697 000e 0849     		ldr	r1, .L38+12
 698 0010 A1FB0313 		umull	r1, r3, r1, r3
 699 0014 9B09     		lsrs	r3, r3, #6
 694:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 700              		.loc 1 694 81 view .LVU129
 701 0016 013B     		subs	r3, r3, #1
 694:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SY
 702              		.loc 1 694 31 view .LVU130
 703 0018 0649     		ldr	r1, .L38+16
 704 001a 0B60     		str	r3, [r1]
 695:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 705              		.loc 1 695 5 is_stmt 1 view .LVU131
 695:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 706              		.loc 1 695 31 is_stmt 0 view .LVU132
 707 001c 0723     		movs	r3, #7
 708 001e 1360     		str	r3, [r2]
 696:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 709              		.loc 1 696 1 view .LVU133
 710 0020 7047     		bx	lr
 711              	.L39:
 712 0022 00BF     		.align	2
 713              	.L38:
 714 0024 10E000E0 		.word	-536813552
 715 0028 18E000E0 		.word	-536813544
 716 002c 00000000 		.word	SystemCoreClock
 717 0030 D34D6210 		.word	274877907
 718 0034 14E000E0 		.word	-536813548
 719              		.cfi_endproc
 720              	.LFE14:
 722              		.section	.text.xPortStartScheduler,"ax",%progbits
 723              		.align	1
 724              		.global	xPortStartScheduler
 725              		.syntax unified
 726              		.thumb
 727              		.thumb_func
 728              		.fpu fpv5-d16
 730              	xPortStartScheduler:
 731              	.LFB8:
 286:os/portable/GCC/ARM_CM7/r0p1/port.c ****     /* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 732              		.loc 1 286 1 is_stmt 1 view -0
 733              		.cfi_startproc
 734              		@ args = 0, pretend = 0, frame = 8
 735              		@ frame_needed = 0, uses_anonymous_args = 0
 736 0000 10B5     		push	{r4, lr}
 737              	.LCFI3:
 738              		.cfi_def_cfa_offset 8
 739              		.cfi_offset 4, -8
 740              		.cfi_offset 14, -4
 741 0002 82B0     		sub	sp, sp, #8
 742              	.LCFI4:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 32


 743              		.cfi_def_cfa_offset 16
 289:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 744              		.loc 1 289 5 view .LVU135
 289:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 745              		.loc 1 289 57 view .LVU136
 746              	.LBB45:
 293:os/portable/GCC/ARM_CM7/r0p1/port.c ****             volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( 
 747              		.loc 1 293 13 view .LVU137
 294:os/portable/GCC/ARM_CM7/r0p1/port.c ****             volatile uint8_t ucMaxPriorityValue;
 748              		.loc 1 294 13 view .LVU138
 749              	.LVL18:
 295:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 750              		.loc 1 295 13 view .LVU139
 303:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 751              		.loc 1 303 13 view .LVU140
 303:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 752              		.loc 1 303 34 is_stmt 0 view .LVU141
 753 0004 2C4B     		ldr	r3, .L47
 754 0006 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 755 0008 D2B2     		uxtb	r2, r2
 303:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 756              		.loc 1 303 32 view .LVU142
 757 000a 0192     		str	r2, [sp, #4]
 307:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 758              		.loc 1 307 13 is_stmt 1 view .LVU143
 307:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 759              		.loc 1 307 43 is_stmt 0 view .LVU144
 760 000c FF22     		movs	r2, #255
 761 000e 1A70     		strb	r2, [r3]
 310:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 762              		.loc 1 310 13 is_stmt 1 view .LVU145
 310:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 763              		.loc 1 310 34 is_stmt 0 view .LVU146
 764 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 765 0012 DBB2     		uxtb	r3, r3
 310:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 766              		.loc 1 310 32 view .LVU147
 767 0014 8DF80330 		strb	r3, [sp, #3]
 313:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 768              		.loc 1 313 13 is_stmt 1 view .LVU148
 313:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 769              		.loc 1 313 73 is_stmt 0 view .LVU149
 770 0018 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 771 001c 03F05003 		and	r3, r3, #80
 313:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 772              		.loc 1 313 34 view .LVU150
 773 0020 264A     		ldr	r2, .L47+4
 774 0022 1370     		strb	r3, [r2]
 317:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 775              		.loc 1 317 13 is_stmt 1 view .LVU151
 317:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 776              		.loc 1 317 32 is_stmt 0 view .LVU152
 777 0024 264B     		ldr	r3, .L47+8
 778 0026 0722     		movs	r2, #7
 779 0028 1A60     		str	r2, [r3]
 319:os/portable/GCC/ARM_CM7/r0p1/port.c ****             {
 780              		.loc 1 319 13 is_stmt 1 view .LVU153
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 33


 781              	.L41:
 319:os/portable/GCC/ARM_CM7/r0p1/port.c ****             {
 782              		.loc 1 319 18 view .LVU154
 319:os/portable/GCC/ARM_CM7/r0p1/port.c ****             {
 783              		.loc 1 319 41 is_stmt 0 view .LVU155
 784 002a 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 319:os/portable/GCC/ARM_CM7/r0p1/port.c ****             {
 785              		.loc 1 319 18 view .LVU156
 786 002e 13F0800F 		tst	r3, #128
 787 0032 0AD0     		beq	.L46
 321:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 788              		.loc 1 321 17 is_stmt 1 view .LVU157
 321:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 789              		.loc 1 321 35 is_stmt 0 view .LVU158
 790 0034 224A     		ldr	r2, .L47+8
 791 0036 1368     		ldr	r3, [r2]
 792 0038 013B     		subs	r3, r3, #1
 793 003a 1360     		str	r3, [r2]
 322:os/portable/GCC/ARM_CM7/r0p1/port.c ****             }
 794              		.loc 1 322 17 is_stmt 1 view .LVU159
 322:os/portable/GCC/ARM_CM7/r0p1/port.c ****             }
 795              		.loc 1 322 36 is_stmt 0 view .LVU160
 796 003c 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 797 0040 5B00     		lsls	r3, r3, #1
 798 0042 DBB2     		uxtb	r3, r3
 799 0044 8DF80330 		strb	r3, [sp, #3]
 800 0048 EFE7     		b	.L41
 801              	.L46:
 339:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 }
 802              		.loc 1 339 21 is_stmt 1 view .LVU161
 803 004a 1D4B     		ldr	r3, .L47+8
 804 004c 1B68     		ldr	r3, [r3]
 805 004e 032B     		cmp	r3, #3
 806 0050 0AD0     		beq	.L43
 339:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 }
 807              		.loc 1 339 21 view .LVU162
 808              	.LBB46:
 809              	.LBI46:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 810              		.loc 2 193 34 view .LVU163
 811              	.LBB47:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 812              		.loc 2 195 9 view .LVU164
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 813              		.loc 2 197 9 view .LVU165
 814              		.syntax unified
 815              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 816 0052 4FF05003 			mov r3, #80												
 817 0056 72B6     		cpsid i													
 818 0058 83F31188 		msr basepri, r3											
 819 005c BFF36F8F 		isb														
 820 0060 BFF34F8F 		dsb														
 821 0064 62B6     		cpsie i													
 822              	
 823              	@ 0 "" 2
 824              	.LVL19:
 825              		.thumb
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 34


 826              		.syntax unified
 827              	.L44:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 828              		.loc 2 197 9 is_stmt 0 view .LVU166
 829              	.LBE47:
 830              	.LBE46:
 339:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 }
 831              		.loc 1 339 21 is_stmt 1 discriminator 2 view .LVU167
 339:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 }
 832              		.loc 1 339 21 discriminator 2 view .LVU168
 339:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 }
 833              		.loc 1 339 21 discriminator 2 view .LVU169
 834 0066 FEE7     		b	.L44
 835              	.L43:
 339:os/portable/GCC/ARM_CM7/r0p1/port.c ****                 }
 836              		.loc 1 339 102 discriminator 2 view .LVU170
 345:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 837              		.loc 1 345 13 discriminator 2 view .LVU171
 345:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 838              		.loc 1 345 32 is_stmt 0 discriminator 2 view .LVU172
 839 0068 1B02     		lsls	r3, r3, #8
 346:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 840              		.loc 1 346 13 is_stmt 1 discriminator 2 view .LVU173
 346:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 841              		.loc 1 346 32 is_stmt 0 discriminator 2 view .LVU174
 842 006a 03F4E063 		and	r3, r3, #1792
 843 006e 144A     		ldr	r2, .L47+8
 844 0070 1360     		str	r3, [r2]
 350:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 845              		.loc 1 350 13 is_stmt 1 discriminator 2 view .LVU175
 350:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 846              		.loc 1 350 43 is_stmt 0 discriminator 2 view .LVU176
 847 0072 019B     		ldr	r3, [sp, #4]
 848 0074 DBB2     		uxtb	r3, r3
 849 0076 104A     		ldr	r2, .L47
 850 0078 1370     		strb	r3, [r2]
 851              	.LBE45:
 355:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 852              		.loc 1 355 5 is_stmt 1 discriminator 2 view .LVU177
 355:os/portable/GCC/ARM_CM7/r0p1/port.c ****     portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 853              		.loc 1 355 24 is_stmt 0 discriminator 2 view .LVU178
 854 007a 124B     		ldr	r3, .L47+12
 855 007c 1A68     		ldr	r2, [r3]
 856 007e 42F47002 		orr	r2, r2, #15728640
 857 0082 1A60     		str	r2, [r3]
 356:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 858              		.loc 1 356 5 is_stmt 1 discriminator 2 view .LVU179
 356:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 859              		.loc 1 356 24 is_stmt 0 discriminator 2 view .LVU180
 860 0084 1A68     		ldr	r2, [r3]
 861 0086 42F07042 		orr	r2, r2, #-268435456
 862 008a 1A60     		str	r2, [r3]
 360:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 863              		.loc 1 360 5 is_stmt 1 discriminator 2 view .LVU181
 864 008c FFF7FEFF 		bl	vPortSetupTimerInterrupt
 865              	.LVL20:
 363:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 35


 866              		.loc 1 363 5 discriminator 2 view .LVU182
 363:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 867              		.loc 1 363 23 is_stmt 0 discriminator 2 view .LVU183
 868 0090 0024     		movs	r4, #0
 869 0092 0D4B     		ldr	r3, .L47+16
 870 0094 1C60     		str	r4, [r3]
 366:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 871              		.loc 1 366 5 is_stmt 1 discriminator 2 view .LVU184
 872 0096 FFF7FEFF 		bl	vPortEnableVFP
 873              	.LVL21:
 369:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 874              		.loc 1 369 5 discriminator 2 view .LVU185
 369:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 875              		.loc 1 369 20 is_stmt 0 discriminator 2 view .LVU186
 876 009a 0C4A     		ldr	r2, .L47+20
 877 009c 1368     		ldr	r3, [r2]
 878 009e 43F04043 		orr	r3, r3, #-1073741824
 879 00a2 1360     		str	r3, [r2]
 372:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 880              		.loc 1 372 5 is_stmt 1 discriminator 2 view .LVU187
 881 00a4 FFF7FEFF 		bl	prvPortStartFirstTask
 882              	.LVL22:
 380:os/portable/GCC/ARM_CM7/r0p1/port.c ****     prvTaskExitError();
 883              		.loc 1 380 5 discriminator 2 view .LVU188
 884 00a8 FFF7FEFF 		bl	vTaskSwitchContext
 885              	.LVL23:
 381:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 886              		.loc 1 381 5 discriminator 2 view .LVU189
 887 00ac FFF7FEFF 		bl	prvTaskExitError
 888              	.LVL24:
 384:os/portable/GCC/ARM_CM7/r0p1/port.c **** }
 889              		.loc 1 384 5 discriminator 2 view .LVU190
 385:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 890              		.loc 1 385 1 is_stmt 0 discriminator 2 view .LVU191
 891 00b0 2046     		mov	r0, r4
 892 00b2 02B0     		add	sp, sp, #8
 893              	.LCFI5:
 894              		.cfi_def_cfa_offset 8
 895              		@ sp needed
 896 00b4 10BD     		pop	{r4, pc}
 897              	.L48:
 898 00b6 00BF     		.align	2
 899              	.L47:
 900 00b8 00E400E0 		.word	-536812544
 901 00bc 00000000 		.word	.LANCHOR1
 902 00c0 00000000 		.word	.LANCHOR2
 903 00c4 20ED00E0 		.word	-536810208
 904 00c8 00000000 		.word	.LANCHOR0
 905 00cc 34EF00E0 		.word	-536809676
 906              		.cfi_endproc
 907              	.LFE8:
 909              		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 910              		.align	1
 911              		.global	vPortValidateInterruptPriority
 912              		.syntax unified
 913              		.thumb
 914              		.thumb_func
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 36


 915              		.fpu fpv5-d16
 917              	vPortValidateInterruptPriority:
 918              	.LFB16:
 713:os/portable/GCC/ARM_CM7/r0p1/port.c **** /*-----------------------------------------------------------*/
 714:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 715:os/portable/GCC/ARM_CM7/r0p1/port.c **** #if ( configASSERT_DEFINED == 1 )
 716:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 717:os/portable/GCC/ARM_CM7/r0p1/port.c ****     void vPortValidateInterruptPriority( void )
 718:os/portable/GCC/ARM_CM7/r0p1/port.c ****     {
 919              		.loc 1 718 5 is_stmt 1 view -0
 920              		.cfi_startproc
 921              		@ args = 0, pretend = 0, frame = 0
 922              		@ frame_needed = 0, uses_anonymous_args = 0
 923              		@ link register save eliminated.
 719:os/portable/GCC/ARM_CM7/r0p1/port.c ****         uint32_t ulCurrentInterrupt;
 924              		.loc 1 719 9 view .LVU193
 720:os/portable/GCC/ARM_CM7/r0p1/port.c ****         uint8_t ucCurrentPriority;
 925              		.loc 1 720 9 view .LVU194
 721:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 722:os/portable/GCC/ARM_CM7/r0p1/port.c ****         /* Obtain the number of the currently executing interrupt. */
 723:os/portable/GCC/ARM_CM7/r0p1/port.c ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 926              		.loc 1 723 9 view .LVU195
 927              		.syntax unified
 928              	@ 723 "os/portable/GCC/ARM_CM7/r0p1/port.c" 1
 929 0000 EFF30583 		mrs r3, ipsr
 930              	@ 0 "" 2
 931              	.LVL25:
 724:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 725:os/portable/GCC/ARM_CM7/r0p1/port.c ****         /* Is the interrupt number a user defined interrupt? */
 726:os/portable/GCC/ARM_CM7/r0p1/port.c ****         if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 932              		.loc 1 726 9 view .LVU196
 933              		.loc 1 726 11 is_stmt 0 view .LVU197
 934              		.thumb
 935              		.syntax unified
 936 0004 0F2B     		cmp	r3, #15
 937 0006 11D9     		bls	.L50
 727:os/portable/GCC/ARM_CM7/r0p1/port.c ****         {
 728:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* Look up the interrupt's priority. */
 729:os/portable/GCC/ARM_CM7/r0p1/port.c ****             ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 938              		.loc 1 729 13 is_stmt 1 view .LVU198
 939              		.loc 1 729 61 is_stmt 0 view .LVU199
 940 0008 124A     		ldr	r2, .L54
 941              		.loc 1 729 31 view .LVU200
 942 000a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 943              	.LVL26:
 944              		.loc 1 729 31 view .LVU201
 945 000c DBB2     		uxtb	r3, r3
 946              	.LVL27:
 730:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
 731:os/portable/GCC/ARM_CM7/r0p1/port.c ****             /* The following assertion will fail if a service routine (ISR) for
 732:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * an interrupt that has been assigned a priority above
 733:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 734:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * function.  ISR safe FreeRTOS API functions must *only* be called
 735:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * from interrupts that have been assigned a priority at or below
 736:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 737:os/portable/GCC/ARM_CM7/r0p1/port.c ****              *
 738:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * Numerically low interrupt priority numbers represent logically high
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 37


 739:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * interrupt priorities, therefore the priority of the interrupt must
 740:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * be set to a value equal to or numerically *higher* than
 741:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * configMAX_SYSCALL_INTERRUPT_PRIORITY.
 742:os/portable/GCC/ARM_CM7/r0p1/port.c ****              *
 743:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * Interrupts that	use the FreeRTOS API must not be left at their
 744:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * default priority of	zero as that is the highest possible priority,
 745:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 746:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * and	therefore also guaranteed to be invalid.
 747:os/portable/GCC/ARM_CM7/r0p1/port.c ****              *
 748:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * FreeRTOS maintains separate thread and ISR API functions to ensure
 749:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * interrupt entry is as fast and simple as possible.
 750:os/portable/GCC/ARM_CM7/r0p1/port.c ****              *
 751:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * The following links provide detailed information:
 752:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
 753:os/portable/GCC/ARM_CM7/r0p1/port.c ****              * https://www.FreeRTOS.org/FAQHelp.html */
 754:os/portable/GCC/ARM_CM7/r0p1/port.c ****             configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 947              		.loc 1 754 13 is_stmt 1 view .LVU202
 948 000e 124A     		ldr	r2, .L54+4
 949 0010 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 950 0012 9A42     		cmp	r2, r3
 951 0014 0AD9     		bls	.L50
 952              		.loc 1 754 13 view .LVU203
 953              	.LBB48:
 954              	.LBI48:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 955              		.loc 2 193 34 view .LVU204
 956              	.LBB49:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 957              		.loc 2 195 9 view .LVU205
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 958              		.loc 2 197 9 view .LVU206
 959              		.syntax unified
 960              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 961 0016 4FF05003 			mov r3, #80												
 962 001a 72B6     		cpsid i													
 963 001c 83F31188 		msr basepri, r3											
 964 0020 BFF36F8F 		isb														
 965 0024 BFF34F8F 		dsb														
 966 0028 62B6     		cpsie i													
 967              	
 968              	@ 0 "" 2
 969              	.LVL28:
 970              		.thumb
 971              		.syntax unified
 972              	.L51:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 973              		.loc 2 197 9 is_stmt 0 view .LVU207
 974              	.LBE49:
 975              	.LBE48:
 976              		.loc 1 754 13 is_stmt 1 discriminator 1 view .LVU208
 977              		.loc 1 754 13 discriminator 1 view .LVU209
 978              		.loc 1 754 13 discriminator 1 view .LVU210
 979 002a FEE7     		b	.L51
 980              	.L50:
 981              		.loc 1 754 70 discriminator 2 view .LVU211
 755:os/portable/GCC/ARM_CM7/r0p1/port.c ****         }
 756:os/portable/GCC/ARM_CM7/r0p1/port.c **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 38


 757:os/portable/GCC/ARM_CM7/r0p1/port.c ****         /* Priority grouping:  The interrupt controller (NVIC) allows the bits
 758:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * that define each interrupt's priority to be split between bits that
 759:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * define the interrupt's pre-emption priority bits and bits that define
 760:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * the interrupt's sub-priority.  For simplicity all bits must be defined
 761:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * to be pre-emption priority bits.  The following assertion will fail if
 762:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * this is not the case (if some bits represent a sub-priority).
 763:os/portable/GCC/ARM_CM7/r0p1/port.c ****          *
 764:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * If the application only uses CMSIS libraries for interrupt
 765:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * configuration then the correct setting can be achieved on all Cortex-M
 766:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 767:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * scheduler.  Note however that some vendor specific peripheral libraries
 768:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * assume a non-zero priority group setting, in which cases using a value
 769:os/portable/GCC/ARM_CM7/r0p1/port.c ****          * of zero will result in unpredictable behaviour. */
 770:os/portable/GCC/ARM_CM7/r0p1/port.c ****         configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 982              		.loc 1 770 9 discriminator 2 view .LVU212
 983 002c 0B4B     		ldr	r3, .L54+8
 984 002e 1B68     		ldr	r3, [r3]
 985 0030 03F4E063 		and	r3, r3, #1792
 986 0034 0A4A     		ldr	r2, .L54+12
 987 0036 1268     		ldr	r2, [r2]
 988 0038 9342     		cmp	r3, r2
 989 003a 0AD9     		bls	.L49
 990              		.loc 1 770 9 view .LVU213
 991              	.LBB50:
 992              	.LBI50:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 993              		.loc 2 193 34 view .LVU214
 994              	.LBB51:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 995              		.loc 2 195 9 view .LVU215
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 996              		.loc 2 197 9 view .LVU216
 997              		.syntax unified
 998              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 999 003c 4FF05003 			mov r3, #80												
 1000 0040 72B6     		cpsid i													
 1001 0042 83F31188 		msr basepri, r3											
 1002 0046 BFF36F8F 		isb														
 1003 004a BFF34F8F 		dsb														
 1004 004e 62B6     		cpsie i													
 1005              	
 1006              	@ 0 "" 2
 1007              	.LVL29:
 1008              		.thumb
 1009              		.syntax unified
 1010              	.L53:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 1011              		.loc 2 197 9 is_stmt 0 view .LVU217
 1012              	.LBE51:
 1013              	.LBE50:
 1014              		.loc 1 770 9 is_stmt 1 discriminator 2 view .LVU218
 1015              		.loc 1 770 9 discriminator 2 view .LVU219
 1016              		.loc 1 770 9 discriminator 2 view .LVU220
 1017 0050 FEE7     		b	.L53
 1018              	.L49:
 771:os/portable/GCC/ARM_CM7/r0p1/port.c ****     }
 1019              		.loc 1 771 5 is_stmt 0 view .LVU221
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 39


 1020 0052 7047     		bx	lr
 1021              	.L55:
 1022              		.align	2
 1023              	.L54:
 1024 0054 F0E300E0 		.word	-536812560
 1025 0058 00000000 		.word	.LANCHOR1
 1026 005c 0CED00E0 		.word	-536810228
 1027 0060 00000000 		.word	.LANCHOR2
 1028              		.cfi_endproc
 1029              	.LFE16:
 1031              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
 1032              		.set	.LANCHOR1,. + 0
 1035              	ucMaxSysCallPriority:
 1036 0000 00       		.space	1
 1037              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
 1038              		.align	2
 1039              		.set	.LANCHOR2,. + 0
 1042              	ulMaxPRIGROUPValue:
 1043 0000 00000000 		.space	4
 1044              		.section	.data.uxCriticalNesting,"aw"
 1045              		.align	2
 1046              		.set	.LANCHOR0,. + 0
 1049              	uxCriticalNesting:
 1050 0000 AAAAAAAA 		.word	-1431655766
 1051              		.text
 1052              	.Letext0:
 1053              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1054              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1055              		.file 5 "os/include/projdefs.h"
 1056              		.file 6 "user/Inc/FreeRTOSConfig.h"
 1057              		.file 7 "os/include/task.h"
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 40


DEFINED SYMBOLS
                            *ABS*:00000000 port.c
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:17     .text.prvTaskExitError:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:24     .text.prvTaskExitError:00000000 prvTaskExitError
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:115    .text.prvTaskExitError:00000044 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:120    .text.prvPortStartFirstTask:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:126    .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:148    .text.prvPortStartFirstTask:00000022 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:148    .text.prvPortStartFirstTask:00000024 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:158    .text.vPortEnableVFP:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:164    .text.vPortEnableVFP:00000000 vPortEnableVFP
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:180    .text.vPortEnableVFP:0000000e $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:180    .text.vPortEnableVFP:00000010 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:190    .text.pxPortInitialiseStack:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:197    .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:247    .text.pxPortInitialiseStack:00000028 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:252    .text.SVC_Handler:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:259    .text.SVC_Handler:00000000 SVC_Handler
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:280    .text.SVC_Handler:00000020 pxCurrentTCBConst2
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:280    .text.SVC_Handler:00000020 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:290    .text.vPortEndScheduler:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:297    .text.vPortEndScheduler:00000000 vPortEndScheduler
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:343    .text.vPortEndScheduler:00000024 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:348    .text.vPortEnterCritical:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:355    .text.vPortEnterCritical:00000000 vPortEnterCritical
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:433    .text.vPortEnterCritical:00000044 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:439    .text.vPortExitCritical:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:446    .text.vPortExitCritical:00000000 vPortExitCritical
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:518    .text.vPortExitCritical:0000002c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:523    .text.PendSV_Handler:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:530    .text.PendSV_Handler:00000000 PendSV_Handler
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:581    .text.PendSV_Handler:00000060 pxCurrentTCBConst
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:581    .text.PendSV_Handler:00000060 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:591    .text.xPortSysTickHandler:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:598    .text.xPortSysTickHandler:00000000 xPortSysTickHandler
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:665    .text.xPortSysTickHandler:0000002c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:670    .text.vPortSetupTimerInterrupt:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:677    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:714    .text.vPortSetupTimerInterrupt:00000024 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:723    .text.xPortStartScheduler:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:730    .text.xPortStartScheduler:00000000 xPortStartScheduler
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:900    .text.xPortStartScheduler:000000b8 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:910    .text.vPortValidateInterruptPriority:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:917    .text.vPortValidateInterruptPriority:00000000 vPortValidateInterruptPriority
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:1024   .text.vPortValidateInterruptPriority:00000054 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:1035   .bss.ucMaxSysCallPriority:00000000 ucMaxSysCallPriority
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:1036   .bss.ucMaxSysCallPriority:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:1038   .bss.ulMaxPRIGROUPValue:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:1042   .bss.ulMaxPRIGROUPValue:00000000 ulMaxPRIGROUPValue
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:1045   .data.uxCriticalNesting:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s:1049   .data.uxCriticalNesting:00000000 uxCriticalNesting

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
SystemCoreClock
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccSX9dqF.s 			page 41


