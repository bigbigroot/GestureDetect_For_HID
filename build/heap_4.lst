ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"heap_4.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvHeapInit,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	prvHeapInit:
  25              	.LFB9:
  26              		.file 1 "os/portable/MemMang/heap_4.c"
   1:os/portable/MemMang/heap_4.c **** /*
   2:os/portable/MemMang/heap_4.c ****  * FreeRTOS Kernel V10.4.3
   3:os/portable/MemMang/heap_4.c ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:os/portable/MemMang/heap_4.c ****  *
   5:os/portable/MemMang/heap_4.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:os/portable/MemMang/heap_4.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:os/portable/MemMang/heap_4.c ****  * the Software without restriction, including without limitation the rights to
   8:os/portable/MemMang/heap_4.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:os/portable/MemMang/heap_4.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:os/portable/MemMang/heap_4.c ****  * subject to the following conditions:
  11:os/portable/MemMang/heap_4.c ****  *
  12:os/portable/MemMang/heap_4.c ****  * The above copyright notice and this permission notice shall be included in all
  13:os/portable/MemMang/heap_4.c ****  * copies or substantial portions of the Software.
  14:os/portable/MemMang/heap_4.c ****  *
  15:os/portable/MemMang/heap_4.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:os/portable/MemMang/heap_4.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:os/portable/MemMang/heap_4.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:os/portable/MemMang/heap_4.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:os/portable/MemMang/heap_4.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:os/portable/MemMang/heap_4.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:os/portable/MemMang/heap_4.c ****  *
  22:os/portable/MemMang/heap_4.c ****  * https://www.FreeRTOS.org
  23:os/portable/MemMang/heap_4.c ****  * https://github.com/FreeRTOS
  24:os/portable/MemMang/heap_4.c ****  *
  25:os/portable/MemMang/heap_4.c ****  */
  26:os/portable/MemMang/heap_4.c **** 
  27:os/portable/MemMang/heap_4.c **** /*
  28:os/portable/MemMang/heap_4.c ****  * A sample implementation of pvPortMalloc() and vPortFree() that combines
  29:os/portable/MemMang/heap_4.c ****  * (coalescences) adjacent memory blocks as they are freed, and in so doing
  30:os/portable/MemMang/heap_4.c ****  * limits memory fragmentation.
  31:os/portable/MemMang/heap_4.c ****  *
  32:os/portable/MemMang/heap_4.c ****  * See heap_1.c, heap_2.c and heap_3.c for alternative implementations, and the
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 2


  33:os/portable/MemMang/heap_4.c ****  * memory management pages of https://www.FreeRTOS.org for more information.
  34:os/portable/MemMang/heap_4.c ****  */
  35:os/portable/MemMang/heap_4.c **** #include <stdlib.h>
  36:os/portable/MemMang/heap_4.c **** 
  37:os/portable/MemMang/heap_4.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  38:os/portable/MemMang/heap_4.c ****  * all the API functions to use the MPU wrappers.  That should only be done when
  39:os/portable/MemMang/heap_4.c ****  * task.h is included from an application file. */
  40:os/portable/MemMang/heap_4.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  41:os/portable/MemMang/heap_4.c **** 
  42:os/portable/MemMang/heap_4.c **** #include "FreeRTOS.h"
  43:os/portable/MemMang/heap_4.c **** #include "task.h"
  44:os/portable/MemMang/heap_4.c **** 
  45:os/portable/MemMang/heap_4.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  46:os/portable/MemMang/heap_4.c **** 
  47:os/portable/MemMang/heap_4.c **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 0 )
  48:os/portable/MemMang/heap_4.c ****     #error This file must not be used if configSUPPORT_DYNAMIC_ALLOCATION is 0
  49:os/portable/MemMang/heap_4.c **** #endif
  50:os/portable/MemMang/heap_4.c **** 
  51:os/portable/MemMang/heap_4.c **** /* Block sizes must not get too small. */
  52:os/portable/MemMang/heap_4.c **** #define heapMINIMUM_BLOCK_SIZE    ( ( size_t ) ( xHeapStructSize << 1 ) )
  53:os/portable/MemMang/heap_4.c **** 
  54:os/portable/MemMang/heap_4.c **** /* Assumes 8bit bytes! */
  55:os/portable/MemMang/heap_4.c **** #define heapBITS_PER_BYTE         ( ( size_t ) 8 )
  56:os/portable/MemMang/heap_4.c **** 
  57:os/portable/MemMang/heap_4.c **** /* Allocate the memory for the heap. */
  58:os/portable/MemMang/heap_4.c **** #if ( configAPPLICATION_ALLOCATED_HEAP == 1 )
  59:os/portable/MemMang/heap_4.c **** 
  60:os/portable/MemMang/heap_4.c **** /* The application writer has already defined the array used for the RTOS
  61:os/portable/MemMang/heap_4.c **** * heap - probably so it can be placed in a special segment or address. */
  62:os/portable/MemMang/heap_4.c ****     extern uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  63:os/portable/MemMang/heap_4.c **** #else
  64:os/portable/MemMang/heap_4.c ****     PRIVILEGED_DATA static uint8_t ucHeap[ configTOTAL_HEAP_SIZE ];
  65:os/portable/MemMang/heap_4.c **** #endif /* configAPPLICATION_ALLOCATED_HEAP */
  66:os/portable/MemMang/heap_4.c **** 
  67:os/portable/MemMang/heap_4.c **** /* Define the linked list structure.  This is used to link free blocks in order
  68:os/portable/MemMang/heap_4.c ****  * of their memory address. */
  69:os/portable/MemMang/heap_4.c **** typedef struct A_BLOCK_LINK
  70:os/portable/MemMang/heap_4.c **** {
  71:os/portable/MemMang/heap_4.c ****     struct A_BLOCK_LINK * pxNextFreeBlock; /*<< The next free block in the list. */
  72:os/portable/MemMang/heap_4.c ****     size_t xBlockSize;                     /*<< The size of the free block. */
  73:os/portable/MemMang/heap_4.c **** } BlockLink_t;
  74:os/portable/MemMang/heap_4.c **** 
  75:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
  76:os/portable/MemMang/heap_4.c **** 
  77:os/portable/MemMang/heap_4.c **** /*
  78:os/portable/MemMang/heap_4.c ****  * Inserts a block of memory that is being freed into the correct position in
  79:os/portable/MemMang/heap_4.c ****  * the list of free memory blocks.  The block being freed will be merged with
  80:os/portable/MemMang/heap_4.c ****  * the block in front it and/or the block behind it if the memory blocks are
  81:os/portable/MemMang/heap_4.c ****  * adjacent to each other.
  82:os/portable/MemMang/heap_4.c ****  */
  83:os/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) PRIVILEGED_FUNCTION;
  84:os/portable/MemMang/heap_4.c **** 
  85:os/portable/MemMang/heap_4.c **** /*
  86:os/portable/MemMang/heap_4.c ****  * Called automatically to setup the required heap structures the first time
  87:os/portable/MemMang/heap_4.c ****  * pvPortMalloc() is called.
  88:os/portable/MemMang/heap_4.c ****  */
  89:os/portable/MemMang/heap_4.c **** static void prvHeapInit( void ) PRIVILEGED_FUNCTION;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 3


  90:os/portable/MemMang/heap_4.c **** 
  91:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
  92:os/portable/MemMang/heap_4.c **** 
  93:os/portable/MemMang/heap_4.c **** /* The size of the structure placed at the beginning of each allocated memory
  94:os/portable/MemMang/heap_4.c ****  * block must by correctly byte aligned. */
  95:os/portable/MemMang/heap_4.c **** static const size_t xHeapStructSize = ( sizeof( BlockLink_t ) + ( ( size_t ) ( portBYTE_ALIGNMENT -
  96:os/portable/MemMang/heap_4.c **** 
  97:os/portable/MemMang/heap_4.c **** /* Create a couple of list links to mark the start and end of the list. */
  98:os/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static BlockLink_t xStart, * pxEnd = NULL;
  99:os/portable/MemMang/heap_4.c **** 
 100:os/portable/MemMang/heap_4.c **** /* Keeps track of the number of calls to allocate and free memory as well as the
 101:os/portable/MemMang/heap_4.c ****  * number of free bytes remaining, but says nothing about fragmentation. */
 102:os/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xFreeBytesRemaining = 0U;
 103:os/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xMinimumEverFreeBytesRemaining = 0U;
 104:os/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulAllocations = 0;
 105:os/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;
 106:os/portable/MemMang/heap_4.c **** 
 107:os/portable/MemMang/heap_4.c **** /* Gets set to the top bit of an size_t type.  When this bit in the xBlockSize
 108:os/portable/MemMang/heap_4.c ****  * member of an BlockLink_t structure is set then the block belongs to the
 109:os/portable/MemMang/heap_4.c ****  * application.  When the bit is free the block is still part of the free heap
 110:os/portable/MemMang/heap_4.c ****  * space. */
 111:os/portable/MemMang/heap_4.c **** PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;
 112:os/portable/MemMang/heap_4.c **** 
 113:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 114:os/portable/MemMang/heap_4.c **** 
 115:os/portable/MemMang/heap_4.c **** void * pvPortMalloc( size_t xWantedSize )
 116:os/portable/MemMang/heap_4.c **** {
 117:os/portable/MemMang/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 118:os/portable/MemMang/heap_4.c ****     void * pvReturn = NULL;
 119:os/portable/MemMang/heap_4.c **** 
 120:os/portable/MemMang/heap_4.c ****     vTaskSuspendAll();
 121:os/portable/MemMang/heap_4.c ****     {
 122:os/portable/MemMang/heap_4.c ****         /* If this is the first call to malloc then the heap will require
 123:os/portable/MemMang/heap_4.c ****          * initialisation to setup the list of free blocks. */
 124:os/portable/MemMang/heap_4.c ****         if( pxEnd == NULL )
 125:os/portable/MemMang/heap_4.c ****         {
 126:os/portable/MemMang/heap_4.c ****             prvHeapInit();
 127:os/portable/MemMang/heap_4.c ****         }
 128:os/portable/MemMang/heap_4.c ****         else
 129:os/portable/MemMang/heap_4.c ****         {
 130:os/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 131:os/portable/MemMang/heap_4.c ****         }
 132:os/portable/MemMang/heap_4.c **** 
 133:os/portable/MemMang/heap_4.c ****         /* Check the requested block size is not so large that the top bit is
 134:os/portable/MemMang/heap_4.c ****          * set.  The top bit of the block size member of the BlockLink_t structure
 135:os/portable/MemMang/heap_4.c ****          * is used to determine who owns the block - the application or the
 136:os/portable/MemMang/heap_4.c ****          * kernel, so it must be free. */
 137:os/portable/MemMang/heap_4.c ****         if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 138:os/portable/MemMang/heap_4.c ****         {
 139:os/portable/MemMang/heap_4.c ****             /* The wanted size must be increased so it can contain a BlockLink_t
 140:os/portable/MemMang/heap_4.c ****              * structure in addition to the requested amount of bytes. */
 141:os/portable/MemMang/heap_4.c ****             if( ( xWantedSize > 0 ) && 
 142:os/portable/MemMang/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 143:os/portable/MemMang/heap_4.c ****             {
 144:os/portable/MemMang/heap_4.c ****                 xWantedSize += xHeapStructSize;
 145:os/portable/MemMang/heap_4.c **** 
 146:os/portable/MemMang/heap_4.c ****                 /* Ensure that blocks are always aligned. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 4


 147:os/portable/MemMang/heap_4.c ****                 if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 148:os/portable/MemMang/heap_4.c ****                 {
 149:os/portable/MemMang/heap_4.c ****                     /* Byte alignment required. Check for overflow. */
 150:os/portable/MemMang/heap_4.c ****                     if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_M
 151:os/portable/MemMang/heap_4.c ****                             > xWantedSize )
 152:os/portable/MemMang/heap_4.c ****                     {
 153:os/portable/MemMang/heap_4.c ****                         xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MA
 154:os/portable/MemMang/heap_4.c ****                         configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 155:os/portable/MemMang/heap_4.c ****                     }
 156:os/portable/MemMang/heap_4.c ****                     else
 157:os/portable/MemMang/heap_4.c ****                     {
 158:os/portable/MemMang/heap_4.c ****                         xWantedSize = 0;
 159:os/portable/MemMang/heap_4.c ****                     }  
 160:os/portable/MemMang/heap_4.c ****                 }
 161:os/portable/MemMang/heap_4.c ****                 else
 162:os/portable/MemMang/heap_4.c ****                 {
 163:os/portable/MemMang/heap_4.c ****                     mtCOVERAGE_TEST_MARKER();
 164:os/portable/MemMang/heap_4.c ****                 }
 165:os/portable/MemMang/heap_4.c ****             } 
 166:os/portable/MemMang/heap_4.c ****             else 
 167:os/portable/MemMang/heap_4.c ****             {
 168:os/portable/MemMang/heap_4.c ****                 xWantedSize = 0;
 169:os/portable/MemMang/heap_4.c ****             }
 170:os/portable/MemMang/heap_4.c **** 
 171:os/portable/MemMang/heap_4.c ****             if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 172:os/portable/MemMang/heap_4.c ****             {
 173:os/portable/MemMang/heap_4.c ****                 /* Traverse the list from the start	(lowest address) block until
 174:os/portable/MemMang/heap_4.c ****                  * one of adequate size is found. */
 175:os/portable/MemMang/heap_4.c ****                 pxPreviousBlock = &xStart;
 176:os/portable/MemMang/heap_4.c ****                 pxBlock = xStart.pxNextFreeBlock;
 177:os/portable/MemMang/heap_4.c **** 
 178:os/portable/MemMang/heap_4.c ****                 while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL 
 179:os/portable/MemMang/heap_4.c ****                 {
 180:os/portable/MemMang/heap_4.c ****                     pxPreviousBlock = pxBlock;
 181:os/portable/MemMang/heap_4.c ****                     pxBlock = pxBlock->pxNextFreeBlock;
 182:os/portable/MemMang/heap_4.c ****                 }
 183:os/portable/MemMang/heap_4.c **** 
 184:os/portable/MemMang/heap_4.c ****                 /* If the end marker was reached then a block of adequate size
 185:os/portable/MemMang/heap_4.c ****                  * was not found. */
 186:os/portable/MemMang/heap_4.c ****                 if( pxBlock != pxEnd )
 187:os/portable/MemMang/heap_4.c ****                 {
 188:os/portable/MemMang/heap_4.c ****                     /* Return the memory space pointed to - jumping over the
 189:os/portable/MemMang/heap_4.c ****                      * BlockLink_t structure at its start. */
 190:os/portable/MemMang/heap_4.c ****                     pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xH
 191:os/portable/MemMang/heap_4.c **** 
 192:os/portable/MemMang/heap_4.c ****                     /* This block is being returned for use so must be taken out
 193:os/portable/MemMang/heap_4.c ****                      * of the list of free blocks. */
 194:os/portable/MemMang/heap_4.c ****                     pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 195:os/portable/MemMang/heap_4.c **** 
 196:os/portable/MemMang/heap_4.c ****                     /* If the block is larger than required it can be split into
 197:os/portable/MemMang/heap_4.c ****                      * two. */
 198:os/portable/MemMang/heap_4.c ****                     if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 199:os/portable/MemMang/heap_4.c ****                     {
 200:os/portable/MemMang/heap_4.c ****                         /* This block is to be split into two.  Create a new
 201:os/portable/MemMang/heap_4.c ****                          * block following the number of bytes requested. The void
 202:os/portable/MemMang/heap_4.c ****                          * cast is used to prevent byte alignment warnings from the
 203:os/portable/MemMang/heap_4.c ****                          * compiler. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 5


 204:os/portable/MemMang/heap_4.c ****                         pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 205:os/portable/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 206:os/portable/MemMang/heap_4.c **** 
 207:os/portable/MemMang/heap_4.c ****                         /* Calculate the sizes of two blocks split from the
 208:os/portable/MemMang/heap_4.c ****                          * single block. */
 209:os/portable/MemMang/heap_4.c ****                         pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 210:os/portable/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 211:os/portable/MemMang/heap_4.c **** 
 212:os/portable/MemMang/heap_4.c ****                         /* Insert the new block into the list of free blocks. */
 213:os/portable/MemMang/heap_4.c ****                         prvInsertBlockIntoFreeList( pxNewBlockLink );
 214:os/portable/MemMang/heap_4.c ****                     }
 215:os/portable/MemMang/heap_4.c ****                     else
 216:os/portable/MemMang/heap_4.c ****                     {
 217:os/portable/MemMang/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 218:os/portable/MemMang/heap_4.c ****                     }
 219:os/portable/MemMang/heap_4.c **** 
 220:os/portable/MemMang/heap_4.c ****                     xFreeBytesRemaining -= pxBlock->xBlockSize;
 221:os/portable/MemMang/heap_4.c **** 
 222:os/portable/MemMang/heap_4.c ****                     if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 223:os/portable/MemMang/heap_4.c ****                     {
 224:os/portable/MemMang/heap_4.c ****                         xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 225:os/portable/MemMang/heap_4.c ****                     }
 226:os/portable/MemMang/heap_4.c ****                     else
 227:os/portable/MemMang/heap_4.c ****                     {
 228:os/portable/MemMang/heap_4.c ****                         mtCOVERAGE_TEST_MARKER();
 229:os/portable/MemMang/heap_4.c ****                     }
 230:os/portable/MemMang/heap_4.c **** 
 231:os/portable/MemMang/heap_4.c ****                     /* The block is being returned - it is allocated and owned
 232:os/portable/MemMang/heap_4.c ****                      * by the application and has no "next" block. */
 233:os/portable/MemMang/heap_4.c ****                     pxBlock->xBlockSize |= xBlockAllocatedBit;
 234:os/portable/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 235:os/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 236:os/portable/MemMang/heap_4.c ****                 }
 237:os/portable/MemMang/heap_4.c ****                 else
 238:os/portable/MemMang/heap_4.c ****                 {
 239:os/portable/MemMang/heap_4.c ****                     mtCOVERAGE_TEST_MARKER();
 240:os/portable/MemMang/heap_4.c ****                 }
 241:os/portable/MemMang/heap_4.c ****             }
 242:os/portable/MemMang/heap_4.c ****             else
 243:os/portable/MemMang/heap_4.c ****             {
 244:os/portable/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 245:os/portable/MemMang/heap_4.c ****             }
 246:os/portable/MemMang/heap_4.c ****         }
 247:os/portable/MemMang/heap_4.c ****         else
 248:os/portable/MemMang/heap_4.c ****         {
 249:os/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 250:os/portable/MemMang/heap_4.c ****         }
 251:os/portable/MemMang/heap_4.c **** 
 252:os/portable/MemMang/heap_4.c ****         traceMALLOC( pvReturn, xWantedSize );
 253:os/portable/MemMang/heap_4.c ****     }
 254:os/portable/MemMang/heap_4.c ****     ( void ) xTaskResumeAll();
 255:os/portable/MemMang/heap_4.c **** 
 256:os/portable/MemMang/heap_4.c ****     #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
 257:os/portable/MemMang/heap_4.c ****         {
 258:os/portable/MemMang/heap_4.c ****             if( pvReturn == NULL )
 259:os/portable/MemMang/heap_4.c ****             {
 260:os/portable/MemMang/heap_4.c ****                 extern void vApplicationMallocFailedHook( void );
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 6


 261:os/portable/MemMang/heap_4.c ****                 vApplicationMallocFailedHook();
 262:os/portable/MemMang/heap_4.c ****             }
 263:os/portable/MemMang/heap_4.c ****             else
 264:os/portable/MemMang/heap_4.c ****             {
 265:os/portable/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 266:os/portable/MemMang/heap_4.c ****             }
 267:os/portable/MemMang/heap_4.c ****         }
 268:os/portable/MemMang/heap_4.c ****     #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */
 269:os/portable/MemMang/heap_4.c **** 
 270:os/portable/MemMang/heap_4.c ****     configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 271:os/portable/MemMang/heap_4.c ****     return pvReturn;
 272:os/portable/MemMang/heap_4.c **** }
 273:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 274:os/portable/MemMang/heap_4.c **** 
 275:os/portable/MemMang/heap_4.c **** void vPortFree( void * pv )
 276:os/portable/MemMang/heap_4.c **** {
 277:os/portable/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 278:os/portable/MemMang/heap_4.c ****     BlockLink_t * pxLink;
 279:os/portable/MemMang/heap_4.c **** 
 280:os/portable/MemMang/heap_4.c ****     if( pv != NULL )
 281:os/portable/MemMang/heap_4.c ****     {
 282:os/portable/MemMang/heap_4.c ****         /* The memory being freed will have an BlockLink_t structure immediately
 283:os/portable/MemMang/heap_4.c ****          * before it. */
 284:os/portable/MemMang/heap_4.c ****         puc -= xHeapStructSize;
 285:os/portable/MemMang/heap_4.c **** 
 286:os/portable/MemMang/heap_4.c ****         /* This casting is to keep the compiler from issuing warnings. */
 287:os/portable/MemMang/heap_4.c ****         pxLink = ( void * ) puc;
 288:os/portable/MemMang/heap_4.c **** 
 289:os/portable/MemMang/heap_4.c ****         /* Check the block is actually allocated. */
 290:os/portable/MemMang/heap_4.c ****         configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 291:os/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 292:os/portable/MemMang/heap_4.c **** 
 293:os/portable/MemMang/heap_4.c ****         if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 294:os/portable/MemMang/heap_4.c ****         {
 295:os/portable/MemMang/heap_4.c ****             if( pxLink->pxNextFreeBlock == NULL )
 296:os/portable/MemMang/heap_4.c ****             {
 297:os/portable/MemMang/heap_4.c ****                 /* The block is being returned to the heap - it is no longer
 298:os/portable/MemMang/heap_4.c ****                  * allocated. */
 299:os/portable/MemMang/heap_4.c ****                 pxLink->xBlockSize &= ~xBlockAllocatedBit;
 300:os/portable/MemMang/heap_4.c **** 
 301:os/portable/MemMang/heap_4.c ****                 vTaskSuspendAll();
 302:os/portable/MemMang/heap_4.c ****                 {
 303:os/portable/MemMang/heap_4.c ****                     /* Add this block to the list of free blocks. */
 304:os/portable/MemMang/heap_4.c ****                     xFreeBytesRemaining += pxLink->xBlockSize;
 305:os/portable/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 306:os/portable/MemMang/heap_4.c ****                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 307:os/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 308:os/portable/MemMang/heap_4.c ****                 }
 309:os/portable/MemMang/heap_4.c ****                 ( void ) xTaskResumeAll();
 310:os/portable/MemMang/heap_4.c ****             }
 311:os/portable/MemMang/heap_4.c ****             else
 312:os/portable/MemMang/heap_4.c ****             {
 313:os/portable/MemMang/heap_4.c ****                 mtCOVERAGE_TEST_MARKER();
 314:os/portable/MemMang/heap_4.c ****             }
 315:os/portable/MemMang/heap_4.c ****         }
 316:os/portable/MemMang/heap_4.c ****         else
 317:os/portable/MemMang/heap_4.c ****         {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 7


 318:os/portable/MemMang/heap_4.c ****             mtCOVERAGE_TEST_MARKER();
 319:os/portable/MemMang/heap_4.c ****         }
 320:os/portable/MemMang/heap_4.c ****     }
 321:os/portable/MemMang/heap_4.c **** }
 322:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 323:os/portable/MemMang/heap_4.c **** 
 324:os/portable/MemMang/heap_4.c **** size_t xPortGetFreeHeapSize( void )
 325:os/portable/MemMang/heap_4.c **** {
 326:os/portable/MemMang/heap_4.c ****     return xFreeBytesRemaining;
 327:os/portable/MemMang/heap_4.c **** }
 328:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 329:os/portable/MemMang/heap_4.c **** 
 330:os/portable/MemMang/heap_4.c **** size_t xPortGetMinimumEverFreeHeapSize( void )
 331:os/portable/MemMang/heap_4.c **** {
 332:os/portable/MemMang/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 333:os/portable/MemMang/heap_4.c **** }
 334:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 335:os/portable/MemMang/heap_4.c **** 
 336:os/portable/MemMang/heap_4.c **** void vPortInitialiseBlocks( void )
 337:os/portable/MemMang/heap_4.c **** {
 338:os/portable/MemMang/heap_4.c ****     /* This just exists to keep the linker quiet. */
 339:os/portable/MemMang/heap_4.c **** }
 340:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 341:os/portable/MemMang/heap_4.c **** 
 342:os/portable/MemMang/heap_4.c **** static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
 343:os/portable/MemMang/heap_4.c **** {
  27              		.loc 1 343 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
 344:os/portable/MemMang/heap_4.c ****     BlockLink_t * pxFirstFreeBlock;
  32              		.loc 1 344 5 view .LVU1
 345:os/portable/MemMang/heap_4.c ****     uint8_t * pucAlignedHeap;
  33              		.loc 1 345 5 view .LVU2
 346:os/portable/MemMang/heap_4.c ****     size_t uxAddress;
  34              		.loc 1 346 5 view .LVU3
 347:os/portable/MemMang/heap_4.c ****     size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
  35              		.loc 1 347 5 view .LVU4
  36              	.LVL0:
 348:os/portable/MemMang/heap_4.c **** 
 349:os/portable/MemMang/heap_4.c ****     /* Ensure the heap starts on a correctly aligned boundary. */
 350:os/portable/MemMang/heap_4.c ****     uxAddress = ( size_t ) ucHeap;
  37              		.loc 1 350 5 view .LVU5
  38              		.loc 1 350 15 is_stmt 0 view .LVU6
  39 0000 124A     		ldr	r2, .L4
  40              	.LVL1:
 351:os/portable/MemMang/heap_4.c **** 
 352:os/portable/MemMang/heap_4.c ****     if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
  41              		.loc 1 352 5 is_stmt 1 view .LVU7
  42              		.loc 1 352 7 is_stmt 0 view .LVU8
  43 0002 12F0070F 		tst	r2, #7
  44 0006 1ED0     		beq	.L3
 353:os/portable/MemMang/heap_4.c ****     {
 354:os/portable/MemMang/heap_4.c ****         uxAddress += ( portBYTE_ALIGNMENT - 1 );
  45              		.loc 1 354 9 is_stmt 1 view .LVU9
  46              		.loc 1 354 19 is_stmt 0 view .LVU10
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 8


  47 0008 D11D     		adds	r1, r2, #7
  48              	.LVL2:
 355:os/portable/MemMang/heap_4.c ****         uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  49              		.loc 1 355 9 is_stmt 1 view .LVU11
  50              		.loc 1 355 19 is_stmt 0 view .LVU12
  51 000a 21F00701 		bic	r1, r1, #7
  52              	.LVL3:
 356:os/portable/MemMang/heap_4.c ****         xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
  53              		.loc 1 356 9 is_stmt 1 view .LVU13
  54              		.loc 1 356 24 is_stmt 0 view .LVU14
  55 000e C1F57053 		rsb	r3, r1, #15360
  56 0012 1344     		add	r3, r3, r2
  57              	.LVL4:
 355:os/portable/MemMang/heap_4.c ****         uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  58              		.loc 1 355 19 view .LVU15
  59 0014 0A46     		mov	r2, r1
  60              	.LVL5:
  61              	.L2:
 357:os/portable/MemMang/heap_4.c ****     }
 358:os/portable/MemMang/heap_4.c **** 
 359:os/portable/MemMang/heap_4.c ****     pucAlignedHeap = ( uint8_t * ) uxAddress;
  62              		.loc 1 359 5 is_stmt 1 view .LVU16
 360:os/portable/MemMang/heap_4.c **** 
 361:os/portable/MemMang/heap_4.c ****     /* xStart is used to hold a pointer to the first item in the list of free
 362:os/portable/MemMang/heap_4.c ****      * blocks.  The void cast is used to prevent compiler warnings. */
 363:os/portable/MemMang/heap_4.c ****     xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
  63              		.loc 1 363 5 view .LVU17
  64              		.loc 1 363 28 is_stmt 0 view .LVU18
  65 0016 0E48     		ldr	r0, .L4+4
  66 0018 0260     		str	r2, [r0]
 364:os/portable/MemMang/heap_4.c ****     xStart.xBlockSize = ( size_t ) 0;
  67              		.loc 1 364 5 is_stmt 1 view .LVU19
  68              		.loc 1 364 23 is_stmt 0 view .LVU20
  69 001a 0021     		movs	r1, #0
  70 001c 4160     		str	r1, [r0, #4]
 365:os/portable/MemMang/heap_4.c **** 
 366:os/portable/MemMang/heap_4.c ****     /* pxEnd is used to mark the end of the list of free blocks and is inserted
 367:os/portable/MemMang/heap_4.c ****      * at the end of the heap space. */
 368:os/portable/MemMang/heap_4.c ****     uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
  71              		.loc 1 368 5 is_stmt 1 view .LVU21
  72              		.loc 1 368 15 is_stmt 0 view .LVU22
  73 001e 1344     		add	r3, r3, r2
  74              	.LVL6:
 369:os/portable/MemMang/heap_4.c ****     uxAddress -= xHeapStructSize;
  75              		.loc 1 369 5 is_stmt 1 view .LVU23
  76              		.loc 1 369 15 is_stmt 0 view .LVU24
  77 0020 083B     		subs	r3, r3, #8
  78              	.LVL7:
 370:os/portable/MemMang/heap_4.c ****     uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
  79              		.loc 1 370 5 is_stmt 1 view .LVU25
  80              		.loc 1 370 15 is_stmt 0 view .LVU26
  81 0022 23F00703 		bic	r3, r3, #7
  82              	.LVL8:
 371:os/portable/MemMang/heap_4.c ****     pxEnd = ( void * ) uxAddress;
  83              		.loc 1 371 5 is_stmt 1 view .LVU27
  84              		.loc 1 371 11 is_stmt 0 view .LVU28
  85 0026 0B48     		ldr	r0, .L4+8
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 9


  86 0028 0360     		str	r3, [r0]
 372:os/portable/MemMang/heap_4.c ****     pxEnd->xBlockSize = 0;
  87              		.loc 1 372 5 is_stmt 1 view .LVU29
  88              		.loc 1 372 23 is_stmt 0 view .LVU30
  89 002a 5960     		str	r1, [r3, #4]
 373:os/portable/MemMang/heap_4.c ****     pxEnd->pxNextFreeBlock = NULL;
  90              		.loc 1 373 5 is_stmt 1 view .LVU31
  91              		.loc 1 373 28 is_stmt 0 view .LVU32
  92 002c 1960     		str	r1, [r3]
 374:os/portable/MemMang/heap_4.c **** 
 375:os/portable/MemMang/heap_4.c ****     /* To start with there is a single free block that is sized to take up the
 376:os/portable/MemMang/heap_4.c ****      * entire heap space, minus the space taken by pxEnd. */
 377:os/portable/MemMang/heap_4.c ****     pxFirstFreeBlock = ( void * ) pucAlignedHeap;
  93              		.loc 1 377 5 is_stmt 1 view .LVU33
  94              	.LVL9:
 378:os/portable/MemMang/heap_4.c ****     pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
  95              		.loc 1 378 5 view .LVU34
  96              		.loc 1 378 46 is_stmt 0 view .LVU35
  97 002e 991A     		subs	r1, r3, r2
  98              		.loc 1 378 34 view .LVU36
  99 0030 5160     		str	r1, [r2, #4]
 379:os/portable/MemMang/heap_4.c ****     pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 100              		.loc 1 379 5 is_stmt 1 view .LVU37
 101              		.loc 1 379 39 is_stmt 0 view .LVU38
 102 0032 1360     		str	r3, [r2]
 380:os/portable/MemMang/heap_4.c **** 
 381:os/portable/MemMang/heap_4.c ****     /* Only one block exists - and it covers the entire usable heap space. */
 382:os/portable/MemMang/heap_4.c ****     xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 103              		.loc 1 382 5 is_stmt 1 view .LVU39
 104              		.loc 1 382 36 is_stmt 0 view .LVU40
 105 0034 084B     		ldr	r3, .L4+12
 106              	.LVL10:
 107              		.loc 1 382 36 view .LVU41
 108 0036 1960     		str	r1, [r3]
 383:os/portable/MemMang/heap_4.c ****     xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 109              		.loc 1 383 5 is_stmt 1 view .LVU42
 110              		.loc 1 383 25 is_stmt 0 view .LVU43
 111 0038 084B     		ldr	r3, .L4+16
 112 003a 1960     		str	r1, [r3]
 384:os/portable/MemMang/heap_4.c **** 
 385:os/portable/MemMang/heap_4.c ****     /* Work out the position of the top bit in a size_t variable. */
 386:os/portable/MemMang/heap_4.c ****     xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 113              		.loc 1 386 5 is_stmt 1 view .LVU44
 114              		.loc 1 386 24 is_stmt 0 view .LVU45
 115 003c 084B     		ldr	r3, .L4+20
 116 003e 4FF00042 		mov	r2, #-2147483648
 117              	.LVL11:
 118              		.loc 1 386 24 view .LVU46
 119 0042 1A60     		str	r2, [r3]
 387:os/portable/MemMang/heap_4.c **** }
 120              		.loc 1 387 1 view .LVU47
 121 0044 7047     		bx	lr
 122              	.LVL12:
 123              	.L3:
 347:os/portable/MemMang/heap_4.c **** 
 124              		.loc 1 347 12 view .LVU48
 125 0046 4FF47053 		mov	r3, #15360
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 10


 126 004a E4E7     		b	.L2
 127              	.L5:
 128              		.align	2
 129              	.L4:
 130 004c 00000000 		.word	ucHeap
 131 0050 00000000 		.word	.LANCHOR0
 132 0054 00000000 		.word	.LANCHOR1
 133 0058 00000000 		.word	.LANCHOR2
 134 005c 00000000 		.word	.LANCHOR3
 135 0060 00000000 		.word	.LANCHOR4
 136              		.cfi_endproc
 137              	.LFE9:
 139              		.section	.text.prvInsertBlockIntoFreeList,"ax",%progbits
 140              		.align	1
 141              		.syntax unified
 142              		.thumb
 143              		.thumb_func
 144              		.fpu fpv5-d16
 146              	prvInsertBlockIntoFreeList:
 147              	.LVL13:
 148              	.LFB10:
 388:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 389:os/portable/MemMang/heap_4.c **** 
 390:os/portable/MemMang/heap_4.c **** static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
 391:os/portable/MemMang/heap_4.c **** {
 149              		.loc 1 391 1 is_stmt 1 view -0
 150              		.cfi_startproc
 151              		@ args = 0, pretend = 0, frame = 0
 152              		@ frame_needed = 0, uses_anonymous_args = 0
 153              		@ link register save eliminated.
 154              		.loc 1 391 1 is_stmt 0 view .LVU50
 155 0000 10B4     		push	{r4}
 156              	.LCFI0:
 157              		.cfi_def_cfa_offset 4
 158              		.cfi_offset 4, -4
 392:os/portable/MemMang/heap_4.c ****     BlockLink_t * pxIterator;
 159              		.loc 1 392 5 is_stmt 1 view .LVU51
 393:os/portable/MemMang/heap_4.c ****     uint8_t * puc;
 160              		.loc 1 393 5 view .LVU52
 394:os/portable/MemMang/heap_4.c **** 
 395:os/portable/MemMang/heap_4.c ****     /* Iterate through the list until a block is found that has a higher address
 396:os/portable/MemMang/heap_4.c ****      * than the block being inserted. */
 397:os/portable/MemMang/heap_4.c ****     for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterat
 161              		.loc 1 397 5 view .LVU53
 162              	.LVL14:
 163              		.loc 1 397 21 is_stmt 0 view .LVU54
 164 0002 134B     		ldr	r3, .L16
 165              	.LVL15:
 166              	.L7:
 167              		.loc 1 397 32 is_stmt 1 discriminator 1 view .LVU55
 168 0004 1A46     		mov	r2, r3
 169              		.loc 1 397 42 is_stmt 0 discriminator 1 view .LVU56
 170 0006 1B68     		ldr	r3, [r3]
 171              	.LVL16:
 172              		.loc 1 397 5 discriminator 1 view .LVU57
 173 0008 8342     		cmp	r3, r0
 174 000a FBD3     		bcc	.L7
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 11


 398:os/portable/MemMang/heap_4.c ****     {
 399:os/portable/MemMang/heap_4.c ****         /* Nothing to do here, just iterate to the right position. */
 400:os/portable/MemMang/heap_4.c ****     }
 401:os/portable/MemMang/heap_4.c **** 
 402:os/portable/MemMang/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted after
 403:os/portable/MemMang/heap_4.c ****      * make a contiguous block of memory? */
 404:os/portable/MemMang/heap_4.c ****     puc = ( uint8_t * ) pxIterator;
 175              		.loc 1 404 5 is_stmt 1 view .LVU58
 176              	.LVL17:
 405:os/portable/MemMang/heap_4.c **** 
 406:os/portable/MemMang/heap_4.c ****     if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 177              		.loc 1 406 5 view .LVU59
 178              		.loc 1 406 27 is_stmt 0 view .LVU60
 179 000c 5168     		ldr	r1, [r2, #4]
 180              		.loc 1 406 15 view .LVU61
 181 000e 5418     		adds	r4, r2, r1
 182              		.loc 1 406 7 view .LVU62
 183 0010 8442     		cmp	r4, r0
 184 0012 0AD0     		beq	.L14
 185              	.L8:
 407:os/portable/MemMang/heap_4.c ****     {
 408:os/portable/MemMang/heap_4.c ****         pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 409:os/portable/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 410:os/portable/MemMang/heap_4.c ****     }
 411:os/portable/MemMang/heap_4.c ****     else
 412:os/portable/MemMang/heap_4.c ****     {
 413:os/portable/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 186              		.loc 1 413 33 is_stmt 1 view .LVU63
 414:os/portable/MemMang/heap_4.c ****     }
 415:os/portable/MemMang/heap_4.c **** 
 416:os/portable/MemMang/heap_4.c ****     /* Do the block being inserted, and the block it is being inserted before
 417:os/portable/MemMang/heap_4.c ****      * make a contiguous block of memory? */
 418:os/portable/MemMang/heap_4.c ****     puc = ( uint8_t * ) pxBlockToInsert;
 187              		.loc 1 418 5 view .LVU64
 188              	.LVL18:
 419:os/portable/MemMang/heap_4.c **** 
 420:os/portable/MemMang/heap_4.c ****     if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 189              		.loc 1 420 5 view .LVU65
 190              		.loc 1 420 32 is_stmt 0 view .LVU66
 191 0014 4168     		ldr	r1, [r0, #4]
 192              		.loc 1 420 15 view .LVU67
 193 0016 4418     		adds	r4, r0, r1
 194              		.loc 1 420 7 view .LVU68
 195 0018 A342     		cmp	r3, r4
 196 001a 0BD0     		beq	.L15
 421:os/portable/MemMang/heap_4.c ****     {
 422:os/portable/MemMang/heap_4.c ****         if( pxIterator->pxNextFreeBlock != pxEnd )
 423:os/portable/MemMang/heap_4.c ****         {
 424:os/portable/MemMang/heap_4.c ****             /* Form one big block from the two blocks. */
 425:os/portable/MemMang/heap_4.c ****             pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 426:os/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 427:os/portable/MemMang/heap_4.c ****         }
 428:os/portable/MemMang/heap_4.c ****         else
 429:os/portable/MemMang/heap_4.c ****         {
 430:os/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxEnd;
 431:os/portable/MemMang/heap_4.c ****         }
 432:os/portable/MemMang/heap_4.c ****     }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 12


 433:os/portable/MemMang/heap_4.c ****     else
 434:os/portable/MemMang/heap_4.c ****     {
 435:os/portable/MemMang/heap_4.c ****         pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 197              		.loc 1 435 9 is_stmt 1 view .LVU69
 198              		.loc 1 435 42 is_stmt 0 view .LVU70
 199 001c 0360     		str	r3, [r0]
 200              	.L11:
 436:os/portable/MemMang/heap_4.c ****     }
 437:os/portable/MemMang/heap_4.c **** 
 438:os/portable/MemMang/heap_4.c ****     /* If the block being inserted plugged a gab, so was merged with the block
 439:os/portable/MemMang/heap_4.c ****      * before and the block after, then it's pxNextFreeBlock pointer will have
 440:os/portable/MemMang/heap_4.c ****      * already been set, and should not be set here as that would make it point
 441:os/portable/MemMang/heap_4.c ****      * to itself. */
 442:os/portable/MemMang/heap_4.c ****     if( pxIterator != pxBlockToInsert )
 201              		.loc 1 442 5 is_stmt 1 view .LVU71
 202              		.loc 1 442 7 is_stmt 0 view .LVU72
 203 001e 9042     		cmp	r0, r2
 204 0020 00D0     		beq	.L6
 443:os/portable/MemMang/heap_4.c ****     {
 444:os/portable/MemMang/heap_4.c ****         pxIterator->pxNextFreeBlock = pxBlockToInsert;
 205              		.loc 1 444 9 is_stmt 1 view .LVU73
 206              		.loc 1 444 37 is_stmt 0 view .LVU74
 207 0022 1060     		str	r0, [r2]
 445:os/portable/MemMang/heap_4.c ****     }
 446:os/portable/MemMang/heap_4.c ****     else
 447:os/portable/MemMang/heap_4.c ****     {
 448:os/portable/MemMang/heap_4.c ****         mtCOVERAGE_TEST_MARKER();
 208              		.loc 1 448 33 is_stmt 1 view .LVU75
 209              	.L6:
 449:os/portable/MemMang/heap_4.c ****     }
 450:os/portable/MemMang/heap_4.c **** }
 210              		.loc 1 450 1 is_stmt 0 view .LVU76
 211 0024 5DF8044B 		ldr	r4, [sp], #4
 212              	.LCFI1:
 213              		.cfi_remember_state
 214              		.cfi_restore 4
 215              		.cfi_def_cfa_offset 0
 216 0028 7047     		bx	lr
 217              	.LVL19:
 218              	.L14:
 219              	.LCFI2:
 220              		.cfi_restore_state
 408:os/portable/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 221              		.loc 1 408 9 is_stmt 1 view .LVU77
 408:os/portable/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 222              		.loc 1 408 50 is_stmt 0 view .LVU78
 223 002a 4068     		ldr	r0, [r0, #4]
 224              	.LVL20:
 408:os/portable/MemMang/heap_4.c ****         pxBlockToInsert = pxIterator;
 225              		.loc 1 408 32 view .LVU79
 226 002c 0144     		add	r1, r1, r0
 227 002e 5160     		str	r1, [r2, #4]
 409:os/portable/MemMang/heap_4.c ****     }
 228              		.loc 1 409 9 is_stmt 1 view .LVU80
 229              	.LVL21:
 409:os/portable/MemMang/heap_4.c ****     }
 230              		.loc 1 409 25 is_stmt 0 view .LVU81
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 13


 231 0030 1046     		mov	r0, r2
 232 0032 EFE7     		b	.L8
 233              	.LVL22:
 234              	.L15:
 422:os/portable/MemMang/heap_4.c ****         {
 235              		.loc 1 422 9 is_stmt 1 view .LVU82
 422:os/portable/MemMang/heap_4.c ****         {
 236              		.loc 1 422 41 is_stmt 0 view .LVU83
 237 0034 074C     		ldr	r4, .L16+4
 238 0036 2468     		ldr	r4, [r4]
 422:os/portable/MemMang/heap_4.c ****         {
 239              		.loc 1 422 11 view .LVU84
 240 0038 A342     		cmp	r3, r4
 241 003a 06D0     		beq	.L10
 425:os/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 242              		.loc 1 425 13 is_stmt 1 view .LVU85
 425:os/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 243              		.loc 1 425 71 is_stmt 0 view .LVU86
 244 003c 5B68     		ldr	r3, [r3, #4]
 425:os/portable/MemMang/heap_4.c ****             pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 245              		.loc 1 425 41 view .LVU87
 246 003e 1944     		add	r1, r1, r3
 247 0040 4160     		str	r1, [r0, #4]
 426:os/portable/MemMang/heap_4.c ****         }
 248              		.loc 1 426 13 is_stmt 1 view .LVU88
 426:os/portable/MemMang/heap_4.c ****         }
 249              		.loc 1 426 58 is_stmt 0 view .LVU89
 250 0042 1368     		ldr	r3, [r2]
 426:os/portable/MemMang/heap_4.c ****         }
 251              		.loc 1 426 75 view .LVU90
 252 0044 1B68     		ldr	r3, [r3]
 426:os/portable/MemMang/heap_4.c ****         }
 253              		.loc 1 426 46 view .LVU91
 254 0046 0360     		str	r3, [r0]
 255 0048 E9E7     		b	.L11
 256              	.L10:
 430:os/portable/MemMang/heap_4.c ****         }
 257              		.loc 1 430 13 is_stmt 1 view .LVU92
 430:os/portable/MemMang/heap_4.c ****         }
 258              		.loc 1 430 46 is_stmt 0 view .LVU93
 259 004a 0460     		str	r4, [r0]
 260 004c E7E7     		b	.L11
 261              	.L17:
 262 004e 00BF     		.align	2
 263              	.L16:
 264 0050 00000000 		.word	.LANCHOR0
 265 0054 00000000 		.word	.LANCHOR1
 266              		.cfi_endproc
 267              	.LFE10:
 269              		.section	.text.pvPortMalloc,"ax",%progbits
 270              		.align	1
 271              		.global	pvPortMalloc
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu fpv5-d16
 277              	pvPortMalloc:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 14


 278              	.LVL23:
 279              	.LFB4:
 116:os/portable/MemMang/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 280              		.loc 1 116 1 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 116:os/portable/MemMang/heap_4.c ****     BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
 284              		.loc 1 116 1 is_stmt 0 view .LVU95
 285 0000 38B5     		push	{r3, r4, r5, lr}
 286              	.LCFI3:
 287              		.cfi_def_cfa_offset 16
 288              		.cfi_offset 3, -16
 289              		.cfi_offset 4, -12
 290              		.cfi_offset 5, -8
 291              		.cfi_offset 14, -4
 292 0002 0446     		mov	r4, r0
 117:os/portable/MemMang/heap_4.c ****     void * pvReturn = NULL;
 293              		.loc 1 117 5 is_stmt 1 view .LVU96
 118:os/portable/MemMang/heap_4.c **** 
 294              		.loc 1 118 5 view .LVU97
 295              	.LVL24:
 120:os/portable/MemMang/heap_4.c ****     {
 296              		.loc 1 120 5 view .LVU98
 297 0004 FFF7FEFF 		bl	vTaskSuspendAll
 298              	.LVL25:
 124:os/portable/MemMang/heap_4.c ****         {
 299              		.loc 1 124 9 view .LVU99
 124:os/portable/MemMang/heap_4.c ****         {
 300              		.loc 1 124 19 is_stmt 0 view .LVU100
 301 0008 3D4B     		ldr	r3, .L39
 302 000a 1B68     		ldr	r3, [r3]
 124:os/portable/MemMang/heap_4.c ****         {
 303              		.loc 1 124 11 view .LVU101
 304 000c DBB1     		cbz	r3, .L38
 305              	.L19:
 130:os/portable/MemMang/heap_4.c ****         }
 306              		.loc 1 130 37 is_stmt 1 view .LVU102
 137:os/portable/MemMang/heap_4.c ****         {
 307              		.loc 1 137 9 view .LVU103
 137:os/portable/MemMang/heap_4.c ****         {
 308              		.loc 1 137 27 is_stmt 0 view .LVU104
 309 000e 3D4B     		ldr	r3, .L39+4
 310 0010 1B68     		ldr	r3, [r3]
 137:os/portable/MemMang/heap_4.c ****         {
 311              		.loc 1 137 11 view .LVU105
 312 0012 1C42     		tst	r4, r3
 313 0014 57D1     		bne	.L30
 141:os/portable/MemMang/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 314              		.loc 1 141 13 is_stmt 1 view .LVU106
 141:os/portable/MemMang/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 315              		.loc 1 141 37 is_stmt 0 view .LVU107
 316 0016 631E     		subs	r3, r4, #1
 141:os/portable/MemMang/heap_4.c ****                 ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 317              		.loc 1 141 15 view .LVU108
 318 0018 13F10A0F 		cmn	r3, #10
 319 001c 55D8     		bhi	.L31
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 15


 144:os/portable/MemMang/heap_4.c **** 
 320              		.loc 1 144 17 is_stmt 1 view .LVU109
 144:os/portable/MemMang/heap_4.c **** 
 321              		.loc 1 144 29 is_stmt 0 view .LVU110
 322 001e 04F10803 		add	r3, r4, #8
 323              	.LVL26:
 147:os/portable/MemMang/heap_4.c ****                 {
 324              		.loc 1 147 17 is_stmt 1 view .LVU111
 147:os/portable/MemMang/heap_4.c ****                 {
 325              		.loc 1 147 19 is_stmt 0 view .LVU112
 326 0022 14F0070F 		tst	r4, #7
 327 0026 05D0     		beq	.L21
 150:os/portable/MemMang/heap_4.c ****                             > xWantedSize )
 328              		.loc 1 150 21 is_stmt 1 view .LVU113
 150:os/portable/MemMang/heap_4.c ****                             > xWantedSize )
 329              		.loc 1 150 39 is_stmt 0 view .LVU114
 330 0028 23F00702 		bic	r2, r3, #7
 331 002c 0832     		adds	r2, r2, #8
 150:os/portable/MemMang/heap_4.c ****                             > xWantedSize )
 332              		.loc 1 150 23 view .LVU115
 333 002e 9A42     		cmp	r2, r3
 334 0030 5CD9     		bls	.L32
 153:os/portable/MemMang/heap_4.c ****                         configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 335              		.loc 1 153 37 view .LVU116
 336 0032 1346     		mov	r3, r2
 337              	.LVL27:
 338              	.L21:
 171:os/portable/MemMang/heap_4.c ****             {
 339              		.loc 1 171 13 is_stmt 1 view .LVU117
 171:os/portable/MemMang/heap_4.c ****             {
 340              		.loc 1 171 15 is_stmt 0 view .LVU118
 341 0034 002B     		cmp	r3, #0
 342 0036 5BD0     		beq	.L33
 171:os/portable/MemMang/heap_4.c ****             {
 343              		.loc 1 171 54 discriminator 1 view .LVU119
 344 0038 334A     		ldr	r2, .L39+8
 345 003a 1268     		ldr	r2, [r2]
 171:os/portable/MemMang/heap_4.c ****             {
 346              		.loc 1 171 37 discriminator 1 view .LVU120
 347 003c 9A42     		cmp	r2, r3
 348 003e 59D3     		bcc	.L34
 175:os/portable/MemMang/heap_4.c ****                 pxBlock = xStart.pxNextFreeBlock;
 349              		.loc 1 175 17 is_stmt 1 view .LVU121
 350              	.LVL28:
 176:os/portable/MemMang/heap_4.c **** 
 351              		.loc 1 176 17 view .LVU122
 176:os/portable/MemMang/heap_4.c **** 
 352              		.loc 1 176 25 is_stmt 0 view .LVU123
 353 0040 324A     		ldr	r2, .L39+12
 354 0042 1468     		ldr	r4, [r2]
 355              	.LVL29:
 178:os/portable/MemMang/heap_4.c ****                 {
 356              		.loc 1 178 17 is_stmt 1 view .LVU124
 178:os/portable/MemMang/heap_4.c ****                 {
 357              		.loc 1 178 22 is_stmt 0 view .LVU125
 358 0044 04E0     		b	.L23
 359              	.LVL30:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 16


 360              	.L38:
 126:os/portable/MemMang/heap_4.c ****         }
 361              		.loc 1 126 13 is_stmt 1 view .LVU126
 362 0046 FFF7FEFF 		bl	prvHeapInit
 363              	.LVL31:
 364 004a E0E7     		b	.L19
 365              	.LVL32:
 366              	.L35:
 180:os/portable/MemMang/heap_4.c ****                     pxBlock = pxBlock->pxNextFreeBlock;
 367              		.loc 1 180 37 is_stmt 0 view .LVU127
 368 004c 2246     		mov	r2, r4
 369              	.LVL33:
 181:os/portable/MemMang/heap_4.c ****                 }
 370              		.loc 1 181 29 view .LVU128
 371 004e 0C46     		mov	r4, r1
 372              	.LVL34:
 373              	.L23:
 178:os/portable/MemMang/heap_4.c ****                 {
 374              		.loc 1 178 22 is_stmt 1 view .LVU129
 178:os/portable/MemMang/heap_4.c ****                 {
 375              		.loc 1 178 33 is_stmt 0 view .LVU130
 376 0050 6168     		ldr	r1, [r4, #4]
 178:os/portable/MemMang/heap_4.c ****                 {
 377              		.loc 1 178 22 view .LVU131
 378 0052 9942     		cmp	r1, r3
 379 0054 02D2     		bcs	.L22
 178:os/portable/MemMang/heap_4.c ****                 {
 380              		.loc 1 178 74 discriminator 1 view .LVU132
 381 0056 2168     		ldr	r1, [r4]
 178:os/portable/MemMang/heap_4.c ****                 {
 382              		.loc 1 178 62 discriminator 1 view .LVU133
 383 0058 0029     		cmp	r1, #0
 384 005a F7D1     		bne	.L35
 385              	.L22:
 186:os/portable/MemMang/heap_4.c ****                 {
 386              		.loc 1 186 17 is_stmt 1 view .LVU134
 186:os/portable/MemMang/heap_4.c ****                 {
 387              		.loc 1 186 29 is_stmt 0 view .LVU135
 388 005c 2849     		ldr	r1, .L39
 389 005e 0968     		ldr	r1, [r1]
 186:os/portable/MemMang/heap_4.c ****                 {
 390              		.loc 1 186 19 view .LVU136
 391 0060 A142     		cmp	r1, r4
 392 0062 49D0     		beq	.L36
 190:os/portable/MemMang/heap_4.c **** 
 393              		.loc 1 190 21 is_stmt 1 view .LVU137
 190:os/portable/MemMang/heap_4.c **** 
 394              		.loc 1 190 76 is_stmt 0 view .LVU138
 395 0064 1568     		ldr	r5, [r2]
 190:os/portable/MemMang/heap_4.c **** 
 396              		.loc 1 190 30 view .LVU139
 397 0066 0835     		adds	r5, r5, #8
 398              	.LVL35:
 194:os/portable/MemMang/heap_4.c **** 
 399              		.loc 1 194 21 is_stmt 1 view .LVU140
 194:os/portable/MemMang/heap_4.c **** 
 400              		.loc 1 194 63 is_stmt 0 view .LVU141
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 17


 401 0068 2168     		ldr	r1, [r4]
 194:os/portable/MemMang/heap_4.c **** 
 402              		.loc 1 194 54 view .LVU142
 403 006a 1160     		str	r1, [r2]
 198:os/portable/MemMang/heap_4.c ****                     {
 404              		.loc 1 198 21 is_stmt 1 view .LVU143
 198:os/portable/MemMang/heap_4.c ****                     {
 405              		.loc 1 198 34 is_stmt 0 view .LVU144
 406 006c 6268     		ldr	r2, [r4, #4]
 407              	.LVL36:
 198:os/portable/MemMang/heap_4.c ****                     {
 408              		.loc 1 198 47 view .LVU145
 409 006e D21A     		subs	r2, r2, r3
 198:os/portable/MemMang/heap_4.c ****                     {
 410              		.loc 1 198 23 view .LVU146
 411 0070 102A     		cmp	r2, #16
 412 0072 12D9     		bls	.L24
 204:os/portable/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 413              		.loc 1 204 25 is_stmt 1 view .LVU147
 204:os/portable/MemMang/heap_4.c ****                         configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) =
 414              		.loc 1 204 40 is_stmt 0 view .LVU148
 415 0074 E018     		adds	r0, r4, r3
 416              	.LVL37:
 205:os/portable/MemMang/heap_4.c **** 
 417              		.loc 1 205 25 is_stmt 1 view .LVU149
 418 0076 10F0070F 		tst	r0, #7
 419 007a 0AD0     		beq	.L25
 205:os/portable/MemMang/heap_4.c **** 
 420              		.loc 1 205 25 view .LVU150
 421              	.LBB12:
 422              	.LBI12:
 423              		.file 2 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h"
   1:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FreeRTOS Kernel V10.4.3
   3:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
   5:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * subject to the following conditions:
  11:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  12:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * copies or substantial portions of the Software.
  14:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  15:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  22:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * https://www.FreeRTOS.org
  23:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * https://github.com/FreeRTOS
  24:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  25:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * 1 tab == 4 spaces!
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 18


  26:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  27:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  28:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  29:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  30:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define PORTMACRO_H
  31:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  32:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifdef __cplusplus
  33:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         extern "C" {
  34:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
  35:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  36:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  37:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  38:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  39:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  41:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  42:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  43:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  44:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  45:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  46:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  47:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portCHAR          char
  48:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portFLOAT         float
  49:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portDOUBLE        double
  50:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portLONG          long
  51:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSHORT         short
  52:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portBASE_TYPE     long
  54:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  55:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     typedef long             BaseType_t;
  57:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     typedef unsigned long    UBaseType_t;
  58:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         typedef uint16_t     TickType_t;
  61:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #else
  63:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         typedef uint32_t     TickType_t;
  64:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  66:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * not need to be guarded with a critical section. */
  68:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
  70:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  71:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  72:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
  73:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  78:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  79:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
  80:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portYIELD()                                 \
  81:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {                                                   \
  82:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 19


  83:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****                                                         \
  85:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
  90:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  91:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  96:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  97:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
  98:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     extern void vPortEnterCritical( void );
  99:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     extern void vPortExitCritical( void );
 100:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 107:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 108:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 109:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * (which build with all the ports) will build. */
 112:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 115:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 116:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 117:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 121:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 122:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 123:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 124:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 127:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 128:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 130:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Generic helper function. */
 131:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         {
 133:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             uint8_t ucReturn;
 134:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 135:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 137:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             return ucReturn;
 138:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         }
 139:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 20


 140:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Check the configuration. */
 141:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #endif
 144:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 145:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 149:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 150:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 151:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 153:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 155:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 156:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 157:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifdef configASSERT
 158:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 161:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 162:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 163:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portNOP()
 164:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 165:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portINLINE              __inline
 166:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 167:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifndef portFORCE_INLINE
 168:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 170:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 171:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 172:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 173:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         BaseType_t xReturn;
 175:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 176:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 179:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         {
 181:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             xReturn = pdFALSE;
 182:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         }
 183:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         else
 184:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         {
 185:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             xReturn = pdTRUE;
 186:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         }
 187:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 188:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         return xReturn;
 189:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 190:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 192:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 424              		.loc 2 193 34 view .LVU151
 425              	.LBB13:
 194:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 21


 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         uint32_t ulNewBASEPRI;
 426              		.loc 2 195 9 view .LVU152
 196:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile
 427              		.loc 2 197 9 view .LVU153
 428              		.syntax unified
 429              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 430 007c 4FF05003 			mov r3, #80												
 431 0080 72B6     		cpsid i													
 432 0082 83F31188 		msr basepri, r3											
 433 0086 BFF36F8F 		isb														
 434 008a BFF34F8F 		dsb														
 435 008e 62B6     		cpsie i													
 436              	
 437              	@ 0 "" 2
 438              	.LVL38:
 439              		.thumb
 440              		.syntax unified
 441              	.L26:
 442              		.loc 2 197 9 is_stmt 0 view .LVU154
 443              	.LBE13:
 444              	.LBE12:
 205:os/portable/MemMang/heap_4.c **** 
 445              		.loc 1 205 25 is_stmt 1 discriminator 4 view .LVU155
 205:os/portable/MemMang/heap_4.c **** 
 446              		.loc 1 205 25 discriminator 4 view .LVU156
 205:os/portable/MemMang/heap_4.c **** 
 447              		.loc 1 205 25 discriminator 4 view .LVU157
 448 0090 FEE7     		b	.L26
 449              	.LVL39:
 450              	.L25:
 205:os/portable/MemMang/heap_4.c **** 
 451              		.loc 1 205 105 discriminator 2 view .LVU158
 209:os/portable/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 452              		.loc 1 209 25 discriminator 2 view .LVU159
 209:os/portable/MemMang/heap_4.c ****                         pxBlock->xBlockSize = xWantedSize;
 453              		.loc 1 209 52 is_stmt 0 discriminator 2 view .LVU160
 454 0092 4260     		str	r2, [r0, #4]
 210:os/portable/MemMang/heap_4.c **** 
 455              		.loc 1 210 25 is_stmt 1 discriminator 2 view .LVU161
 210:os/portable/MemMang/heap_4.c **** 
 456              		.loc 1 210 45 is_stmt 0 discriminator 2 view .LVU162
 457 0094 6360     		str	r3, [r4, #4]
 213:os/portable/MemMang/heap_4.c ****                     }
 458              		.loc 1 213 25 is_stmt 1 discriminator 2 view .LVU163
 459 0096 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 460              	.LVL40:
 461              	.L24:
 217:os/portable/MemMang/heap_4.c ****                     }
 462              		.loc 1 217 49 view .LVU164
 220:os/portable/MemMang/heap_4.c **** 
 463              		.loc 1 220 21 view .LVU165
 220:os/portable/MemMang/heap_4.c **** 
 464              		.loc 1 220 51 is_stmt 0 view .LVU166
 465 009a 6268     		ldr	r2, [r4, #4]
 220:os/portable/MemMang/heap_4.c **** 
 466              		.loc 1 220 41 view .LVU167
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 22


 467 009c 1A49     		ldr	r1, .L39+8
 468 009e 0B68     		ldr	r3, [r1]
 469 00a0 9B1A     		subs	r3, r3, r2
 470 00a2 0B60     		str	r3, [r1]
 222:os/portable/MemMang/heap_4.c ****                     {
 471              		.loc 1 222 21 is_stmt 1 view .LVU168
 222:os/portable/MemMang/heap_4.c ****                     {
 472              		.loc 1 222 45 is_stmt 0 view .LVU169
 473 00a4 1A49     		ldr	r1, .L39+16
 474 00a6 0968     		ldr	r1, [r1]
 222:os/portable/MemMang/heap_4.c ****                     {
 475              		.loc 1 222 23 view .LVU170
 476 00a8 8B42     		cmp	r3, r1
 477 00aa 01D2     		bcs	.L27
 224:os/portable/MemMang/heap_4.c ****                     }
 478              		.loc 1 224 25 is_stmt 1 view .LVU171
 224:os/portable/MemMang/heap_4.c ****                     }
 479              		.loc 1 224 56 is_stmt 0 view .LVU172
 480 00ac 1849     		ldr	r1, .L39+16
 481 00ae 0B60     		str	r3, [r1]
 482              	.L27:
 228:os/portable/MemMang/heap_4.c ****                     }
 483              		.loc 1 228 49 is_stmt 1 view .LVU173
 233:os/portable/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 484              		.loc 1 233 21 view .LVU174
 233:os/portable/MemMang/heap_4.c ****                     pxBlock->pxNextFreeBlock = NULL;
 485              		.loc 1 233 41 is_stmt 0 view .LVU175
 486 00b0 144B     		ldr	r3, .L39+4
 487 00b2 1B68     		ldr	r3, [r3]
 488 00b4 1343     		orrs	r3, r3, r2
 489 00b6 6360     		str	r3, [r4, #4]
 234:os/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 490              		.loc 1 234 21 is_stmt 1 view .LVU176
 234:os/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulAllocations++;
 491              		.loc 1 234 46 is_stmt 0 view .LVU177
 492 00b8 0023     		movs	r3, #0
 493 00ba 2360     		str	r3, [r4]
 235:os/portable/MemMang/heap_4.c ****                 }
 494              		.loc 1 235 21 is_stmt 1 view .LVU178
 235:os/portable/MemMang/heap_4.c ****                 }
 495              		.loc 1 235 51 is_stmt 0 view .LVU179
 496 00bc 154A     		ldr	r2, .L39+20
 497 00be 1368     		ldr	r3, [r2]
 498 00c0 0133     		adds	r3, r3, #1
 499 00c2 1360     		str	r3, [r2]
 500 00c4 02E0     		b	.L20
 501              	.LVL41:
 502              	.L30:
 118:os/portable/MemMang/heap_4.c **** 
 503              		.loc 1 118 12 view .LVU180
 504 00c6 0025     		movs	r5, #0
 505 00c8 00E0     		b	.L20
 506              	.L31:
 507 00ca 0025     		movs	r5, #0
 508              	.LVL42:
 509              	.L20:
 249:os/portable/MemMang/heap_4.c ****         }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 23


 510              		.loc 1 249 37 is_stmt 1 view .LVU181
 252:os/portable/MemMang/heap_4.c ****     }
 511              		.loc 1 252 45 view .LVU182
 254:os/portable/MemMang/heap_4.c **** 
 512              		.loc 1 254 5 view .LVU183
 254:os/portable/MemMang/heap_4.c **** 
 513              		.loc 1 254 14 is_stmt 0 view .LVU184
 514 00cc FFF7FEFF 		bl	xTaskResumeAll
 515              	.LVL43:
 270:os/portable/MemMang/heap_4.c ****     return pvReturn;
 516              		.loc 1 270 5 is_stmt 1 view .LVU185
 517 00d0 15F0070F 		tst	r5, #7
 518 00d4 12D0     		beq	.L18
 270:os/portable/MemMang/heap_4.c ****     return pvReturn;
 519              		.loc 1 270 5 view .LVU186
 520              	.LBB14:
 521              	.LBI14:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 522              		.loc 2 193 34 view .LVU187
 523              	.LBB15:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 524              		.loc 2 195 9 view .LVU188
 525              		.loc 2 197 9 view .LVU189
 526              		.syntax unified
 527              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 528 00d6 4FF05003 			mov r3, #80												
 529 00da 72B6     		cpsid i													
 530 00dc 83F31188 		msr basepri, r3											
 531 00e0 BFF36F8F 		isb														
 532 00e4 BFF34F8F 		dsb														
 533 00e8 62B6     		cpsie i													
 534              	
 535              	@ 0 "" 2
 536              	.LVL44:
 537              		.thumb
 538              		.syntax unified
 539              	.L29:
 540              		.loc 2 197 9 is_stmt 0 view .LVU190
 541              	.LBE15:
 542              	.LBE14:
 270:os/portable/MemMang/heap_4.c ****     return pvReturn;
 543              		.loc 1 270 5 is_stmt 1 discriminator 6 view .LVU191
 270:os/portable/MemMang/heap_4.c ****     return pvReturn;
 544              		.loc 1 270 5 discriminator 6 view .LVU192
 270:os/portable/MemMang/heap_4.c ****     return pvReturn;
 545              		.loc 1 270 5 discriminator 6 view .LVU193
 546 00ea FEE7     		b	.L29
 547              	.LVL45:
 548              	.L32:
 118:os/portable/MemMang/heap_4.c **** 
 549              		.loc 1 118 12 is_stmt 0 view .LVU194
 550 00ec 0025     		movs	r5, #0
 551 00ee EDE7     		b	.L20
 552              	.L33:
 118:os/portable/MemMang/heap_4.c **** 
 553              		.loc 1 118 12 view .LVU195
 554 00f0 0025     		movs	r5, #0
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 24


 555 00f2 EBE7     		b	.L20
 556              	.L34:
 557 00f4 0025     		movs	r5, #0
 558 00f6 E9E7     		b	.L20
 559              	.LVL46:
 560              	.L36:
 118:os/portable/MemMang/heap_4.c **** 
 561              		.loc 1 118 12 view .LVU196
 562 00f8 0025     		movs	r5, #0
 563 00fa E7E7     		b	.L20
 564              	.LVL47:
 565              	.L18:
 272:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 566              		.loc 1 272 1 view .LVU197
 567 00fc 2846     		mov	r0, r5
 568 00fe 38BD     		pop	{r3, r4, r5, pc}
 569              	.LVL48:
 570              	.L40:
 272:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 571              		.loc 1 272 1 view .LVU198
 572              		.align	2
 573              	.L39:
 574 0100 00000000 		.word	.LANCHOR1
 575 0104 00000000 		.word	.LANCHOR4
 576 0108 00000000 		.word	.LANCHOR3
 577 010c 00000000 		.word	.LANCHOR0
 578 0110 00000000 		.word	.LANCHOR2
 579 0114 00000000 		.word	.LANCHOR5
 580              		.cfi_endproc
 581              	.LFE4:
 583              		.section	.text.vPortFree,"ax",%progbits
 584              		.align	1
 585              		.global	vPortFree
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu fpv5-d16
 591              	vPortFree:
 592              	.LVL49:
 593              	.LFB5:
 276:os/portable/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 594              		.loc 1 276 1 is_stmt 1 view -0
 595              		.cfi_startproc
 596              		@ args = 0, pretend = 0, frame = 0
 597              		@ frame_needed = 0, uses_anonymous_args = 0
 277:os/portable/MemMang/heap_4.c ****     BlockLink_t * pxLink;
 598              		.loc 1 277 5 view .LVU200
 278:os/portable/MemMang/heap_4.c **** 
 599              		.loc 1 278 5 view .LVU201
 280:os/portable/MemMang/heap_4.c ****     {
 600              		.loc 1 280 5 view .LVU202
 280:os/portable/MemMang/heap_4.c ****     {
 601              		.loc 1 280 7 is_stmt 0 view .LVU203
 602 0000 0028     		cmp	r0, #0
 603 0002 38D0     		beq	.L48
 276:os/portable/MemMang/heap_4.c ****     uint8_t * puc = ( uint8_t * ) pv;
 604              		.loc 1 276 1 view .LVU204
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 25


 605 0004 38B5     		push	{r3, r4, r5, lr}
 606              	.LCFI4:
 607              		.cfi_def_cfa_offset 16
 608              		.cfi_offset 3, -16
 609              		.cfi_offset 4, -12
 610              		.cfi_offset 5, -8
 611              		.cfi_offset 14, -4
 612 0006 0446     		mov	r4, r0
 284:os/portable/MemMang/heap_4.c **** 
 613              		.loc 1 284 9 is_stmt 1 view .LVU205
 284:os/portable/MemMang/heap_4.c **** 
 614              		.loc 1 284 13 is_stmt 0 view .LVU206
 615 0008 A0F10805 		sub	r5, r0, #8
 616              	.LVL50:
 287:os/portable/MemMang/heap_4.c **** 
 617              		.loc 1 287 9 is_stmt 1 view .LVU207
 290:os/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 618              		.loc 1 290 9 view .LVU208
 619 000c 50F8043C 		ldr	r3, [r0, #-4]
 620 0010 194A     		ldr	r2, .L51
 621 0012 1268     		ldr	r2, [r2]
 622 0014 1342     		tst	r3, r2
 623 0016 0AD1     		bne	.L43
 290:os/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 624              		.loc 1 290 9 view .LVU209
 625              	.LBB16:
 626              	.LBI16:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 627              		.loc 2 193 34 view .LVU210
 628              	.LBB17:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 629              		.loc 2 195 9 view .LVU211
 630              		.loc 2 197 9 view .LVU212
 631              		.syntax unified
 632              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 633 0018 4FF05003 			mov r3, #80												
 634 001c 72B6     		cpsid i													
 635 001e 83F31188 		msr basepri, r3											
 636 0022 BFF36F8F 		isb														
 637 0026 BFF34F8F 		dsb														
 638 002a 62B6     		cpsie i													
 639              	
 640              	@ 0 "" 2
 641              	.LVL51:
 642              		.thumb
 643              		.syntax unified
 644              	.L44:
 645              		.loc 2 197 9 is_stmt 0 view .LVU213
 646              	.LBE17:
 647              	.LBE16:
 290:os/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 648              		.loc 1 290 9 is_stmt 1 discriminator 1 view .LVU214
 290:os/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 649              		.loc 1 290 9 discriminator 1 view .LVU215
 290:os/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 650              		.loc 1 290 9 discriminator 1 view .LVU216
 651 002c FEE7     		b	.L44
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 26


 652              	.L43:
 290:os/portable/MemMang/heap_4.c ****         configASSERT( pxLink->pxNextFreeBlock == NULL );
 653              		.loc 1 290 73 discriminator 2 view .LVU217
 291:os/portable/MemMang/heap_4.c **** 
 654              		.loc 1 291 9 discriminator 2 view .LVU218
 655 002e 50F8081C 		ldr	r1, [r0, #-8]
 656 0032 51B1     		cbz	r1, .L45
 291:os/portable/MemMang/heap_4.c **** 
 657              		.loc 1 291 9 view .LVU219
 658              	.LBB18:
 659              	.LBI18:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 660              		.loc 2 193 34 view .LVU220
 661              	.LBB19:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 662              		.loc 2 195 9 view .LVU221
 663              		.loc 2 197 9 view .LVU222
 664              		.syntax unified
 665              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 666 0034 4FF05003 			mov r3, #80												
 667 0038 72B6     		cpsid i													
 668 003a 83F31188 		msr basepri, r3											
 669 003e BFF36F8F 		isb														
 670 0042 BFF34F8F 		dsb														
 671 0046 62B6     		cpsie i													
 672              	
 673              	@ 0 "" 2
 674              	.LVL52:
 675              		.thumb
 676              		.syntax unified
 677              	.L46:
 678              		.loc 2 197 9 is_stmt 0 view .LVU223
 679              	.LBE19:
 680              	.LBE18:
 291:os/portable/MemMang/heap_4.c **** 
 681              		.loc 1 291 9 is_stmt 1 discriminator 2 view .LVU224
 291:os/portable/MemMang/heap_4.c **** 
 682              		.loc 1 291 9 discriminator 2 view .LVU225
 291:os/portable/MemMang/heap_4.c **** 
 683              		.loc 1 291 9 discriminator 2 view .LVU226
 684 0048 FEE7     		b	.L46
 685              	.L45:
 291:os/portable/MemMang/heap_4.c **** 
 686              		.loc 1 291 56 view .LVU227
 293:os/portable/MemMang/heap_4.c ****         {
 687              		.loc 1 293 9 view .LVU228
 295:os/portable/MemMang/heap_4.c ****             {
 688              		.loc 1 295 13 view .LVU229
 299:os/portable/MemMang/heap_4.c **** 
 689              		.loc 1 299 17 view .LVU230
 299:os/portable/MemMang/heap_4.c **** 
 690              		.loc 1 299 36 is_stmt 0 view .LVU231
 691 004a 23EA0203 		bic	r3, r3, r2
 692 004e 40F8043C 		str	r3, [r0, #-4]
 301:os/portable/MemMang/heap_4.c ****                 {
 693              		.loc 1 301 17 is_stmt 1 view .LVU232
 694 0052 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 27


 695              	.LVL53:
 304:os/portable/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 696              		.loc 1 304 21 view .LVU233
 304:os/portable/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 697              		.loc 1 304 50 is_stmt 0 view .LVU234
 698 0056 54F8041C 		ldr	r1, [r4, #-4]
 304:os/portable/MemMang/heap_4.c ****                     traceFREE( pv, pxLink->xBlockSize );
 699              		.loc 1 304 41 view .LVU235
 700 005a 084A     		ldr	r2, .L51+4
 701 005c 1368     		ldr	r3, [r2]
 702 005e 0B44     		add	r3, r3, r1
 703 0060 1360     		str	r3, [r2]
 305:os/portable/MemMang/heap_4.c ****                     prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 704              		.loc 1 305 56 is_stmt 1 view .LVU236
 306:os/portable/MemMang/heap_4.c ****                     xNumberOfSuccessfulFrees++;
 705              		.loc 1 306 21 view .LVU237
 706 0062 2846     		mov	r0, r5
 707 0064 FFF7FEFF 		bl	prvInsertBlockIntoFreeList
 708              	.LVL54:
 307:os/portable/MemMang/heap_4.c ****                 }
 709              		.loc 1 307 21 view .LVU238
 307:os/portable/MemMang/heap_4.c ****                 }
 710              		.loc 1 307 45 is_stmt 0 view .LVU239
 711 0068 054A     		ldr	r2, .L51+8
 712 006a 1368     		ldr	r3, [r2]
 713 006c 0133     		adds	r3, r3, #1
 714 006e 1360     		str	r3, [r2]
 309:os/portable/MemMang/heap_4.c ****             }
 715              		.loc 1 309 17 is_stmt 1 view .LVU240
 309:os/portable/MemMang/heap_4.c ****             }
 716              		.loc 1 309 26 is_stmt 0 view .LVU241
 717 0070 FFF7FEFF 		bl	xTaskResumeAll
 718              	.LVL55:
 318:os/portable/MemMang/heap_4.c ****         }
 719              		.loc 1 318 37 is_stmt 1 view .LVU242
 321:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 720              		.loc 1 321 1 is_stmt 0 view .LVU243
 721 0074 38BD     		pop	{r3, r4, r5, pc}
 722              	.LVL56:
 723              	.L48:
 724              	.LCFI5:
 725              		.cfi_def_cfa_offset 0
 726              		.cfi_restore 3
 727              		.cfi_restore 4
 728              		.cfi_restore 5
 729              		.cfi_restore 14
 321:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 730              		.loc 1 321 1 view .LVU244
 731 0076 7047     		bx	lr
 732              	.L52:
 733              		.align	2
 734              	.L51:
 735 0078 00000000 		.word	.LANCHOR4
 736 007c 00000000 		.word	.LANCHOR3
 737 0080 00000000 		.word	.LANCHOR6
 738              		.cfi_endproc
 739              	.LFE5:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 28


 741              		.section	.text.xPortGetFreeHeapSize,"ax",%progbits
 742              		.align	1
 743              		.global	xPortGetFreeHeapSize
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 747              		.fpu fpv5-d16
 749              	xPortGetFreeHeapSize:
 750              	.LFB6:
 325:os/portable/MemMang/heap_4.c ****     return xFreeBytesRemaining;
 751              		.loc 1 325 1 is_stmt 1 view -0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755              		@ link register save eliminated.
 326:os/portable/MemMang/heap_4.c **** }
 756              		.loc 1 326 5 view .LVU246
 327:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 757              		.loc 1 327 1 is_stmt 0 view .LVU247
 758 0000 014B     		ldr	r3, .L54
 759 0002 1868     		ldr	r0, [r3]
 760 0004 7047     		bx	lr
 761              	.L55:
 762 0006 00BF     		.align	2
 763              	.L54:
 764 0008 00000000 		.word	.LANCHOR3
 765              		.cfi_endproc
 766              	.LFE6:
 768              		.section	.text.xPortGetMinimumEverFreeHeapSize,"ax",%progbits
 769              		.align	1
 770              		.global	xPortGetMinimumEverFreeHeapSize
 771              		.syntax unified
 772              		.thumb
 773              		.thumb_func
 774              		.fpu fpv5-d16
 776              	xPortGetMinimumEverFreeHeapSize:
 777              	.LFB7:
 331:os/portable/MemMang/heap_4.c ****     return xMinimumEverFreeBytesRemaining;
 778              		.loc 1 331 1 is_stmt 1 view -0
 779              		.cfi_startproc
 780              		@ args = 0, pretend = 0, frame = 0
 781              		@ frame_needed = 0, uses_anonymous_args = 0
 782              		@ link register save eliminated.
 332:os/portable/MemMang/heap_4.c **** }
 783              		.loc 1 332 5 view .LVU249
 333:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 784              		.loc 1 333 1 is_stmt 0 view .LVU250
 785 0000 014B     		ldr	r3, .L57
 786 0002 1868     		ldr	r0, [r3]
 787 0004 7047     		bx	lr
 788              	.L58:
 789 0006 00BF     		.align	2
 790              	.L57:
 791 0008 00000000 		.word	.LANCHOR2
 792              		.cfi_endproc
 793              	.LFE7:
 795              		.section	.text.vPortInitialiseBlocks,"ax",%progbits
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 29


 796              		.align	1
 797              		.global	vPortInitialiseBlocks
 798              		.syntax unified
 799              		.thumb
 800              		.thumb_func
 801              		.fpu fpv5-d16
 803              	vPortInitialiseBlocks:
 804              	.LFB8:
 337:os/portable/MemMang/heap_4.c ****     /* This just exists to keep the linker quiet. */
 805              		.loc 1 337 1 is_stmt 1 view -0
 806              		.cfi_startproc
 807              		@ args = 0, pretend = 0, frame = 0
 808              		@ frame_needed = 0, uses_anonymous_args = 0
 809              		@ link register save eliminated.
 339:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 810              		.loc 1 339 1 view .LVU252
 811 0000 7047     		bx	lr
 812              		.cfi_endproc
 813              	.LFE8:
 815              		.section	.text.vPortGetHeapStats,"ax",%progbits
 816              		.align	1
 817              		.global	vPortGetHeapStats
 818              		.syntax unified
 819              		.thumb
 820              		.thumb_func
 821              		.fpu fpv5-d16
 823              	vPortGetHeapStats:
 824              	.LVL57:
 825              	.LFB11:
 451:os/portable/MemMang/heap_4.c **** /*-----------------------------------------------------------*/
 452:os/portable/MemMang/heap_4.c **** 
 453:os/portable/MemMang/heap_4.c **** void vPortGetHeapStats( HeapStats_t * pxHeapStats )
 454:os/portable/MemMang/heap_4.c **** {
 826              		.loc 1 454 1 view -0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830              		.loc 1 454 1 is_stmt 0 view .LVU254
 831 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 832              	.LCFI6:
 833              		.cfi_def_cfa_offset 24
 834              		.cfi_offset 3, -24
 835              		.cfi_offset 4, -20
 836              		.cfi_offset 5, -16
 837              		.cfi_offset 6, -12
 838              		.cfi_offset 7, -8
 839              		.cfi_offset 14, -4
 840 0002 0746     		mov	r7, r0
 455:os/portable/MemMang/heap_4.c ****     BlockLink_t * pxBlock;
 841              		.loc 1 455 5 is_stmt 1 view .LVU255
 456:os/portable/MemMang/heap_4.c ****     size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable
 842              		.loc 1 456 5 view .LVU256
 843              	.LVL58:
 457:os/portable/MemMang/heap_4.c **** 
 458:os/portable/MemMang/heap_4.c ****     vTaskSuspendAll();
 844              		.loc 1 458 5 view .LVU257
 845 0004 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 30


 846              	.LVL59:
 459:os/portable/MemMang/heap_4.c ****     {
 460:os/portable/MemMang/heap_4.c ****         pxBlock = xStart.pxNextFreeBlock;
 847              		.loc 1 460 9 view .LVU258
 848              		.loc 1 460 17 is_stmt 0 view .LVU259
 849 0008 174B     		ldr	r3, .L69
 850 000a 1B68     		ldr	r3, [r3]
 851              	.LVL60:
 461:os/portable/MemMang/heap_4.c **** 
 462:os/portable/MemMang/heap_4.c ****         /* pxBlock will be NULL if the heap has not been initialised.  The heap
 463:os/portable/MemMang/heap_4.c ****          * is initialised automatically when the first allocation is made. */
 464:os/portable/MemMang/heap_4.c ****         if( pxBlock != NULL )
 852              		.loc 1 464 9 is_stmt 1 view .LVU260
 853              		.loc 1 464 11 is_stmt 0 view .LVU261
 854 000c 93B1     		cbz	r3, .L65
 456:os/portable/MemMang/heap_4.c **** 
 855              		.loc 1 456 39 view .LVU262
 856 000e 4FF0FF36 		mov	r6, #-1
 456:os/portable/MemMang/heap_4.c **** 
 857              		.loc 1 456 25 view .LVU263
 858 0012 0025     		movs	r5, #0
 456:os/portable/MemMang/heap_4.c **** 
 859              		.loc 1 456 12 view .LVU264
 860 0014 2C46     		mov	r4, r5
 861 0016 04E0     		b	.L64
 862              	.LVL61:
 863              	.L63:
 465:os/portable/MemMang/heap_4.c ****         {
 466:os/portable/MemMang/heap_4.c ****             do
 467:os/portable/MemMang/heap_4.c ****             {
 468:os/portable/MemMang/heap_4.c ****                 /* Increment the number of blocks and record the largest block seen
 469:os/portable/MemMang/heap_4.c ****                  * so far. */
 470:os/portable/MemMang/heap_4.c ****                 xBlocks++;
 471:os/portable/MemMang/heap_4.c **** 
 472:os/portable/MemMang/heap_4.c ****                 if( pxBlock->xBlockSize > xMaxSize )
 473:os/portable/MemMang/heap_4.c ****                 {
 474:os/portable/MemMang/heap_4.c ****                     xMaxSize = pxBlock->xBlockSize;
 475:os/portable/MemMang/heap_4.c ****                 }
 476:os/portable/MemMang/heap_4.c **** 
 477:os/portable/MemMang/heap_4.c ****                 if( pxBlock->xBlockSize < xMinSize )
 478:os/portable/MemMang/heap_4.c ****                 {
 479:os/portable/MemMang/heap_4.c ****                     xMinSize = pxBlock->xBlockSize;
 480:os/portable/MemMang/heap_4.c ****                 }
 481:os/portable/MemMang/heap_4.c **** 
 482:os/portable/MemMang/heap_4.c ****                 /* Move to the next block in the chain until the last block is
 483:os/portable/MemMang/heap_4.c ****                  * reached. */
 484:os/portable/MemMang/heap_4.c ****                 pxBlock = pxBlock->pxNextFreeBlock;
 864              		.loc 1 484 17 is_stmt 1 view .LVU265
 865              		.loc 1 484 25 is_stmt 0 view .LVU266
 866 0018 1B68     		ldr	r3, [r3]
 867              	.LVL62:
 485:os/portable/MemMang/heap_4.c ****             } while( pxBlock != pxEnd );
 868              		.loc 1 485 20 is_stmt 1 view .LVU267
 869              		.loc 1 485 30 is_stmt 0 view .LVU268
 870 001a 144A     		ldr	r2, .L69+4
 871 001c 1268     		ldr	r2, [r2]
 872              		.loc 1 485 13 view .LVU269
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 31


 873 001e 9A42     		cmp	r2, r3
 874 0020 0CD0     		beq	.L61
 875              	.LVL63:
 876              	.L64:
 466:os/portable/MemMang/heap_4.c ****             {
 877              		.loc 1 466 13 is_stmt 1 view .LVU270
 470:os/portable/MemMang/heap_4.c **** 
 878              		.loc 1 470 17 view .LVU271
 470:os/portable/MemMang/heap_4.c **** 
 879              		.loc 1 470 24 is_stmt 0 view .LVU272
 880 0022 0134     		adds	r4, r4, #1
 881              	.LVL64:
 472:os/portable/MemMang/heap_4.c ****                 {
 882              		.loc 1 472 17 is_stmt 1 view .LVU273
 472:os/portable/MemMang/heap_4.c ****                 {
 883              		.loc 1 472 28 is_stmt 0 view .LVU274
 884 0024 5A68     		ldr	r2, [r3, #4]
 472:os/portable/MemMang/heap_4.c ****                 {
 885              		.loc 1 472 19 view .LVU275
 886 0026 AA42     		cmp	r2, r5
 887 0028 00D9     		bls	.L62
 474:os/portable/MemMang/heap_4.c ****                 }
 888              		.loc 1 474 30 view .LVU276
 889 002a 1546     		mov	r5, r2
 890              	.LVL65:
 891              	.L62:
 477:os/portable/MemMang/heap_4.c ****                 {
 892              		.loc 1 477 17 is_stmt 1 view .LVU277
 477:os/portable/MemMang/heap_4.c ****                 {
 893              		.loc 1 477 19 is_stmt 0 view .LVU278
 894 002c B242     		cmp	r2, r6
 895 002e F3D2     		bcs	.L63
 479:os/portable/MemMang/heap_4.c ****                 }
 896              		.loc 1 479 30 view .LVU279
 897 0030 1646     		mov	r6, r2
 898              	.LVL66:
 479:os/portable/MemMang/heap_4.c ****                 }
 899              		.loc 1 479 30 view .LVU280
 900 0032 F1E7     		b	.L63
 901              	.LVL67:
 902              	.L65:
 456:os/portable/MemMang/heap_4.c **** 
 903              		.loc 1 456 39 view .LVU281
 904 0034 4FF0FF36 		mov	r6, #-1
 456:os/portable/MemMang/heap_4.c **** 
 905              		.loc 1 456 25 view .LVU282
 906 0038 0025     		movs	r5, #0
 456:os/portable/MemMang/heap_4.c **** 
 907              		.loc 1 456 12 view .LVU283
 908 003a 2C46     		mov	r4, r5
 909              	.LVL68:
 910              	.L61:
 486:os/portable/MemMang/heap_4.c ****         }
 487:os/portable/MemMang/heap_4.c ****     }
 488:os/portable/MemMang/heap_4.c ****     ( void ) xTaskResumeAll();
 911              		.loc 1 488 5 is_stmt 1 view .LVU284
 912              		.loc 1 488 14 is_stmt 0 view .LVU285
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 32


 913 003c FFF7FEFF 		bl	xTaskResumeAll
 914              	.LVL69:
 489:os/portable/MemMang/heap_4.c **** 
 490:os/portable/MemMang/heap_4.c ****     pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 915              		.loc 1 490 5 is_stmt 1 view .LVU286
 916              		.loc 1 490 49 is_stmt 0 view .LVU287
 917 0040 7D60     		str	r5, [r7, #4]
 491:os/portable/MemMang/heap_4.c ****     pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 918              		.loc 1 491 5 is_stmt 1 view .LVU288
 919              		.loc 1 491 50 is_stmt 0 view .LVU289
 920 0042 BE60     		str	r6, [r7, #8]
 492:os/portable/MemMang/heap_4.c ****     pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 921              		.loc 1 492 5 is_stmt 1 view .LVU290
 922              		.loc 1 492 38 is_stmt 0 view .LVU291
 923 0044 FC60     		str	r4, [r7, #12]
 493:os/portable/MemMang/heap_4.c **** 
 494:os/portable/MemMang/heap_4.c ****     taskENTER_CRITICAL();
 924              		.loc 1 494 5 is_stmt 1 view .LVU292
 925 0046 FFF7FEFF 		bl	vPortEnterCritical
 926              	.LVL70:
 495:os/portable/MemMang/heap_4.c ****     {
 496:os/portable/MemMang/heap_4.c ****         pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 927              		.loc 1 496 9 view .LVU293
 928              		.loc 1 496 49 is_stmt 0 view .LVU294
 929 004a 094B     		ldr	r3, .L69+8
 930 004c 1B68     		ldr	r3, [r3]
 931 004e 3B60     		str	r3, [r7]
 497:os/portable/MemMang/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 932              		.loc 1 497 9 is_stmt 1 view .LVU295
 933              		.loc 1 497 53 is_stmt 0 view .LVU296
 934 0050 084B     		ldr	r3, .L69+12
 935 0052 1B68     		ldr	r3, [r3]
 936 0054 7B61     		str	r3, [r7, #20]
 498:os/portable/MemMang/heap_4.c ****         pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 937              		.loc 1 498 9 is_stmt 1 view .LVU297
 938              		.loc 1 498 47 is_stmt 0 view .LVU298
 939 0056 084B     		ldr	r3, .L69+16
 940 0058 1B68     		ldr	r3, [r3]
 941 005a BB61     		str	r3, [r7, #24]
 499:os/portable/MemMang/heap_4.c ****         pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 942              		.loc 1 499 9 is_stmt 1 view .LVU299
 943              		.loc 1 499 53 is_stmt 0 view .LVU300
 944 005c 074B     		ldr	r3, .L69+20
 945 005e 1B68     		ldr	r3, [r3]
 946 0060 3B61     		str	r3, [r7, #16]
 500:os/portable/MemMang/heap_4.c ****     }
 501:os/portable/MemMang/heap_4.c ****     taskEXIT_CRITICAL();
 947              		.loc 1 501 5 is_stmt 1 view .LVU301
 948 0062 FFF7FEFF 		bl	vPortExitCritical
 949              	.LVL71:
 502:os/portable/MemMang/heap_4.c **** }
 950              		.loc 1 502 1 is_stmt 0 view .LVU302
 951 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 952              	.LVL72:
 953              	.L70:
 954              		.loc 1 502 1 view .LVU303
 955              		.align	2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 33


 956              	.L69:
 957 0068 00000000 		.word	.LANCHOR0
 958 006c 00000000 		.word	.LANCHOR1
 959 0070 00000000 		.word	.LANCHOR3
 960 0074 00000000 		.word	.LANCHOR5
 961 0078 00000000 		.word	.LANCHOR6
 962 007c 00000000 		.word	.LANCHOR2
 963              		.cfi_endproc
 964              	.LFE11:
 966              		.section	.bss.pxEnd,"aw",%nobits
 967              		.align	2
 968              		.set	.LANCHOR1,. + 0
 971              	pxEnd:
 972 0000 00000000 		.space	4
 973              		.section	.bss.ucHeap,"aw",%nobits
 974              		.align	2
 977              	ucHeap:
 978 0000 00000000 		.space	15360
 978      00000000 
 978      00000000 
 978      00000000 
 978      00000000 
 979              		.section	.bss.xBlockAllocatedBit,"aw",%nobits
 980              		.align	2
 981              		.set	.LANCHOR4,. + 0
 984              	xBlockAllocatedBit:
 985 0000 00000000 		.space	4
 986              		.section	.bss.xFreeBytesRemaining,"aw",%nobits
 987              		.align	2
 988              		.set	.LANCHOR3,. + 0
 991              	xFreeBytesRemaining:
 992 0000 00000000 		.space	4
 993              		.section	.bss.xMinimumEverFreeBytesRemaining,"aw",%nobits
 994              		.align	2
 995              		.set	.LANCHOR2,. + 0
 998              	xMinimumEverFreeBytesRemaining:
 999 0000 00000000 		.space	4
 1000              		.section	.bss.xNumberOfSuccessfulAllocations,"aw",%nobits
 1001              		.align	2
 1002              		.set	.LANCHOR5,. + 0
 1005              	xNumberOfSuccessfulAllocations:
 1006 0000 00000000 		.space	4
 1007              		.section	.bss.xNumberOfSuccessfulFrees,"aw",%nobits
 1008              		.align	2
 1009              		.set	.LANCHOR6,. + 0
 1012              	xNumberOfSuccessfulFrees:
 1013 0000 00000000 		.space	4
 1014              		.section	.bss.xStart,"aw",%nobits
 1015              		.align	2
 1016              		.set	.LANCHOR0,. + 0
 1019              	xStart:
 1020 0000 00000000 		.space	8
 1020      00000000 
 1021              		.text
 1022              	.Letext0:
 1023              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 1024              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 34


 1025              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1026              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1027              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1028              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1029              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 1030              		.file 10 "user/Inc/FreeRTOSConfig.h"
 1031              		.file 11 "os/include/portable.h"
 1032              		.file 12 "os/include/task.h"
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s 			page 35


DEFINED SYMBOLS
                            *ABS*:00000000 heap_4.c
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:17     .text.prvHeapInit:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:24     .text.prvHeapInit:00000000 prvHeapInit
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:130    .text.prvHeapInit:0000004c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:977    .bss.ucHeap:00000000 ucHeap
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:140    .text.prvInsertBlockIntoFreeList:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:146    .text.prvInsertBlockIntoFreeList:00000000 prvInsertBlockIntoFreeList
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:264    .text.prvInsertBlockIntoFreeList:00000050 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:270    .text.pvPortMalloc:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:277    .text.pvPortMalloc:00000000 pvPortMalloc
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:574    .text.pvPortMalloc:00000100 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:584    .text.vPortFree:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:591    .text.vPortFree:00000000 vPortFree
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:735    .text.vPortFree:00000078 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:742    .text.xPortGetFreeHeapSize:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:749    .text.xPortGetFreeHeapSize:00000000 xPortGetFreeHeapSize
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:764    .text.xPortGetFreeHeapSize:00000008 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:769    .text.xPortGetMinimumEverFreeHeapSize:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:776    .text.xPortGetMinimumEverFreeHeapSize:00000000 xPortGetMinimumEverFreeHeapSize
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:791    .text.xPortGetMinimumEverFreeHeapSize:00000008 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:796    .text.vPortInitialiseBlocks:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:803    .text.vPortInitialiseBlocks:00000000 vPortInitialiseBlocks
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:816    .text.vPortGetHeapStats:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:823    .text.vPortGetHeapStats:00000000 vPortGetHeapStats
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:957    .text.vPortGetHeapStats:00000068 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:967    .bss.pxEnd:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:971    .bss.pxEnd:00000000 pxEnd
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:974    .bss.ucHeap:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:980    .bss.xBlockAllocatedBit:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:984    .bss.xBlockAllocatedBit:00000000 xBlockAllocatedBit
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:987    .bss.xFreeBytesRemaining:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:991    .bss.xFreeBytesRemaining:00000000 xFreeBytesRemaining
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:994    .bss.xMinimumEverFreeBytesRemaining:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:998    .bss.xMinimumEverFreeBytesRemaining:00000000 xMinimumEverFreeBytesRemaining
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:1001   .bss.xNumberOfSuccessfulAllocations:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:1005   .bss.xNumberOfSuccessfulAllocations:00000000 xNumberOfSuccessfulAllocations
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:1008   .bss.xNumberOfSuccessfulFrees:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:1012   .bss.xNumberOfSuccessfulFrees:00000000 xNumberOfSuccessfulFrees
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:1015   .bss.xStart:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\ccGjMo9i.s:1019   .bss.xStart:00000000 xStart

UNDEFINED SYMBOLS
vTaskSuspendAll
xTaskResumeAll
vPortEnterCritical
vPortExitCritical
