ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"tasks.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  17              		.align	1
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LVL0:
  26              	.LFB16:
  27              		.file 1 "os/tasks.c"
   1:os/tasks.c    **** /*
   2:os/tasks.c    ****  * FreeRTOS Kernel V10.4.3
   3:os/tasks.c    ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:os/tasks.c    ****  *
   5:os/tasks.c    ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:os/tasks.c    ****  * this software and associated documentation files (the "Software"), to deal in
   7:os/tasks.c    ****  * the Software without restriction, including without limitation the rights to
   8:os/tasks.c    ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:os/tasks.c    ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:os/tasks.c    ****  * subject to the following conditions:
  11:os/tasks.c    ****  *
  12:os/tasks.c    ****  * The above copyright notice and this permission notice shall be included in all
  13:os/tasks.c    ****  * copies or substantial portions of the Software.
  14:os/tasks.c    ****  *
  15:os/tasks.c    ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:os/tasks.c    ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:os/tasks.c    ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:os/tasks.c    ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:os/tasks.c    ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:os/tasks.c    ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:os/tasks.c    ****  *
  22:os/tasks.c    ****  * https://www.FreeRTOS.org
  23:os/tasks.c    ****  * https://github.com/FreeRTOS
  24:os/tasks.c    ****  *
  25:os/tasks.c    ****  */
  26:os/tasks.c    **** 
  27:os/tasks.c    **** /* Standard includes. */
  28:os/tasks.c    **** #include <stdlib.h>
  29:os/tasks.c    **** #include <string.h>
  30:os/tasks.c    **** 
  31:os/tasks.c    **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 2


  32:os/tasks.c    ****  * all the API functions to use the MPU wrappers.  That should only be done when
  33:os/tasks.c    ****  * task.h is included from an application file. */
  34:os/tasks.c    **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:os/tasks.c    **** 
  36:os/tasks.c    **** /* FreeRTOS includes. */
  37:os/tasks.c    **** #include "FreeRTOS.h"
  38:os/tasks.c    **** #include "task.h"
  39:os/tasks.c    **** #include "timers.h"
  40:os/tasks.c    **** #include "stack_macros.h"
  41:os/tasks.c    **** 
  42:os/tasks.c    **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  43:os/tasks.c    ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  44:os/tasks.c    ****  * for the header files above, but not in this file, in order to generate the
  45:os/tasks.c    ****  * correct privileged Vs unprivileged linkage and placement. */
  46:os/tasks.c    **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  47:os/tasks.c    **** 
  48:os/tasks.c    **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  49:os/tasks.c    ****  * functions but without including stdio.h here. */
  50:os/tasks.c    **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  51:os/tasks.c    **** 
  52:os/tasks.c    **** /* At the bottom of this file are two optional functions that can be used
  53:os/tasks.c    ****  * to generate human readable text from the raw data generated by the
  54:os/tasks.c    ****  * uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:os/tasks.c    ****  * for convenience only, and are NOT considered part of the kernel. */
  56:os/tasks.c    ****     #include <stdio.h>
  57:os/tasks.c    **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:os/tasks.c    **** 
  59:os/tasks.c    **** #if ( configUSE_PREEMPTION == 0 )
  60:os/tasks.c    **** 
  61:os/tasks.c    **** /* If the cooperative scheduler is being used then a yield should not be
  62:os/tasks.c    ****  * performed just because a higher priority task has been woken. */
  63:os/tasks.c    ****     #define taskYIELD_IF_USING_PREEMPTION()
  64:os/tasks.c    **** #else
  65:os/tasks.c    ****     #define taskYIELD_IF_USING_PREEMPTION()    portYIELD_WITHIN_API()
  66:os/tasks.c    **** #endif
  67:os/tasks.c    **** 
  68:os/tasks.c    **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  69:os/tasks.c    **** #define taskNOT_WAITING_NOTIFICATION              ( ( uint8_t ) 0 ) /* Must be zero as it is the in
  70:os/tasks.c    **** #define taskWAITING_NOTIFICATION                  ( ( uint8_t ) 1 )
  71:os/tasks.c    **** #define taskNOTIFICATION_RECEIVED                 ( ( uint8_t ) 2 )
  72:os/tasks.c    **** 
  73:os/tasks.c    **** /*
  74:os/tasks.c    ****  * The value used to fill the stack of a task when the task is created.  This
  75:os/tasks.c    ****  * is used purely for checking the high water mark for tasks.
  76:os/tasks.c    ****  */
  77:os/tasks.c    **** #define tskSTACK_FILL_BYTE                        ( 0xa5U )
  78:os/tasks.c    **** 
  79:os/tasks.c    **** /* Bits used to record how a task's stack and TCB were allocated. */
  80:os/tasks.c    **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB    ( ( uint8_t ) 0 )
  81:os/tasks.c    **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY        ( ( uint8_t ) 1 )
  82:os/tasks.c    **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB     ( ( uint8_t ) 2 )
  83:os/tasks.c    **** 
  84:os/tasks.c    **** /* If any of the following are set then task stacks are filled with a known
  85:os/tasks.c    ****  * value so the high water mark can be determined.  If none of the following are
  86:os/tasks.c    ****  * set then don't fill the stack so there is no unnecessary dependency on memset. */
  87:os/tasks.c    **** #if ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
  88:os/tasks.c    ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    1
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 3


  89:os/tasks.c    **** #else
  90:os/tasks.c    ****     #define tskSET_NEW_STACKS_TO_KNOWN_VALUE    0
  91:os/tasks.c    **** #endif
  92:os/tasks.c    **** 
  93:os/tasks.c    **** /*
  94:os/tasks.c    ****  * Macros used by vListTask to indicate which state a task is in.
  95:os/tasks.c    ****  */
  96:os/tasks.c    **** #define tskRUNNING_CHAR      ( 'X' )
  97:os/tasks.c    **** #define tskBLOCKED_CHAR      ( 'B' )
  98:os/tasks.c    **** #define tskREADY_CHAR        ( 'R' )
  99:os/tasks.c    **** #define tskDELETED_CHAR      ( 'D' )
 100:os/tasks.c    **** #define tskSUSPENDED_CHAR    ( 'S' )
 101:os/tasks.c    **** 
 102:os/tasks.c    **** /*
 103:os/tasks.c    ****  * Some kernel aware debuggers require the data the debugger needs access to to
 104:os/tasks.c    ****  * be global, rather than file scope.
 105:os/tasks.c    ****  */
 106:os/tasks.c    **** #ifdef portREMOVE_STATIC_QUALIFIER
 107:os/tasks.c    ****     #define static
 108:os/tasks.c    **** #endif
 109:os/tasks.c    **** 
 110:os/tasks.c    **** /* The name allocated to the Idle task.  This can be overridden by defining
 111:os/tasks.c    ****  * configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 112:os/tasks.c    **** #ifndef configIDLE_TASK_NAME
 113:os/tasks.c    ****     #define configIDLE_TASK_NAME    "IDLE"
 114:os/tasks.c    **** #endif
 115:os/tasks.c    **** 
 116:os/tasks.c    **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 117:os/tasks.c    **** 
 118:os/tasks.c    **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 119:os/tasks.c    ****  * performed in a generic way that is not optimised to any particular
 120:os/tasks.c    ****  * microcontroller architecture. */
 121:os/tasks.c    **** 
 122:os/tasks.c    **** /* uxTopReadyPriority holds the priority of the highest priority ready
 123:os/tasks.c    ****  * state task. */
 124:os/tasks.c    ****     #define taskRECORD_READY_PRIORITY( uxPriority ) \
 125:os/tasks.c    ****     {                                               \
 126:os/tasks.c    ****         if( ( uxPriority ) > uxTopReadyPriority )   \
 127:os/tasks.c    ****         {                                           \
 128:os/tasks.c    ****             uxTopReadyPriority = ( uxPriority );    \
 129:os/tasks.c    ****         }                                           \
 130:os/tasks.c    ****     } /* taskRECORD_READY_PRIORITY */
 131:os/tasks.c    **** 
 132:os/tasks.c    **** /*-----------------------------------------------------------*/
 133:os/tasks.c    **** 
 134:os/tasks.c    ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                \
 135:os/tasks.c    ****     {                                                                         \
 136:os/tasks.c    ****         UBaseType_t uxTopPriority = uxTopReadyPriority;                       \
 137:os/tasks.c    ****                                                                               \
 138:os/tasks.c    ****         /* Find the highest priority queue that contains ready tasks. */      \
 139:os/tasks.c    ****         while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) ) \
 140:os/tasks.c    ****         {                                                                     \
 141:os/tasks.c    ****             configASSERT( uxTopPriority );                                    \
 142:os/tasks.c    ****             --uxTopPriority;                                                  \
 143:os/tasks.c    ****         }                                                                     \
 144:os/tasks.c    ****                                                                               \
 145:os/tasks.c    ****         /* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of \
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 4


 146:os/tasks.c    ****          * the  same priority get an equal share of the processor time. */                    \
 147:os/tasks.c    ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) ); \
 148:os/tasks.c    ****         uxTopReadyPriority = uxTopPriority;                                                   \
 149:os/tasks.c    ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK */
 150:os/tasks.c    **** 
 151:os/tasks.c    **** /*-----------------------------------------------------------*/
 152:os/tasks.c    **** 
 153:os/tasks.c    **** /* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 154:os/tasks.c    ****  * they are only required when a port optimised method of task selection is
 155:os/tasks.c    ****  * being used. */
 156:os/tasks.c    ****     #define taskRESET_READY_PRIORITY( uxPriority )
 157:os/tasks.c    ****     #define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 158:os/tasks.c    **** 
 159:os/tasks.c    **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 160:os/tasks.c    **** 
 161:os/tasks.c    **** /* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 162:os/tasks.c    ****  * performed in a way that is tailored to the particular microcontroller
 163:os/tasks.c    ****  * architecture being used. */
 164:os/tasks.c    **** 
 165:os/tasks.c    **** /* A port optimised version is provided.  Call the port defined macros. */
 166:os/tasks.c    ****     #define taskRECORD_READY_PRIORITY( uxPriority )    portRECORD_READY_PRIORITY( uxPriority, uxTop
 167:os/tasks.c    **** 
 168:os/tasks.c    **** /*-----------------------------------------------------------*/
 169:os/tasks.c    **** 
 170:os/tasks.c    ****     #define taskSELECT_HIGHEST_PRIORITY_TASK()                                                  \
 171:os/tasks.c    ****     {                                                                                           \
 172:os/tasks.c    ****         UBaseType_t uxTopPriority;                                                              \
 173:os/tasks.c    ****                                                                                                 \
 174:os/tasks.c    ****         /* Find the highest priority list that contains ready tasks. */                         \
 175:os/tasks.c    ****         portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );                          \
 176:os/tasks.c    ****         configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 ); \
 177:os/tasks.c    ****         listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );   \
 178:os/tasks.c    ****     } /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 179:os/tasks.c    **** 
 180:os/tasks.c    **** /*-----------------------------------------------------------*/
 181:os/tasks.c    **** 
 182:os/tasks.c    **** /* A port optimised version is provided, call it only if the TCB being reset
 183:os/tasks.c    ****  * is being referenced from a ready list.  If it is referenced from a delayed
 184:os/tasks.c    ****  * or suspended list then it won't be in a ready list. */
 185:os/tasks.c    ****     #define taskRESET_READY_PRIORITY( uxPriority )                                                 
 186:os/tasks.c    ****     {                                                                                              
 187:os/tasks.c    ****         if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 
 188:os/tasks.c    ****         {                                                                                          
 189:os/tasks.c    ****             portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );                    
 190:os/tasks.c    ****         }                                                                                          
 191:os/tasks.c    ****     }
 192:os/tasks.c    **** 
 193:os/tasks.c    **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:os/tasks.c    **** 
 195:os/tasks.c    **** /*-----------------------------------------------------------*/
 196:os/tasks.c    **** 
 197:os/tasks.c    **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 198:os/tasks.c    ****  * count overflows. */
 199:os/tasks.c    **** #define taskSWITCH_DELAYED_LISTS()                                                \
 200:os/tasks.c    ****     {                                                                             \
 201:os/tasks.c    ****         List_t * pxTemp;                                                          \
 202:os/tasks.c    ****                                                                                   \
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 5


 203:os/tasks.c    ****         /* The delayed tasks list should be empty when the lists are switched. */ \
 204:os/tasks.c    ****         configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );               \
 205:os/tasks.c    ****                                                                                   \
 206:os/tasks.c    ****         pxTemp = pxDelayedTaskList;                                               \
 207:os/tasks.c    ****         pxDelayedTaskList = pxOverflowDelayedTaskList;                            \
 208:os/tasks.c    ****         pxOverflowDelayedTaskList = pxTemp;                                       \
 209:os/tasks.c    ****         xNumOfOverflows++;                                                        \
 210:os/tasks.c    ****         prvResetNextTaskUnblockTime();                                            \
 211:os/tasks.c    ****     }
 212:os/tasks.c    **** 
 213:os/tasks.c    **** /*-----------------------------------------------------------*/
 214:os/tasks.c    **** 
 215:os/tasks.c    **** /*
 216:os/tasks.c    ****  * Place the task represented by pxTCB into the appropriate ready list for
 217:os/tasks.c    ****  * the task.  It is inserted at the end of the list.
 218:os/tasks.c    ****  */
 219:os/tasks.c    **** #define prvAddTaskToReadyList( pxTCB )                                                             
 220:os/tasks.c    ****     traceMOVED_TASK_TO_READY_STATE( pxTCB );                                                       
 221:os/tasks.c    ****     taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );                                            
 222:os/tasks.c    ****     vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem )
 223:os/tasks.c    ****     tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 224:os/tasks.c    **** /*-----------------------------------------------------------*/
 225:os/tasks.c    **** 
 226:os/tasks.c    **** /*
 227:os/tasks.c    ****  * Several functions take a TaskHandle_t parameter that can optionally be NULL,
 228:os/tasks.c    ****  * where NULL is used to indicate that the handle of the currently executing
 229:os/tasks.c    ****  * task should be used in place of the parameter.  This macro simply checks to
 230:os/tasks.c    ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 231:os/tasks.c    ****  */
 232:os/tasks.c    **** #define prvGetTCBFromHandle( pxHandle )    ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle )
 233:os/tasks.c    **** 
 234:os/tasks.c    **** /* The item value of the event list item is normally used to hold the priority
 235:os/tasks.c    ****  * of the task to which it belongs (coded to allow it to be held in reverse
 236:os/tasks.c    ****  * priority order).  However, it is occasionally borrowed for other purposes.  It
 237:os/tasks.c    ****  * is important its value is not updated due to a task priority change while it is
 238:os/tasks.c    ****  * being used for another purpose.  The following bit definition is used to inform
 239:os/tasks.c    ****  * the scheduler that the value should not be changed - in which case it is the
 240:os/tasks.c    ****  * responsibility of whichever module is using the value to ensure it gets set back
 241:os/tasks.c    ****  * to its original value when it is released. */
 242:os/tasks.c    **** #if ( configUSE_16_BIT_TICKS == 1 )
 243:os/tasks.c    ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x8000U
 244:os/tasks.c    **** #else
 245:os/tasks.c    ****     #define taskEVENT_LIST_ITEM_VALUE_IN_USE    0x80000000UL
 246:os/tasks.c    **** #endif
 247:os/tasks.c    **** 
 248:os/tasks.c    **** /*
 249:os/tasks.c    ****  * Task control block.  A task control block (TCB) is allocated for each task,
 250:os/tasks.c    ****  * and stores task state information, including a pointer to the task's context
 251:os/tasks.c    ****  * (the task's run time environment, including register values)
 252:os/tasks.c    ****  */
 253:os/tasks.c    **** typedef struct tskTaskControlBlock       /* The old naming convention is used to prevent breaking k
 254:os/tasks.c    **** {
 255:os/tasks.c    ****     volatile StackType_t * pxTopOfStack; /*< Points to the location of the last item placed on the 
 256:os/tasks.c    **** 
 257:os/tasks.c    ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 258:os/tasks.c    ****         xMPU_SETTINGS xMPUSettings; /*< The MPU settings are defined as part of the port layer.  TH
 259:os/tasks.c    ****     #endif
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 6


 260:os/tasks.c    **** 
 261:os/tasks.c    ****     ListItem_t xStateListItem;                  /*< The list that the state list item of a task is 
 262:os/tasks.c    ****     ListItem_t xEventListItem;                  /*< Used to reference a task from an event list. */
 263:os/tasks.c    ****     UBaseType_t uxPriority;                     /*< The priority of the task.  0 is the lowest prio
 264:os/tasks.c    ****     StackType_t * pxStack;                      /*< Points to the start of the stack. */
 265:os/tasks.c    ****     char pcTaskName[ configMAX_TASK_NAME_LEN ]; /*< Descriptive name given to the task when created
 266:os/tasks.c    **** 
 267:os/tasks.c    ****     #if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 268:os/tasks.c    ****         StackType_t * pxEndOfStack; /*< Points to the highest valid address for the stack. */
 269:os/tasks.c    ****     #endif
 270:os/tasks.c    **** 
 271:os/tasks.c    ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 272:os/tasks.c    ****         UBaseType_t uxCriticalNesting; /*< Holds the critical section nesting depth for ports that 
 273:os/tasks.c    ****     #endif
 274:os/tasks.c    **** 
 275:os/tasks.c    ****     #if ( configUSE_TRACE_FACILITY == 1 )
 276:os/tasks.c    ****         UBaseType_t uxTCBNumber;  /*< Stores a number that increments each time a TCB is created.  
 277:os/tasks.c    ****         UBaseType_t uxTaskNumber; /*< Stores a number specifically for use by third party trace cod
 278:os/tasks.c    ****     #endif
 279:os/tasks.c    **** 
 280:os/tasks.c    ****     #if ( configUSE_MUTEXES == 1 )
 281:os/tasks.c    ****         UBaseType_t uxBasePriority; /*< The priority last assigned to the task - used by the priori
 282:os/tasks.c    ****         UBaseType_t uxMutexesHeld;
 283:os/tasks.c    ****     #endif
 284:os/tasks.c    **** 
 285:os/tasks.c    ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 286:os/tasks.c    ****         TaskHookFunction_t pxTaskTag;
 287:os/tasks.c    ****     #endif
 288:os/tasks.c    **** 
 289:os/tasks.c    ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 290:os/tasks.c    ****         void * pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 291:os/tasks.c    ****     #endif
 292:os/tasks.c    **** 
 293:os/tasks.c    ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 294:os/tasks.c    ****         uint32_t ulRunTimeCounter; /*< Stores the amount of time the task has spent in the Running 
 295:os/tasks.c    ****     #endif
 296:os/tasks.c    **** 
 297:os/tasks.c    ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 298:os/tasks.c    **** 
 299:os/tasks.c    ****         /* Allocate a Newlib reent structure that is specific to this task.
 300:os/tasks.c    ****          * Note Newlib support has been included by popular demand, but is not
 301:os/tasks.c    ****          * used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 302:os/tasks.c    ****          * responsible for resulting newlib operation.  User must be familiar with
 303:os/tasks.c    ****          * newlib and must provide system-wide implementations of the necessary
 304:os/tasks.c    ****          * stubs. Be warned that (at the time of writing) the current newlib design
 305:os/tasks.c    ****          * implements a system-wide malloc() that must be provided with locks.
 306:os/tasks.c    ****          *
 307:os/tasks.c    ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 308:os/tasks.c    ****          * for additional information. */
 309:os/tasks.c    ****         struct  _reent xNewLib_reent;
 310:os/tasks.c    ****     #endif
 311:os/tasks.c    **** 
 312:os/tasks.c    ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 313:os/tasks.c    ****         volatile uint32_t ulNotifiedValue[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 314:os/tasks.c    ****         volatile uint8_t ucNotifyState[ configTASK_NOTIFICATION_ARRAY_ENTRIES ];
 315:os/tasks.c    ****     #endif
 316:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 7


 317:os/tasks.c    ****     /* See the comments in FreeRTOS.h with the definition of
 318:os/tasks.c    ****      * tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 319:os/tasks.c    ****     #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been conso
 320:os/tasks.c    ****         uint8_t ucStaticallyAllocated;                     /*< Set to pdTRUE if the task is a stati
 321:os/tasks.c    ****     #endif
 322:os/tasks.c    **** 
 323:os/tasks.c    ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 324:os/tasks.c    ****         uint8_t ucDelayAborted;
 325:os/tasks.c    ****     #endif
 326:os/tasks.c    **** 
 327:os/tasks.c    ****     #if ( configUSE_POSIX_ERRNO == 1 )
 328:os/tasks.c    ****         int iTaskErrno;
 329:os/tasks.c    ****     #endif
 330:os/tasks.c    **** } tskTCB;
 331:os/tasks.c    **** 
 332:os/tasks.c    **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 333:os/tasks.c    ****  * below to enable the use of older kernel aware debuggers. */
 334:os/tasks.c    **** typedef tskTCB TCB_t;
 335:os/tasks.c    **** 
 336:os/tasks.c    **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 337:os/tasks.c    ****  * which static variables must be declared volatile. */
 338:os/tasks.c    **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 339:os/tasks.c    **** 
 340:os/tasks.c    **** /* Lists for ready and blocked tasks. --------------------
 341:os/tasks.c    ****  * xDelayedTaskList1 and xDelayedTaskList2 could be moved to function scope but
 342:os/tasks.c    ****  * doing so breaks some kernel aware debuggers and debuggers that rely on removing
 343:os/tasks.c    ****  * the static qualifier. */
 344:os/tasks.c    **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ]; /*< Prioritised ready task
 345:os/tasks.c    **** PRIVILEGED_DATA static List_t xDelayedTaskList1;                         /*< Delayed tasks. */
 346:os/tasks.c    **** PRIVILEGED_DATA static List_t xDelayedTaskList2;                         /*< Delayed tasks (two lis
 347:os/tasks.c    **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;              /*< Points to the delayed 
 348:os/tasks.c    **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;      /*< Points to the delayed 
 349:os/tasks.c    **** PRIVILEGED_DATA static List_t xPendingReadyList;                         /*< Tasks that have been r
 350:os/tasks.c    **** 
 351:os/tasks.c    **** #if ( INCLUDE_vTaskDelete == 1 )
 352:os/tasks.c    **** 
 353:os/tasks.c    ****     PRIVILEGED_DATA static List_t xTasksWaitingTermination; /*< Tasks that have been deleted - but 
 354:os/tasks.c    ****     PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 355:os/tasks.c    **** 
 356:os/tasks.c    **** #endif
 357:os/tasks.c    **** 
 358:os/tasks.c    **** #if ( INCLUDE_vTaskSuspend == 1 )
 359:os/tasks.c    **** 
 360:os/tasks.c    ****     PRIVILEGED_DATA static List_t xSuspendedTaskList; /*< Tasks that are currently suspended. */
 361:os/tasks.c    **** 
 362:os/tasks.c    **** #endif
 363:os/tasks.c    **** 
 364:os/tasks.c    **** /* Global POSIX errno. Its value is changed upon context switching to match
 365:os/tasks.c    ****  * the errno of the currently running task. */
 366:os/tasks.c    **** #if ( configUSE_POSIX_ERRNO == 1 )
 367:os/tasks.c    ****     int FreeRTOS_errno = 0;
 368:os/tasks.c    **** #endif
 369:os/tasks.c    **** 
 370:os/tasks.c    **** /* Other file private variables. --------------------------------*/
 371:os/tasks.c    **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks = ( UBaseType_t ) 0U;
 372:os/tasks.c    **** PRIVILEGED_DATA static volatile TickType_t xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 373:os/tasks.c    **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority = tskIDLE_PRIORITY;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 8


 374:os/tasks.c    **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning = pdFALSE;
 375:os/tasks.c    **** PRIVILEGED_DATA static volatile TickType_t xPendedTicks = ( TickType_t ) 0U;
 376:os/tasks.c    **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending = pdFALSE;
 377:os/tasks.c    **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows = ( BaseType_t ) 0;
 378:os/tasks.c    **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber = ( UBaseType_t ) 0U;
 379:os/tasks.c    **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime = ( TickType_t ) 0U; /* Initialised
 380:os/tasks.c    **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle = NULL;                          /*< Holds the 
 381:os/tasks.c    **** 
 382:os/tasks.c    **** /* Improve support for OpenOCD. The kernel tracks Ready tasks via priority lists.
 383:os/tasks.c    ****  * For tracking the state of remote threads, OpenOCD uses uxTopUsedPriority
 384:os/tasks.c    ****  * to determine the number of priority lists to read back from the remote target. */
 385:os/tasks.c    **** const volatile UBaseType_t uxTopUsedPriority = configMAX_PRIORITIES - 1U;
 386:os/tasks.c    **** 
 387:os/tasks.c    **** /* Context switches are held pending while the scheduler is suspended.  Also,
 388:os/tasks.c    ****  * interrupts must not manipulate the xStateListItem of a TCB, or any of the
 389:os/tasks.c    ****  * lists the xStateListItem can be referenced from, if the scheduler is suspended.
 390:os/tasks.c    ****  * If an interrupt needs to unblock a task while the scheduler is suspended then it
 391:os/tasks.c    ****  * moves the task's event list item into the xPendingReadyList, ready for the
 392:os/tasks.c    ****  * kernel to move the task from the pending ready list into the real ready list
 393:os/tasks.c    ****  * when the scheduler is unsuspended.  The pending ready list itself can only be
 394:os/tasks.c    ****  * accessed from a critical section. */
 395:os/tasks.c    **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended = ( UBaseType_t ) pdFALSE;
 396:os/tasks.c    **** 
 397:os/tasks.c    **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 398:os/tasks.c    **** 
 399:os/tasks.c    **** /* Do not move these variables to function scope as doing so prevents the
 400:os/tasks.c    ****  * code working with debuggers that need to remove the static qualifier. */
 401:os/tasks.c    ****     PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;    /*< Holds the value of a timer/c
 402:os/tasks.c    ****     PRIVILEGED_DATA static volatile uint32_t ulTotalRunTime = 0UL; /*< Holds the total amount of ex
 403:os/tasks.c    **** 
 404:os/tasks.c    **** #endif
 405:os/tasks.c    **** 
 406:os/tasks.c    **** /*lint -restore */
 407:os/tasks.c    **** 
 408:os/tasks.c    **** /*-----------------------------------------------------------*/
 409:os/tasks.c    **** 
 410:os/tasks.c    **** /* File private functions. --------------------------------*/
 411:os/tasks.c    **** 
 412:os/tasks.c    **** /**
 413:os/tasks.c    ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 414:os/tasks.c    ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 415:os/tasks.c    ****  * is in any other state.
 416:os/tasks.c    ****  */
 417:os/tasks.c    **** #if ( INCLUDE_vTaskSuspend == 1 )
 418:os/tasks.c    **** 
 419:os/tasks.c    ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 420:os/tasks.c    **** 
 421:os/tasks.c    **** #endif /* INCLUDE_vTaskSuspend */
 422:os/tasks.c    **** 
 423:os/tasks.c    **** /*
 424:os/tasks.c    ****  * Utility to ready all the lists used by the scheduler.  This is called
 425:os/tasks.c    ****  * automatically upon the creation of the first task.
 426:os/tasks.c    ****  */
 427:os/tasks.c    **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 428:os/tasks.c    **** 
 429:os/tasks.c    **** /*
 430:os/tasks.c    ****  * The idle task, which as all tasks is implemented as a never ending loop.
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 9


 431:os/tasks.c    ****  * The idle task is automatically created and added to the ready lists upon
 432:os/tasks.c    ****  * creation of the first user task.
 433:os/tasks.c    ****  *
 434:os/tasks.c    ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 435:os/tasks.c    ****  * language extensions.  The equivalent prototype for this function is:
 436:os/tasks.c    ****  *
 437:os/tasks.c    ****  * void prvIdleTask( void *pvParameters );
 438:os/tasks.c    ****  *
 439:os/tasks.c    ****  */
 440:os/tasks.c    **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters ) PRIVILEGED_FUNCTION;
 441:os/tasks.c    **** 
 442:os/tasks.c    **** /*
 443:os/tasks.c    ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 444:os/tasks.c    ****  * including the stack pointed to by the TCB.
 445:os/tasks.c    ****  *
 446:os/tasks.c    ****  * This does not free memory allocated by the task itself (i.e. memory
 447:os/tasks.c    ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 448:os/tasks.c    ****  */
 449:os/tasks.c    **** #if ( INCLUDE_vTaskDelete == 1 )
 450:os/tasks.c    **** 
 451:os/tasks.c    ****     static void prvDeleteTCB( TCB_t * pxTCB ) PRIVILEGED_FUNCTION;
 452:os/tasks.c    **** 
 453:os/tasks.c    **** #endif
 454:os/tasks.c    **** 
 455:os/tasks.c    **** /*
 456:os/tasks.c    ****  * Used only by the idle task.  This checks to see if anything has been placed
 457:os/tasks.c    ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 458:os/tasks.c    ****  * and its TCB deleted.
 459:os/tasks.c    ****  */
 460:os/tasks.c    **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 461:os/tasks.c    **** 
 462:os/tasks.c    **** /*
 463:os/tasks.c    ****  * The currently executing task is entering the Blocked state.  Add the task to
 464:os/tasks.c    ****  * either the current or the overflow delayed task list.
 465:os/tasks.c    ****  */
 466:os/tasks.c    **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
 467:os/tasks.c    ****                                             const BaseType_t xCanBlockIndefinitely ) PRIVILEGED_FUN
 468:os/tasks.c    **** 
 469:os/tasks.c    **** /*
 470:os/tasks.c    ****  * Fills an TaskStatus_t structure with information on each task that is
 471:os/tasks.c    ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 472:os/tasks.c    ****  * a suspended list, etc.).
 473:os/tasks.c    ****  *
 474:os/tasks.c    ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 475:os/tasks.c    ****  * NORMAL APPLICATION CODE.
 476:os/tasks.c    ****  */
 477:os/tasks.c    **** #if ( configUSE_TRACE_FACILITY == 1 )
 478:os/tasks.c    **** 
 479:os/tasks.c    ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
 480:os/tasks.c    ****                                                      List_t * pxList,
 481:os/tasks.c    ****                                                      eTaskState eState ) PRIVILEGED_FUNCTION;
 482:os/tasks.c    **** 
 483:os/tasks.c    **** #endif
 484:os/tasks.c    **** 
 485:os/tasks.c    **** /*
 486:os/tasks.c    ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 487:os/tasks.c    ****  * the task if it is found, or NULL if the task is not found.
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 10


 488:os/tasks.c    ****  */
 489:os/tasks.c    **** #if ( INCLUDE_xTaskGetHandle == 1 )
 490:os/tasks.c    **** 
 491:os/tasks.c    ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
 492:os/tasks.c    ****                                                      const char pcNameToQuery[] ) PRIVILEGED_FUNCTI
 493:os/tasks.c    **** 
 494:os/tasks.c    **** #endif
 495:os/tasks.c    **** 
 496:os/tasks.c    **** /*
 497:os/tasks.c    ****  * When a task is created, the stack of the task is filled with a known value.
 498:os/tasks.c    ****  * This function determines the 'high water mark' of the task stack by
 499:os/tasks.c    ****  * determining how much of the stack remains at the original preset value.
 500:os/tasks.c    ****  */
 501:os/tasks.c    **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 502:os/tasks.c    **** 
 503:os/tasks.c    ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVIL
 504:os/tasks.c    **** 
 505:os/tasks.c    **** #endif
 506:os/tasks.c    **** 
 507:os/tasks.c    **** /*
 508:os/tasks.c    ****  * Return the amount of time, in ticks, that will pass before the kernel will
 509:os/tasks.c    ****  * next move a task from the Blocked state to the Running state.
 510:os/tasks.c    ****  *
 511:os/tasks.c    ****  * This conditional compilation should use inequality to 0, not equality to 1.
 512:os/tasks.c    ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 513:os/tasks.c    ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 514:os/tasks.c    ****  * set to a value other than 1.
 515:os/tasks.c    ****  */
 516:os/tasks.c    **** #if ( configUSE_TICKLESS_IDLE != 0 )
 517:os/tasks.c    **** 
 518:os/tasks.c    ****     static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 519:os/tasks.c    **** 
 520:os/tasks.c    **** #endif
 521:os/tasks.c    **** 
 522:os/tasks.c    **** /*
 523:os/tasks.c    ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 524:os/tasks.c    ****  * will exit the Blocked state.
 525:os/tasks.c    ****  */
 526:os/tasks.c    **** static void prvResetNextTaskUnblockTime( void ) PRIVILEGED_FUNCTION;
 527:os/tasks.c    **** 
 528:os/tasks.c    **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 529:os/tasks.c    **** 
 530:os/tasks.c    **** /*
 531:os/tasks.c    ****  * Helper function used to pad task names with spaces when printing out
 532:os/tasks.c    ****  * human readable tables of task information.
 533:os/tasks.c    ****  */
 534:os/tasks.c    ****     static char * prvWriteNameToBuffer( char * pcBuffer,
 535:os/tasks.c    ****                                         const char * pcTaskName ) PRIVILEGED_FUNCTION;
 536:os/tasks.c    **** 
 537:os/tasks.c    **** #endif
 538:os/tasks.c    **** 
 539:os/tasks.c    **** /*
 540:os/tasks.c    ****  * Called after a Task_t structure has been allocated either statically or
 541:os/tasks.c    ****  * dynamically to fill in the structure's members.
 542:os/tasks.c    ****  */
 543:os/tasks.c    **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 544:os/tasks.c    ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 11


 545:os/tasks.c    ****                                   const uint32_t ulStackDepth,
 546:os/tasks.c    ****                                   void * const pvParameters,
 547:os/tasks.c    ****                                   UBaseType_t uxPriority,
 548:os/tasks.c    ****                                   TaskHandle_t * const pxCreatedTask,
 549:os/tasks.c    ****                                   TCB_t * pxNewTCB,
 550:os/tasks.c    ****                                   const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 551:os/tasks.c    **** 
 552:os/tasks.c    **** /*
 553:os/tasks.c    ****  * Called after a new task has been created and initialised to place the task
 554:os/tasks.c    ****  * under the control of the scheduler.
 555:os/tasks.c    ****  */
 556:os/tasks.c    **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB ) PRIVILEGED_FUNCTION;
 557:os/tasks.c    **** 
 558:os/tasks.c    **** /*
 559:os/tasks.c    ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 560:os/tasks.c    ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 561:os/tasks.c    ****  * called by the function.
 562:os/tasks.c    ****  */
 563:os/tasks.c    **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 564:os/tasks.c    **** 
 565:os/tasks.c    ****     static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 566:os/tasks.c    **** 
 567:os/tasks.c    **** #endif
 568:os/tasks.c    **** 
 569:os/tasks.c    **** /*-----------------------------------------------------------*/
 570:os/tasks.c    **** 
 571:os/tasks.c    **** #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
 572:os/tasks.c    **** 
 573:os/tasks.c    ****     TaskHandle_t xTaskCreateStatic( TaskFunction_t pxTaskCode,
 574:os/tasks.c    ****                                     const char * const pcName, /*lint !e971 Unqualified char types 
 575:os/tasks.c    ****                                     const uint32_t ulStackDepth,
 576:os/tasks.c    ****                                     void * const pvParameters,
 577:os/tasks.c    ****                                     UBaseType_t uxPriority,
 578:os/tasks.c    ****                                     StackType_t * const puxStackBuffer,
 579:os/tasks.c    ****                                     StaticTask_t * const pxTaskBuffer )
 580:os/tasks.c    ****     {
 581:os/tasks.c    ****         TCB_t * pxNewTCB;
 582:os/tasks.c    ****         TaskHandle_t xReturn;
 583:os/tasks.c    **** 
 584:os/tasks.c    ****         configASSERT( puxStackBuffer != NULL );
 585:os/tasks.c    ****         configASSERT( pxTaskBuffer != NULL );
 586:os/tasks.c    **** 
 587:os/tasks.c    ****         #if ( configASSERT_DEFINED == 1 )
 588:os/tasks.c    ****             {
 589:os/tasks.c    ****                 /* Sanity check that the size of the structure used to declare a
 590:os/tasks.c    ****                  * variable of type StaticTask_t equals the size of the real task
 591:os/tasks.c    ****                  * structure. */
 592:os/tasks.c    ****                 volatile size_t xSize = sizeof( StaticTask_t );
 593:os/tasks.c    ****                 configASSERT( xSize == sizeof( TCB_t ) );
 594:os/tasks.c    ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 595:os/tasks.c    ****             }
 596:os/tasks.c    ****         #endif /* configASSERT_DEFINED */
 597:os/tasks.c    **** 
 598:os/tasks.c    ****         if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 599:os/tasks.c    ****         {
 600:os/tasks.c    ****             /* The memory used for the task's TCB and stack are passed into this
 601:os/tasks.c    ****              * function - use them. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 12


 602:os/tasks.c    ****             pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the stru
 603:os/tasks.c    ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 604:os/tasks.c    **** 
 605:os/tasks.c    ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has be
 606:os/tasks.c    ****                 {
 607:os/tasks.c    ****                     /* Tasks can be created statically or dynamically, so note this
 608:os/tasks.c    ****                      * task was created statically in case the task is later deleted. */
 609:os/tasks.c    ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 610:os/tasks.c    ****                 }
 611:os/tasks.c    ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 612:os/tasks.c    **** 
 613:os/tasks.c    ****             prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xRet
 614:os/tasks.c    ****             prvAddNewTaskToReadyList( pxNewTCB );
 615:os/tasks.c    ****         }
 616:os/tasks.c    ****         else
 617:os/tasks.c    ****         {
 618:os/tasks.c    ****             xReturn = NULL;
 619:os/tasks.c    ****         }
 620:os/tasks.c    **** 
 621:os/tasks.c    ****         return xReturn;
 622:os/tasks.c    ****     }
 623:os/tasks.c    **** 
 624:os/tasks.c    **** #endif /* SUPPORT_STATIC_ALLOCATION */
 625:os/tasks.c    **** /*-----------------------------------------------------------*/
 626:os/tasks.c    **** 
 627:os/tasks.c    **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 628:os/tasks.c    **** 
 629:os/tasks.c    ****     BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition,
 630:os/tasks.c    ****                                             TaskHandle_t * pxCreatedTask )
 631:os/tasks.c    ****     {
 632:os/tasks.c    ****         TCB_t * pxNewTCB;
 633:os/tasks.c    ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 634:os/tasks.c    **** 
 635:os/tasks.c    ****         configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 636:os/tasks.c    ****         configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 637:os/tasks.c    **** 
 638:os/tasks.c    ****         if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NUL
 639:os/tasks.c    ****         {
 640:os/tasks.c    ****             /* Allocate space for the TCB.  Where the memory comes from depends
 641:os/tasks.c    ****              * on the implementation of the port malloc function and whether or
 642:os/tasks.c    ****              * not static allocation is being used. */
 643:os/tasks.c    ****             pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 644:os/tasks.c    **** 
 645:os/tasks.c    ****             /* Store the stack location in the TCB. */
 646:os/tasks.c    ****             pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 647:os/tasks.c    **** 
 648:os/tasks.c    ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 649:os/tasks.c    ****                 {
 650:os/tasks.c    ****                     /* Tasks can be created statically or dynamically, so note this
 651:os/tasks.c    ****                      * task was created statically in case the task is later deleted. */
 652:os/tasks.c    ****                     pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 653:os/tasks.c    ****                 }
 654:os/tasks.c    ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 655:os/tasks.c    **** 
 656:os/tasks.c    ****             prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 657:os/tasks.c    ****                                   pxTaskDefinition->pcName,
 658:os/tasks.c    ****                                   ( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 13


 659:os/tasks.c    ****                                   pxTaskDefinition->pvParameters,
 660:os/tasks.c    ****                                   pxTaskDefinition->uxPriority,
 661:os/tasks.c    ****                                   pxCreatedTask, pxNewTCB,
 662:os/tasks.c    ****                                   pxTaskDefinition->xRegions );
 663:os/tasks.c    **** 
 664:os/tasks.c    ****             prvAddNewTaskToReadyList( pxNewTCB );
 665:os/tasks.c    ****             xReturn = pdPASS;
 666:os/tasks.c    ****         }
 667:os/tasks.c    **** 
 668:os/tasks.c    ****         return xReturn;
 669:os/tasks.c    ****     }
 670:os/tasks.c    **** 
 671:os/tasks.c    **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 672:os/tasks.c    **** /*-----------------------------------------------------------*/
 673:os/tasks.c    **** 
 674:os/tasks.c    **** #if ( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 675:os/tasks.c    **** 
 676:os/tasks.c    ****     BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition,
 677:os/tasks.c    ****                                       TaskHandle_t * pxCreatedTask )
 678:os/tasks.c    ****     {
 679:os/tasks.c    ****         TCB_t * pxNewTCB;
 680:os/tasks.c    ****         BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:os/tasks.c    **** 
 682:os/tasks.c    ****         configASSERT( pxTaskDefinition->puxStackBuffer );
 683:os/tasks.c    **** 
 684:os/tasks.c    ****         if( pxTaskDefinition->puxStackBuffer != NULL )
 685:os/tasks.c    ****         {
 686:os/tasks.c    ****             /* Allocate space for the TCB.  Where the memory comes from depends
 687:os/tasks.c    ****              * on the implementation of the port malloc function and whether or
 688:os/tasks.c    ****              * not static allocation is being used. */
 689:os/tasks.c    ****             pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:os/tasks.c    **** 
 691:os/tasks.c    ****             if( pxNewTCB != NULL )
 692:os/tasks.c    ****             {
 693:os/tasks.c    ****                 /* Store the stack location in the TCB. */
 694:os/tasks.c    ****                 pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:os/tasks.c    **** 
 696:os/tasks.c    ****                 #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 697:os/tasks.c    ****                     {
 698:os/tasks.c    ****                         /* Tasks can be created statically or dynamically, so note
 699:os/tasks.c    ****                          * this task had a statically allocated stack in case it is
 700:os/tasks.c    ****                          * later deleted.  The TCB was allocated dynamically. */
 701:os/tasks.c    ****                         pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:os/tasks.c    ****                     }
 703:os/tasks.c    ****                 #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 704:os/tasks.c    **** 
 705:os/tasks.c    ****                 prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 706:os/tasks.c    ****                                       pxTaskDefinition->pcName,
 707:os/tasks.c    ****                                       ( uint32_t ) pxTaskDefinition->usStackDepth,
 708:os/tasks.c    ****                                       pxTaskDefinition->pvParameters,
 709:os/tasks.c    ****                                       pxTaskDefinition->uxPriority,
 710:os/tasks.c    ****                                       pxCreatedTask, pxNewTCB,
 711:os/tasks.c    ****                                       pxTaskDefinition->xRegions );
 712:os/tasks.c    **** 
 713:os/tasks.c    ****                 prvAddNewTaskToReadyList( pxNewTCB );
 714:os/tasks.c    ****                 xReturn = pdPASS;
 715:os/tasks.c    ****             }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 14


 716:os/tasks.c    ****         }
 717:os/tasks.c    **** 
 718:os/tasks.c    ****         return xReturn;
 719:os/tasks.c    ****     }
 720:os/tasks.c    **** 
 721:os/tasks.c    **** #endif /* portUSING_MPU_WRAPPERS */
 722:os/tasks.c    **** /*-----------------------------------------------------------*/
 723:os/tasks.c    **** 
 724:os/tasks.c    **** #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:os/tasks.c    **** 
 726:os/tasks.c    ****     BaseType_t xTaskCreate( TaskFunction_t pxTaskCode,
 727:os/tasks.c    ****                             const char * const pcName, /*lint !e971 Unqualified char types are allo
 728:os/tasks.c    ****                             const configSTACK_DEPTH_TYPE usStackDepth,
 729:os/tasks.c    ****                             void * const pvParameters,
 730:os/tasks.c    ****                             UBaseType_t uxPriority,
 731:os/tasks.c    ****                             TaskHandle_t * const pxCreatedTask )
 732:os/tasks.c    ****     {
 733:os/tasks.c    ****         TCB_t * pxNewTCB;
 734:os/tasks.c    ****         BaseType_t xReturn;
 735:os/tasks.c    **** 
 736:os/tasks.c    ****         /* If the stack grows down then allocate the stack then the TCB so the stack
 737:os/tasks.c    ****          * does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:os/tasks.c    ****          * the TCB then the stack. */
 739:os/tasks.c    ****         #if ( portSTACK_GROWTH > 0 )
 740:os/tasks.c    ****             {
 741:os/tasks.c    ****                 /* Allocate space for the TCB.  Where the memory comes from depends on
 742:os/tasks.c    ****                  * the implementation of the port malloc function and whether or not static
 743:os/tasks.c    ****                  * allocation is being used. */
 744:os/tasks.c    ****                 pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:os/tasks.c    **** 
 746:os/tasks.c    ****                 if( pxNewTCB != NULL )
 747:os/tasks.c    ****                 {
 748:os/tasks.c    ****                     /* Allocate space for the stack used by the task being created.
 749:os/tasks.c    ****                      * The base of the stack memory stored in the TCB so the task can
 750:os/tasks.c    ****                      * be deleted later if required. */
 751:os/tasks.c    ****                     pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocStack( ( ( ( size_t ) usStack
 752:os/tasks.c    **** 
 753:os/tasks.c    ****                     if( pxNewTCB->pxStack == NULL )
 754:os/tasks.c    ****                     {
 755:os/tasks.c    ****                         /* Could not allocate the stack.  Delete the allocated TCB. */
 756:os/tasks.c    ****                         vPortFree( pxNewTCB );
 757:os/tasks.c    ****                         pxNewTCB = NULL;
 758:os/tasks.c    ****                     }
 759:os/tasks.c    ****                 }
 760:os/tasks.c    ****             }
 761:os/tasks.c    ****         #else /* portSTACK_GROWTH */
 762:os/tasks.c    ****             {
 763:os/tasks.c    ****                 StackType_t * pxStack;
 764:os/tasks.c    **** 
 765:os/tasks.c    ****                 /* Allocate space for the stack used by the task being created. */
 766:os/tasks.c    ****                 pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:os/tasks.c    **** 
 768:os/tasks.c    ****                 if( pxStack != NULL )
 769:os/tasks.c    ****                 {
 770:os/tasks.c    ****                     /* Allocate space for the TCB. */
 771:os/tasks.c    ****                     pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 Al
 772:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 15


 773:os/tasks.c    ****                     if( pxNewTCB != NULL )
 774:os/tasks.c    ****                     {
 775:os/tasks.c    ****                         /* Store the stack location in the TCB. */
 776:os/tasks.c    ****                         pxNewTCB->pxStack = pxStack;
 777:os/tasks.c    ****                     }
 778:os/tasks.c    ****                     else
 779:os/tasks.c    ****                     {
 780:os/tasks.c    ****                         /* The stack cannot be used as the TCB was not created.  Free
 781:os/tasks.c    ****                          * it again. */
 782:os/tasks.c    ****                         vPortFreeStack( pxStack );
 783:os/tasks.c    ****                     }
 784:os/tasks.c    ****                 }
 785:os/tasks.c    ****                 else
 786:os/tasks.c    ****                 {
 787:os/tasks.c    ****                     pxNewTCB = NULL;
 788:os/tasks.c    ****                 }
 789:os/tasks.c    ****             }
 790:os/tasks.c    ****         #endif /* portSTACK_GROWTH */
 791:os/tasks.c    **** 
 792:os/tasks.c    ****         if( pxNewTCB != NULL )
 793:os/tasks.c    ****         {
 794:os/tasks.c    ****             #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has be
 795:os/tasks.c    ****                 {
 796:os/tasks.c    ****                     /* Tasks can be created statically or dynamically, so note this
 797:os/tasks.c    ****                      * task was created dynamically in case it is later deleted. */
 798:os/tasks.c    ****                     pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:os/tasks.c    ****                 }
 800:os/tasks.c    ****             #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 801:os/tasks.c    **** 
 802:os/tasks.c    ****             prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPr
 803:os/tasks.c    ****             prvAddNewTaskToReadyList( pxNewTCB );
 804:os/tasks.c    ****             xReturn = pdPASS;
 805:os/tasks.c    ****         }
 806:os/tasks.c    ****         else
 807:os/tasks.c    ****         {
 808:os/tasks.c    ****             xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:os/tasks.c    ****         }
 810:os/tasks.c    **** 
 811:os/tasks.c    ****         return xReturn;
 812:os/tasks.c    ****     }
 813:os/tasks.c    **** 
 814:os/tasks.c    **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:os/tasks.c    **** /*-----------------------------------------------------------*/
 816:os/tasks.c    **** 
 817:os/tasks.c    **** static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 818:os/tasks.c    ****                                   const char * const pcName, /*lint !e971 Unqualified char types ar
 819:os/tasks.c    ****                                   const uint32_t ulStackDepth,
 820:os/tasks.c    ****                                   void * const pvParameters,
 821:os/tasks.c    ****                                   UBaseType_t uxPriority,
 822:os/tasks.c    ****                                   TaskHandle_t * const pxCreatedTask,
 823:os/tasks.c    ****                                   TCB_t * pxNewTCB,
 824:os/tasks.c    ****                                   const MemoryRegion_t * const xRegions )
 825:os/tasks.c    **** {
 826:os/tasks.c    ****     StackType_t * pxTopOfStack;
 827:os/tasks.c    ****     UBaseType_t x;
 828:os/tasks.c    **** 
 829:os/tasks.c    ****     #if ( portUSING_MPU_WRAPPERS == 1 )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 16


 830:os/tasks.c    ****         /* Should the task be created in privileged mode? */
 831:os/tasks.c    ****         BaseType_t xRunPrivileged;
 832:os/tasks.c    **** 
 833:os/tasks.c    ****         if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 834:os/tasks.c    ****         {
 835:os/tasks.c    ****             xRunPrivileged = pdTRUE;
 836:os/tasks.c    ****         }
 837:os/tasks.c    ****         else
 838:os/tasks.c    ****         {
 839:os/tasks.c    ****             xRunPrivileged = pdFALSE;
 840:os/tasks.c    ****         }
 841:os/tasks.c    ****         uxPriority &= ~portPRIVILEGE_BIT;
 842:os/tasks.c    ****     #endif /* portUSING_MPU_WRAPPERS == 1 */
 843:os/tasks.c    **** 
 844:os/tasks.c    ****     /* Avoid dependency on memset() if it is not required. */
 845:os/tasks.c    ****     #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 846:os/tasks.c    ****         {
 847:os/tasks.c    ****             /* Fill the stack with a known value to assist debugging. */
 848:os/tasks.c    ****             ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth
 849:os/tasks.c    ****         }
 850:os/tasks.c    ****     #endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 851:os/tasks.c    **** 
 852:os/tasks.c    ****     /* Calculate the top of stack address.  This depends on whether the stack
 853:os/tasks.c    ****      * grows from high memory to low (as per the 80x86) or vice versa.
 854:os/tasks.c    ****      * portSTACK_GROWTH is used to make the result positive or negative as required
 855:os/tasks.c    ****      * by the port. */
 856:os/tasks.c    ****     #if ( portSTACK_GROWTH < 0 )
 857:os/tasks.c    ****         {
 858:os/tasks.c    ****             pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 859:os/tasks.c    ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 860:os/tasks.c    **** 
 861:os/tasks.c    ****             /* Check the alignment of the calculated top of stack is correct. */
 862:os/tasks.c    ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) po
 863:os/tasks.c    **** 
 864:os/tasks.c    ****             #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
 865:os/tasks.c    ****                 {
 866:os/tasks.c    ****                     /* Also record the stack's high address, which may assist
 867:os/tasks.c    ****                      * debugging. */
 868:os/tasks.c    ****                     pxNewTCB->pxEndOfStack = pxTopOfStack;
 869:os/tasks.c    ****                 }
 870:os/tasks.c    ****             #endif /* configRECORD_STACK_HIGH_ADDRESS */
 871:os/tasks.c    ****         }
 872:os/tasks.c    ****     #else /* portSTACK_GROWTH */
 873:os/tasks.c    ****         {
 874:os/tasks.c    ****             pxTopOfStack = pxNewTCB->pxStack;
 875:os/tasks.c    **** 
 876:os/tasks.c    ****             /* Check the alignment of the stack buffer is correct. */
 877:os/tasks.c    ****             configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE
 878:os/tasks.c    **** 
 879:os/tasks.c    ****             /* The other extreme of the stack space is required if stack checking is
 880:os/tasks.c    ****              * performed. */
 881:os/tasks.c    ****             pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 882:os/tasks.c    ****         }
 883:os/tasks.c    ****     #endif /* portSTACK_GROWTH */
 884:os/tasks.c    **** 
 885:os/tasks.c    ****     /* Store the task name in the TCB. */
 886:os/tasks.c    ****     if( pcName != NULL )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 17


 887:os/tasks.c    ****     {
 888:os/tasks.c    ****         for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 889:os/tasks.c    ****         {
 890:os/tasks.c    ****             pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 891:os/tasks.c    **** 
 892:os/tasks.c    ****             /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 893:os/tasks.c    ****              * configMAX_TASK_NAME_LEN characters just in case the memory after the
 894:os/tasks.c    ****              * string is not accessible (extremely unlikely). */
 895:os/tasks.c    ****             if( pcName[ x ] == ( char ) 0x00 )
 896:os/tasks.c    ****             {
 897:os/tasks.c    ****                 break;
 898:os/tasks.c    ****             }
 899:os/tasks.c    ****             else
 900:os/tasks.c    ****             {
 901:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
 902:os/tasks.c    ****             }
 903:os/tasks.c    ****         }
 904:os/tasks.c    **** 
 905:os/tasks.c    ****         /* Ensure the name string is terminated in the case that the string length
 906:os/tasks.c    ****          * was greater or equal to configMAX_TASK_NAME_LEN. */
 907:os/tasks.c    ****         pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 908:os/tasks.c    ****     }
 909:os/tasks.c    ****     else
 910:os/tasks.c    ****     {
 911:os/tasks.c    ****         /* The task has not been given a name, so just ensure there is a NULL
 912:os/tasks.c    ****          * terminator when it is read out. */
 913:os/tasks.c    ****         pxNewTCB->pcTaskName[ 0 ] = 0x00;
 914:os/tasks.c    ****     }
 915:os/tasks.c    **** 
 916:os/tasks.c    ****     /* This is used as an array index so must ensure it's not too large.  First
 917:os/tasks.c    ****      * remove the privilege bit if one is present. */
 918:os/tasks.c    ****     if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 919:os/tasks.c    ****     {
 920:os/tasks.c    ****         uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 921:os/tasks.c    ****     }
 922:os/tasks.c    ****     else
 923:os/tasks.c    ****     {
 924:os/tasks.c    ****         mtCOVERAGE_TEST_MARKER();
 925:os/tasks.c    ****     }
 926:os/tasks.c    **** 
 927:os/tasks.c    ****     pxNewTCB->uxPriority = uxPriority;
 928:os/tasks.c    ****     #if ( configUSE_MUTEXES == 1 )
 929:os/tasks.c    ****         {
 930:os/tasks.c    ****             pxNewTCB->uxBasePriority = uxPriority;
 931:os/tasks.c    ****             pxNewTCB->uxMutexesHeld = 0;
 932:os/tasks.c    ****         }
 933:os/tasks.c    ****     #endif /* configUSE_MUTEXES */
 934:os/tasks.c    **** 
 935:os/tasks.c    ****     vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 936:os/tasks.c    ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 937:os/tasks.c    **** 
 938:os/tasks.c    ****     /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 939:os/tasks.c    ****      * back to  the containing TCB from a generic item in a list. */
 940:os/tasks.c    ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 941:os/tasks.c    **** 
 942:os/tasks.c    ****     /* Event lists are always in priority order. */
 943:os/tasks.c    ****     listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - (
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 18


 944:os/tasks.c    ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 945:os/tasks.c    **** 
 946:os/tasks.c    ****     #if ( portCRITICAL_NESTING_IN_TCB == 1 )
 947:os/tasks.c    ****         {
 948:os/tasks.c    ****             pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 949:os/tasks.c    ****         }
 950:os/tasks.c    ****     #endif /* portCRITICAL_NESTING_IN_TCB */
 951:os/tasks.c    **** 
 952:os/tasks.c    ****     #if ( configUSE_APPLICATION_TASK_TAG == 1 )
 953:os/tasks.c    ****         {
 954:os/tasks.c    ****             pxNewTCB->pxTaskTag = NULL;
 955:os/tasks.c    ****         }
 956:os/tasks.c    ****     #endif /* configUSE_APPLICATION_TASK_TAG */
 957:os/tasks.c    **** 
 958:os/tasks.c    ****     #if ( configGENERATE_RUN_TIME_STATS == 1 )
 959:os/tasks.c    ****         {
 960:os/tasks.c    ****             pxNewTCB->ulRunTimeCounter = 0UL;
 961:os/tasks.c    ****         }
 962:os/tasks.c    ****     #endif /* configGENERATE_RUN_TIME_STATS */
 963:os/tasks.c    **** 
 964:os/tasks.c    ****     #if ( portUSING_MPU_WRAPPERS == 1 )
 965:os/tasks.c    ****         {
 966:os/tasks.c    ****             vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ul
 967:os/tasks.c    ****         }
 968:os/tasks.c    ****     #else
 969:os/tasks.c    ****         {
 970:os/tasks.c    ****             /* Avoid compiler warning about unreferenced parameter. */
 971:os/tasks.c    ****             ( void ) xRegions;
 972:os/tasks.c    ****         }
 973:os/tasks.c    ****     #endif
 974:os/tasks.c    **** 
 975:os/tasks.c    ****     #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 976:os/tasks.c    ****         {
 977:os/tasks.c    ****             memset( ( void * ) &( pxNewTCB->pvThreadLocalStoragePointers[ 0 ] ), 0x00, sizeof( pxNe
 978:os/tasks.c    ****         }
 979:os/tasks.c    ****     #endif
 980:os/tasks.c    **** 
 981:os/tasks.c    ****     #if ( configUSE_TASK_NOTIFICATIONS == 1 )
 982:os/tasks.c    ****         {
 983:os/tasks.c    ****             memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotif
 984:os/tasks.c    ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 985:os/tasks.c    ****         }
 986:os/tasks.c    ****     #endif
 987:os/tasks.c    **** 
 988:os/tasks.c    ****     #if ( configUSE_NEWLIB_REENTRANT == 1 )
 989:os/tasks.c    ****         {
 990:os/tasks.c    ****             /* Initialise this task's Newlib reent structure.
 991:os/tasks.c    ****              * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
 992:os/tasks.c    ****              * for additional information. */
 993:os/tasks.c    ****             _REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 994:os/tasks.c    ****         }
 995:os/tasks.c    ****     #endif
 996:os/tasks.c    **** 
 997:os/tasks.c    ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
 998:os/tasks.c    ****         {
 999:os/tasks.c    ****             pxNewTCB->ucDelayAborted = pdFALSE;
1000:os/tasks.c    ****         }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 19


1001:os/tasks.c    ****     #endif
1002:os/tasks.c    **** 
1003:os/tasks.c    ****     /* Initialize the TCB stack to look as if the task was already running,
1004:os/tasks.c    ****      * but had been interrupted by the scheduler.  The return address is set
1005:os/tasks.c    ****      * to the start of the task function. Once the stack has been initialised
1006:os/tasks.c    ****      * the top of stack variable is updated. */
1007:os/tasks.c    ****     #if ( portUSING_MPU_WRAPPERS == 1 )
1008:os/tasks.c    ****         {
1009:os/tasks.c    ****             /* If the port has capability to detect stack overflow,
1010:os/tasks.c    ****              * pass the stack end address to the stack initialization
1011:os/tasks.c    ****              * function as well. */
1012:os/tasks.c    ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1013:os/tasks.c    ****                 {
1014:os/tasks.c    ****                     #if ( portSTACK_GROWTH < 0 )
1015:os/tasks.c    ****                         {
1016:os/tasks.c    ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1017:os/tasks.c    ****                         }
1018:os/tasks.c    ****                     #else /* portSTACK_GROWTH */
1019:os/tasks.c    ****                         {
1020:os/tasks.c    ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1021:os/tasks.c    ****                         }
1022:os/tasks.c    ****                     #endif /* portSTACK_GROWTH */
1023:os/tasks.c    ****                 }
1024:os/tasks.c    ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1025:os/tasks.c    ****                 {
1026:os/tasks.c    ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1027:os/tasks.c    ****                 }
1028:os/tasks.c    ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1029:os/tasks.c    ****         }
1030:os/tasks.c    ****     #else /* portUSING_MPU_WRAPPERS */
1031:os/tasks.c    ****         {
1032:os/tasks.c    ****             /* If the port has capability to detect stack overflow,
1033:os/tasks.c    ****              * pass the stack end address to the stack initialization
1034:os/tasks.c    ****              * function as well. */
1035:os/tasks.c    ****             #if ( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1036:os/tasks.c    ****                 {
1037:os/tasks.c    ****                     #if ( portSTACK_GROWTH < 0 )
1038:os/tasks.c    ****                         {
1039:os/tasks.c    ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1040:os/tasks.c    ****                         }
1041:os/tasks.c    ****                     #else /* portSTACK_GROWTH */
1042:os/tasks.c    ****                         {
1043:os/tasks.c    ****                             pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB-
1044:os/tasks.c    ****                         }
1045:os/tasks.c    ****                     #endif /* portSTACK_GROWTH */
1046:os/tasks.c    ****                 }
1047:os/tasks.c    ****             #else /* portHAS_STACK_OVERFLOW_CHECKING */
1048:os/tasks.c    ****                 {
1049:os/tasks.c    ****                     pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvPar
1050:os/tasks.c    ****                 }
1051:os/tasks.c    ****             #endif /* portHAS_STACK_OVERFLOW_CHECKING */
1052:os/tasks.c    ****         }
1053:os/tasks.c    ****     #endif /* portUSING_MPU_WRAPPERS */
1054:os/tasks.c    **** 
1055:os/tasks.c    ****     if( pxCreatedTask != NULL )
1056:os/tasks.c    ****     {
1057:os/tasks.c    ****         /* Pass the handle out in an anonymous way.  The handle can be used to
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 20


1058:os/tasks.c    ****          * change the created task's priority, delete the created task, etc.*/
1059:os/tasks.c    ****         *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1060:os/tasks.c    ****     }
1061:os/tasks.c    ****     else
1062:os/tasks.c    ****     {
1063:os/tasks.c    ****         mtCOVERAGE_TEST_MARKER();
1064:os/tasks.c    ****     }
1065:os/tasks.c    **** }
1066:os/tasks.c    **** /*-----------------------------------------------------------*/
1067:os/tasks.c    **** 
1068:os/tasks.c    **** static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
1069:os/tasks.c    **** {
1070:os/tasks.c    ****     /* Ensure interrupts don't access the task lists while the lists are being
1071:os/tasks.c    ****      * updated. */
1072:os/tasks.c    ****     taskENTER_CRITICAL();
1073:os/tasks.c    ****     {
1074:os/tasks.c    ****         uxCurrentNumberOfTasks++;
1075:os/tasks.c    **** 
1076:os/tasks.c    ****         if( pxCurrentTCB == NULL )
1077:os/tasks.c    ****         {
1078:os/tasks.c    ****             /* There are no other tasks, or all the other tasks are in
1079:os/tasks.c    ****              * the suspended state - make this the current task. */
1080:os/tasks.c    ****             pxCurrentTCB = pxNewTCB;
1081:os/tasks.c    **** 
1082:os/tasks.c    ****             if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1083:os/tasks.c    ****             {
1084:os/tasks.c    ****                 /* This is the first task to be created so do the preliminary
1085:os/tasks.c    ****                  * initialisation required.  We will not recover if this call
1086:os/tasks.c    ****                  * fails, but we will report the failure. */
1087:os/tasks.c    ****                 prvInitialiseTaskLists();
1088:os/tasks.c    ****             }
1089:os/tasks.c    ****             else
1090:os/tasks.c    ****             {
1091:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
1092:os/tasks.c    ****             }
1093:os/tasks.c    ****         }
1094:os/tasks.c    ****         else
1095:os/tasks.c    ****         {
1096:os/tasks.c    ****             /* If the scheduler is not already running, make this task the
1097:os/tasks.c    ****              * current task if it is the highest priority task to be created
1098:os/tasks.c    ****              * so far. */
1099:os/tasks.c    ****             if( xSchedulerRunning == pdFALSE )
1100:os/tasks.c    ****             {
1101:os/tasks.c    ****                 if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1102:os/tasks.c    ****                 {
1103:os/tasks.c    ****                     pxCurrentTCB = pxNewTCB;
1104:os/tasks.c    ****                 }
1105:os/tasks.c    ****                 else
1106:os/tasks.c    ****                 {
1107:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
1108:os/tasks.c    ****                 }
1109:os/tasks.c    ****             }
1110:os/tasks.c    ****             else
1111:os/tasks.c    ****             {
1112:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
1113:os/tasks.c    ****             }
1114:os/tasks.c    ****         }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 21


1115:os/tasks.c    **** 
1116:os/tasks.c    ****         uxTaskNumber++;
1117:os/tasks.c    **** 
1118:os/tasks.c    ****         #if ( configUSE_TRACE_FACILITY == 1 )
1119:os/tasks.c    ****             {
1120:os/tasks.c    ****                 /* Add a counter into the TCB for tracing only. */
1121:os/tasks.c    ****                 pxNewTCB->uxTCBNumber = uxTaskNumber;
1122:os/tasks.c    ****             }
1123:os/tasks.c    ****         #endif /* configUSE_TRACE_FACILITY */
1124:os/tasks.c    ****         traceTASK_CREATE( pxNewTCB );
1125:os/tasks.c    **** 
1126:os/tasks.c    ****         prvAddTaskToReadyList( pxNewTCB );
1127:os/tasks.c    **** 
1128:os/tasks.c    ****         portSETUP_TCB( pxNewTCB );
1129:os/tasks.c    ****     }
1130:os/tasks.c    ****     taskEXIT_CRITICAL();
1131:os/tasks.c    **** 
1132:os/tasks.c    ****     if( xSchedulerRunning != pdFALSE )
1133:os/tasks.c    ****     {
1134:os/tasks.c    ****         /* If the created task is of a higher priority than the current task
1135:os/tasks.c    ****          * then it should run now. */
1136:os/tasks.c    ****         if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1137:os/tasks.c    ****         {
1138:os/tasks.c    ****             taskYIELD_IF_USING_PREEMPTION();
1139:os/tasks.c    ****         }
1140:os/tasks.c    ****         else
1141:os/tasks.c    ****         {
1142:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
1143:os/tasks.c    ****         }
1144:os/tasks.c    ****     }
1145:os/tasks.c    ****     else
1146:os/tasks.c    ****     {
1147:os/tasks.c    ****         mtCOVERAGE_TEST_MARKER();
1148:os/tasks.c    ****     }
1149:os/tasks.c    **** }
1150:os/tasks.c    **** /*-----------------------------------------------------------*/
1151:os/tasks.c    **** 
1152:os/tasks.c    **** #if ( INCLUDE_vTaskDelete == 1 )
1153:os/tasks.c    **** 
1154:os/tasks.c    ****     void vTaskDelete( TaskHandle_t xTaskToDelete )
1155:os/tasks.c    ****     {
1156:os/tasks.c    ****         TCB_t * pxTCB;
1157:os/tasks.c    **** 
1158:os/tasks.c    ****         taskENTER_CRITICAL();
1159:os/tasks.c    ****         {
1160:os/tasks.c    ****             /* If null is passed in here then it is the calling task that is
1161:os/tasks.c    ****              * being deleted. */
1162:os/tasks.c    ****             pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1163:os/tasks.c    **** 
1164:os/tasks.c    ****             /* Remove task from the ready/delayed list. */
1165:os/tasks.c    ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1166:os/tasks.c    ****             {
1167:os/tasks.c    ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1168:os/tasks.c    ****             }
1169:os/tasks.c    ****             else
1170:os/tasks.c    ****             {
1171:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 22


1172:os/tasks.c    ****             }
1173:os/tasks.c    **** 
1174:os/tasks.c    ****             /* Is the task waiting on an event also? */
1175:os/tasks.c    ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1176:os/tasks.c    ****             {
1177:os/tasks.c    ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1178:os/tasks.c    ****             }
1179:os/tasks.c    ****             else
1180:os/tasks.c    ****             {
1181:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
1182:os/tasks.c    ****             }
1183:os/tasks.c    **** 
1184:os/tasks.c    ****             /* Increment the uxTaskNumber also so kernel aware debuggers can
1185:os/tasks.c    ****              * detect that the task lists need re-generating.  This is done before
1186:os/tasks.c    ****              * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1187:os/tasks.c    ****              * not return. */
1188:os/tasks.c    ****             uxTaskNumber++;
1189:os/tasks.c    **** 
1190:os/tasks.c    ****             if( pxTCB == pxCurrentTCB )
1191:os/tasks.c    ****             {
1192:os/tasks.c    ****                 /* A task is deleting itself.  This cannot complete within the
1193:os/tasks.c    ****                  * task itself, as a context switch to another task is required.
1194:os/tasks.c    ****                  * Place the task in the termination list.  The idle task will
1195:os/tasks.c    ****                  * check the termination list and free up any memory allocated by
1196:os/tasks.c    ****                  * the scheduler for the TCB and stack of the deleted task. */
1197:os/tasks.c    ****                 vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1198:os/tasks.c    **** 
1199:os/tasks.c    ****                 /* Increment the ucTasksDeleted variable so the idle task knows
1200:os/tasks.c    ****                  * there is a task that has been deleted and that it should therefore
1201:os/tasks.c    ****                  * check the xTasksWaitingTermination list. */
1202:os/tasks.c    ****                 ++uxDeletedTasksWaitingCleanUp;
1203:os/tasks.c    **** 
1204:os/tasks.c    ****                 /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
1205:os/tasks.c    ****                  * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
1206:os/tasks.c    ****                 traceTASK_DELETE( pxTCB );
1207:os/tasks.c    **** 
1208:os/tasks.c    ****                 /* The pre-delete hook is primarily for the Windows simulator,
1209:os/tasks.c    ****                  * in which Windows specific clean up operations are performed,
1210:os/tasks.c    ****                  * after which it is not possible to yield away from this task -
1211:os/tasks.c    ****                  * hence xYieldPending is used to latch that a context switch is
1212:os/tasks.c    ****                  * required. */
1213:os/tasks.c    ****                 portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1214:os/tasks.c    ****             }
1215:os/tasks.c    ****             else
1216:os/tasks.c    ****             {
1217:os/tasks.c    ****                 --uxCurrentNumberOfTasks;
1218:os/tasks.c    ****                 traceTASK_DELETE( pxTCB );
1219:os/tasks.c    ****                 prvDeleteTCB( pxTCB );
1220:os/tasks.c    **** 
1221:os/tasks.c    ****                 /* Reset the next expected unblock time in case it referred to
1222:os/tasks.c    ****                  * the task that has just been deleted. */
1223:os/tasks.c    ****                 prvResetNextTaskUnblockTime();
1224:os/tasks.c    ****             }
1225:os/tasks.c    ****         }
1226:os/tasks.c    ****         taskEXIT_CRITICAL();
1227:os/tasks.c    **** 
1228:os/tasks.c    ****         /* Force a reschedule if it is the currently running task that has just
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 23


1229:os/tasks.c    ****          * been deleted. */
1230:os/tasks.c    ****         if( xSchedulerRunning != pdFALSE )
1231:os/tasks.c    ****         {
1232:os/tasks.c    ****             if( pxTCB == pxCurrentTCB )
1233:os/tasks.c    ****             {
1234:os/tasks.c    ****                 configASSERT( uxSchedulerSuspended == 0 );
1235:os/tasks.c    ****                 portYIELD_WITHIN_API();
1236:os/tasks.c    ****             }
1237:os/tasks.c    ****             else
1238:os/tasks.c    ****             {
1239:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
1240:os/tasks.c    ****             }
1241:os/tasks.c    ****         }
1242:os/tasks.c    ****     }
1243:os/tasks.c    **** 
1244:os/tasks.c    **** #endif /* INCLUDE_vTaskDelete */
1245:os/tasks.c    **** /*-----------------------------------------------------------*/
1246:os/tasks.c    **** 
1247:os/tasks.c    **** #if ( INCLUDE_xTaskDelayUntil == 1 )
1248:os/tasks.c    **** 
1249:os/tasks.c    ****     BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
1250:os/tasks.c    ****                                 const TickType_t xTimeIncrement )
1251:os/tasks.c    ****     {
1252:os/tasks.c    ****         TickType_t xTimeToWake;
1253:os/tasks.c    ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1254:os/tasks.c    **** 
1255:os/tasks.c    ****         configASSERT( pxPreviousWakeTime );
1256:os/tasks.c    ****         configASSERT( ( xTimeIncrement > 0U ) );
1257:os/tasks.c    ****         configASSERT( uxSchedulerSuspended == 0 );
1258:os/tasks.c    **** 
1259:os/tasks.c    ****         vTaskSuspendAll();
1260:os/tasks.c    ****         {
1261:os/tasks.c    ****             /* Minor optimisation.  The tick count cannot change in this
1262:os/tasks.c    ****              * block. */
1263:os/tasks.c    ****             const TickType_t xConstTickCount = xTickCount;
1264:os/tasks.c    **** 
1265:os/tasks.c    ****             /* Generate the tick time at which the task wants to wake. */
1266:os/tasks.c    ****             xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1267:os/tasks.c    **** 
1268:os/tasks.c    ****             if( xConstTickCount < *pxPreviousWakeTime )
1269:os/tasks.c    ****             {
1270:os/tasks.c    ****                 /* The tick count has overflowed since this function was
1271:os/tasks.c    ****                  * lasted called.  In this case the only time we should ever
1272:os/tasks.c    ****                  * actually delay is if the wake time has also  overflowed,
1273:os/tasks.c    ****                  * and the wake time is greater than the tick time.  When this
1274:os/tasks.c    ****                  * is the case it is as if neither time had overflowed. */
1275:os/tasks.c    ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1276:os/tasks.c    ****                 {
1277:os/tasks.c    ****                     xShouldDelay = pdTRUE;
1278:os/tasks.c    ****                 }
1279:os/tasks.c    ****                 else
1280:os/tasks.c    ****                 {
1281:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
1282:os/tasks.c    ****                 }
1283:os/tasks.c    ****             }
1284:os/tasks.c    ****             else
1285:os/tasks.c    ****             {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 24


1286:os/tasks.c    ****                 /* The tick time has not overflowed.  In this case we will
1287:os/tasks.c    ****                  * delay if either the wake time has overflowed, and/or the
1288:os/tasks.c    ****                  * tick time is less than the wake time. */
1289:os/tasks.c    ****                 if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1290:os/tasks.c    ****                 {
1291:os/tasks.c    ****                     xShouldDelay = pdTRUE;
1292:os/tasks.c    ****                 }
1293:os/tasks.c    ****                 else
1294:os/tasks.c    ****                 {
1295:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
1296:os/tasks.c    ****                 }
1297:os/tasks.c    ****             }
1298:os/tasks.c    **** 
1299:os/tasks.c    ****             /* Update the wake time ready for the next call. */
1300:os/tasks.c    ****             *pxPreviousWakeTime = xTimeToWake;
1301:os/tasks.c    **** 
1302:os/tasks.c    ****             if( xShouldDelay != pdFALSE )
1303:os/tasks.c    ****             {
1304:os/tasks.c    ****                 traceTASK_DELAY_UNTIL( xTimeToWake );
1305:os/tasks.c    **** 
1306:os/tasks.c    ****                 /* prvAddCurrentTaskToDelayedList() needs the block time, not
1307:os/tasks.c    ****                  * the time to wake, so subtract the current tick count. */
1308:os/tasks.c    ****                 prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1309:os/tasks.c    ****             }
1310:os/tasks.c    ****             else
1311:os/tasks.c    ****             {
1312:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
1313:os/tasks.c    ****             }
1314:os/tasks.c    ****         }
1315:os/tasks.c    ****         xAlreadyYielded = xTaskResumeAll();
1316:os/tasks.c    **** 
1317:os/tasks.c    ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1318:os/tasks.c    ****          * have put ourselves to sleep. */
1319:os/tasks.c    ****         if( xAlreadyYielded == pdFALSE )
1320:os/tasks.c    ****         {
1321:os/tasks.c    ****             portYIELD_WITHIN_API();
1322:os/tasks.c    ****         }
1323:os/tasks.c    ****         else
1324:os/tasks.c    ****         {
1325:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
1326:os/tasks.c    ****         }
1327:os/tasks.c    **** 
1328:os/tasks.c    ****         return xShouldDelay;
1329:os/tasks.c    ****     }
1330:os/tasks.c    **** 
1331:os/tasks.c    **** #endif /* INCLUDE_xTaskDelayUntil */
1332:os/tasks.c    **** /*-----------------------------------------------------------*/
1333:os/tasks.c    **** 
1334:os/tasks.c    **** #if ( INCLUDE_vTaskDelay == 1 )
1335:os/tasks.c    **** 
1336:os/tasks.c    ****     void vTaskDelay( const TickType_t xTicksToDelay )
1337:os/tasks.c    ****     {
1338:os/tasks.c    ****         BaseType_t xAlreadyYielded = pdFALSE;
1339:os/tasks.c    **** 
1340:os/tasks.c    ****         /* A delay time of zero just forces a reschedule. */
1341:os/tasks.c    ****         if( xTicksToDelay > ( TickType_t ) 0U )
1342:os/tasks.c    ****         {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 25


1343:os/tasks.c    ****             configASSERT( uxSchedulerSuspended == 0 );
1344:os/tasks.c    ****             vTaskSuspendAll();
1345:os/tasks.c    ****             {
1346:os/tasks.c    ****                 traceTASK_DELAY();
1347:os/tasks.c    **** 
1348:os/tasks.c    ****                 /* A task that is removed from the event list while the
1349:os/tasks.c    ****                  * scheduler is suspended will not get placed in the ready
1350:os/tasks.c    ****                  * list or removed from the blocked list until the scheduler
1351:os/tasks.c    ****                  * is resumed.
1352:os/tasks.c    ****                  *
1353:os/tasks.c    ****                  * This task cannot be in an event list as it is the currently
1354:os/tasks.c    ****                  * executing task. */
1355:os/tasks.c    ****                 prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1356:os/tasks.c    ****             }
1357:os/tasks.c    ****             xAlreadyYielded = xTaskResumeAll();
1358:os/tasks.c    ****         }
1359:os/tasks.c    ****         else
1360:os/tasks.c    ****         {
1361:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
1362:os/tasks.c    ****         }
1363:os/tasks.c    **** 
1364:os/tasks.c    ****         /* Force a reschedule if xTaskResumeAll has not already done so, we may
1365:os/tasks.c    ****          * have put ourselves to sleep. */
1366:os/tasks.c    ****         if( xAlreadyYielded == pdFALSE )
1367:os/tasks.c    ****         {
1368:os/tasks.c    ****             portYIELD_WITHIN_API();
1369:os/tasks.c    ****         }
1370:os/tasks.c    ****         else
1371:os/tasks.c    ****         {
1372:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
1373:os/tasks.c    ****         }
1374:os/tasks.c    ****     }
1375:os/tasks.c    **** 
1376:os/tasks.c    **** #endif /* INCLUDE_vTaskDelay */
1377:os/tasks.c    **** /*-----------------------------------------------------------*/
1378:os/tasks.c    **** 
1379:os/tasks.c    **** #if ( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDe
1380:os/tasks.c    **** 
1381:os/tasks.c    ****     eTaskState eTaskGetState( TaskHandle_t xTask )
1382:os/tasks.c    ****     {
1383:os/tasks.c    ****         eTaskState eReturn;
1384:os/tasks.c    ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
1385:os/tasks.c    ****         const TCB_t * const pxTCB = xTask;
1386:os/tasks.c    **** 
1387:os/tasks.c    ****         configASSERT( pxTCB );
1388:os/tasks.c    **** 
1389:os/tasks.c    ****         if( pxTCB == pxCurrentTCB )
1390:os/tasks.c    ****         {
1391:os/tasks.c    ****             /* The task calling this function is querying its own state. */
1392:os/tasks.c    ****             eReturn = eRunning;
1393:os/tasks.c    ****         }
1394:os/tasks.c    ****         else
1395:os/tasks.c    ****         {
1396:os/tasks.c    ****             taskENTER_CRITICAL();
1397:os/tasks.c    ****             {
1398:os/tasks.c    ****                 pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1399:os/tasks.c    ****                 pxDelayedList = pxDelayedTaskList;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 26


1400:os/tasks.c    ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
1401:os/tasks.c    ****             }
1402:os/tasks.c    ****             taskEXIT_CRITICAL();
1403:os/tasks.c    **** 
1404:os/tasks.c    ****             if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
1405:os/tasks.c    ****             {
1406:os/tasks.c    ****                 /* The task being queried is referenced from one of the Blocked
1407:os/tasks.c    ****                  * lists. */
1408:os/tasks.c    ****                 eReturn = eBlocked;
1409:os/tasks.c    ****             }
1410:os/tasks.c    **** 
1411:os/tasks.c    ****             #if ( INCLUDE_vTaskSuspend == 1 )
1412:os/tasks.c    ****                 else if( pxStateList == &xSuspendedTaskList )
1413:os/tasks.c    ****                 {
1414:os/tasks.c    ****                     /* The task being queried is referenced from the suspended
1415:os/tasks.c    ****                      * list.  Is it genuinely suspended or is it blocked
1416:os/tasks.c    ****                      * indefinitely? */
1417:os/tasks.c    ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1418:os/tasks.c    ****                     {
1419:os/tasks.c    ****                         #if ( configUSE_TASK_NOTIFICATIONS == 1 )
1420:os/tasks.c    ****                             {
1421:os/tasks.c    ****                                 BaseType_t x;
1422:os/tasks.c    **** 
1423:os/tasks.c    ****                                 /* The task does not appear on the event list item of
1424:os/tasks.c    ****                                  * and of the RTOS objects, but could still be in the
1425:os/tasks.c    ****                                  * blocked state if it is waiting on its notification
1426:os/tasks.c    ****                                  * rather than waiting on an object.  If not, is
1427:os/tasks.c    ****                                  * suspended. */
1428:os/tasks.c    ****                                 eReturn = eSuspended;
1429:os/tasks.c    **** 
1430:os/tasks.c    ****                                 for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1431:os/tasks.c    ****                                 {
1432:os/tasks.c    ****                                     if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1433:os/tasks.c    ****                                     {
1434:os/tasks.c    ****                                         eReturn = eBlocked;
1435:os/tasks.c    ****                                         break;
1436:os/tasks.c    ****                                     }
1437:os/tasks.c    ****                                 }
1438:os/tasks.c    ****                             }
1439:os/tasks.c    ****                         #else /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1440:os/tasks.c    ****                             {
1441:os/tasks.c    ****                                 eReturn = eSuspended;
1442:os/tasks.c    ****                             }
1443:os/tasks.c    ****                         #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1444:os/tasks.c    ****                     }
1445:os/tasks.c    ****                     else
1446:os/tasks.c    ****                     {
1447:os/tasks.c    ****                         eReturn = eBlocked;
1448:os/tasks.c    ****                     }
1449:os/tasks.c    ****                 }
1450:os/tasks.c    ****             #endif /* if ( INCLUDE_vTaskSuspend == 1 ) */
1451:os/tasks.c    **** 
1452:os/tasks.c    ****             #if ( INCLUDE_vTaskDelete == 1 )
1453:os/tasks.c    ****                 else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1454:os/tasks.c    ****                 {
1455:os/tasks.c    ****                     /* The task being queried is referenced from the deleted
1456:os/tasks.c    ****                      * tasks list, or it is not referenced from any lists at
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 27


1457:os/tasks.c    ****                      * all. */
1458:os/tasks.c    ****                     eReturn = eDeleted;
1459:os/tasks.c    ****                 }
1460:os/tasks.c    ****             #endif
1461:os/tasks.c    **** 
1462:os/tasks.c    ****             else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer
1463:os/tasks.c    ****             {
1464:os/tasks.c    ****                 /* If the task is not in any other state, it must be in the
1465:os/tasks.c    ****                  * Ready (including pending ready) state. */
1466:os/tasks.c    ****                 eReturn = eReady;
1467:os/tasks.c    ****             }
1468:os/tasks.c    ****         }
1469:os/tasks.c    **** 
1470:os/tasks.c    ****         return eReturn;
1471:os/tasks.c    ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1472:os/tasks.c    **** 
1473:os/tasks.c    **** #endif /* INCLUDE_eTaskGetState */
1474:os/tasks.c    **** /*-----------------------------------------------------------*/
1475:os/tasks.c    **** 
1476:os/tasks.c    **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1477:os/tasks.c    **** 
1478:os/tasks.c    ****     UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1479:os/tasks.c    ****     {
1480:os/tasks.c    ****         TCB_t const * pxTCB;
1481:os/tasks.c    ****         UBaseType_t uxReturn;
1482:os/tasks.c    **** 
1483:os/tasks.c    ****         taskENTER_CRITICAL();
1484:os/tasks.c    ****         {
1485:os/tasks.c    ****             /* If null is passed in here then it is the priority of the task
1486:os/tasks.c    ****              * that called uxTaskPriorityGet() that is being queried. */
1487:os/tasks.c    ****             pxTCB = prvGetTCBFromHandle( xTask );
1488:os/tasks.c    ****             uxReturn = pxTCB->uxPriority;
1489:os/tasks.c    ****         }
1490:os/tasks.c    ****         taskEXIT_CRITICAL();
1491:os/tasks.c    **** 
1492:os/tasks.c    ****         return uxReturn;
1493:os/tasks.c    ****     }
1494:os/tasks.c    **** 
1495:os/tasks.c    **** #endif /* INCLUDE_uxTaskPriorityGet */
1496:os/tasks.c    **** /*-----------------------------------------------------------*/
1497:os/tasks.c    **** 
1498:os/tasks.c    **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1499:os/tasks.c    **** 
1500:os/tasks.c    ****     UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1501:os/tasks.c    ****     {
1502:os/tasks.c    ****         TCB_t const * pxTCB;
1503:os/tasks.c    ****         UBaseType_t uxReturn, uxSavedInterruptState;
1504:os/tasks.c    **** 
1505:os/tasks.c    ****         /* RTOS ports that support interrupt nesting have the concept of a
1506:os/tasks.c    ****          * maximum  system call (or maximum API call) interrupt priority.
1507:os/tasks.c    ****          * Interrupts that are  above the maximum system call priority are keep
1508:os/tasks.c    ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1509:os/tasks.c    ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1510:os/tasks.c    ****          * is defined in FreeRTOSConfig.h then
1511:os/tasks.c    ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1512:os/tasks.c    ****          * failure if a FreeRTOS API function is called from an interrupt that has
1513:os/tasks.c    ****          * been assigned a priority above the configured maximum system call
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 28


1514:os/tasks.c    ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1515:os/tasks.c    ****          * from interrupts  that have been assigned a priority at or (logically)
1516:os/tasks.c    ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1517:os/tasks.c    ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1518:os/tasks.c    ****          * simple as possible.  More information (albeit Cortex-M specific) is
1519:os/tasks.c    ****          * provided on the following link:
1520:os/tasks.c    ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1521:os/tasks.c    ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1522:os/tasks.c    **** 
1523:os/tasks.c    ****         uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1524:os/tasks.c    ****         {
1525:os/tasks.c    ****             /* If null is passed in here then it is the priority of the calling
1526:os/tasks.c    ****              * task that is being queried. */
1527:os/tasks.c    ****             pxTCB = prvGetTCBFromHandle( xTask );
1528:os/tasks.c    ****             uxReturn = pxTCB->uxPriority;
1529:os/tasks.c    ****         }
1530:os/tasks.c    ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1531:os/tasks.c    **** 
1532:os/tasks.c    ****         return uxReturn;
1533:os/tasks.c    ****     }
1534:os/tasks.c    **** 
1535:os/tasks.c    **** #endif /* INCLUDE_uxTaskPriorityGet */
1536:os/tasks.c    **** /*-----------------------------------------------------------*/
1537:os/tasks.c    **** 
1538:os/tasks.c    **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1539:os/tasks.c    **** 
1540:os/tasks.c    ****     void vTaskPrioritySet( TaskHandle_t xTask,
1541:os/tasks.c    ****                            UBaseType_t uxNewPriority )
1542:os/tasks.c    ****     {
1543:os/tasks.c    ****         TCB_t * pxTCB;
1544:os/tasks.c    ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1545:os/tasks.c    ****         BaseType_t xYieldRequired = pdFALSE;
1546:os/tasks.c    **** 
1547:os/tasks.c    ****         configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1548:os/tasks.c    **** 
1549:os/tasks.c    ****         /* Ensure the new priority is valid. */
1550:os/tasks.c    ****         if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1551:os/tasks.c    ****         {
1552:os/tasks.c    ****             uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1553:os/tasks.c    ****         }
1554:os/tasks.c    ****         else
1555:os/tasks.c    ****         {
1556:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
1557:os/tasks.c    ****         }
1558:os/tasks.c    **** 
1559:os/tasks.c    ****         taskENTER_CRITICAL();
1560:os/tasks.c    ****         {
1561:os/tasks.c    ****             /* If null is passed in here then it is the priority of the calling
1562:os/tasks.c    ****              * task that is being changed. */
1563:os/tasks.c    ****             pxTCB = prvGetTCBFromHandle( xTask );
1564:os/tasks.c    **** 
1565:os/tasks.c    ****             traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1566:os/tasks.c    **** 
1567:os/tasks.c    ****             #if ( configUSE_MUTEXES == 1 )
1568:os/tasks.c    ****                 {
1569:os/tasks.c    ****                     uxCurrentBasePriority = pxTCB->uxBasePriority;
1570:os/tasks.c    ****                 }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 29


1571:os/tasks.c    ****             #else
1572:os/tasks.c    ****                 {
1573:os/tasks.c    ****                     uxCurrentBasePriority = pxTCB->uxPriority;
1574:os/tasks.c    ****                 }
1575:os/tasks.c    ****             #endif
1576:os/tasks.c    **** 
1577:os/tasks.c    ****             if( uxCurrentBasePriority != uxNewPriority )
1578:os/tasks.c    ****             {
1579:os/tasks.c    ****                 /* The priority change may have readied a task of higher
1580:os/tasks.c    ****                  * priority than the calling task. */
1581:os/tasks.c    ****                 if( uxNewPriority > uxCurrentBasePriority )
1582:os/tasks.c    ****                 {
1583:os/tasks.c    ****                     if( pxTCB != pxCurrentTCB )
1584:os/tasks.c    ****                     {
1585:os/tasks.c    ****                         /* The priority of a task other than the currently
1586:os/tasks.c    ****                          * running task is being raised.  Is the priority being
1587:os/tasks.c    ****                          * raised above that of the running task? */
1588:os/tasks.c    ****                         if( uxNewPriority >= pxCurrentTCB->uxPriority )
1589:os/tasks.c    ****                         {
1590:os/tasks.c    ****                             xYieldRequired = pdTRUE;
1591:os/tasks.c    ****                         }
1592:os/tasks.c    ****                         else
1593:os/tasks.c    ****                         {
1594:os/tasks.c    ****                             mtCOVERAGE_TEST_MARKER();
1595:os/tasks.c    ****                         }
1596:os/tasks.c    ****                     }
1597:os/tasks.c    ****                     else
1598:os/tasks.c    ****                     {
1599:os/tasks.c    ****                         /* The priority of the running task is being raised,
1600:os/tasks.c    ****                          * but the running task must already be the highest
1601:os/tasks.c    ****                          * priority task able to run so no yield is required. */
1602:os/tasks.c    ****                     }
1603:os/tasks.c    ****                 }
1604:os/tasks.c    ****                 else if( pxTCB == pxCurrentTCB )
1605:os/tasks.c    ****                 {
1606:os/tasks.c    ****                     /* Setting the priority of the running task down means
1607:os/tasks.c    ****                      * there may now be another task of higher priority that
1608:os/tasks.c    ****                      * is ready to execute. */
1609:os/tasks.c    ****                     xYieldRequired = pdTRUE;
1610:os/tasks.c    ****                 }
1611:os/tasks.c    ****                 else
1612:os/tasks.c    ****                 {
1613:os/tasks.c    ****                     /* Setting the priority of any other task down does not
1614:os/tasks.c    ****                      * require a yield as the running task must be above the
1615:os/tasks.c    ****                      * new priority of the task being modified. */
1616:os/tasks.c    ****                 }
1617:os/tasks.c    **** 
1618:os/tasks.c    ****                 /* Remember the ready list the task might be referenced from
1619:os/tasks.c    ****                  * before its uxPriority member is changed so the
1620:os/tasks.c    ****                  * taskRESET_READY_PRIORITY() macro can function correctly. */
1621:os/tasks.c    ****                 uxPriorityUsedOnEntry = pxTCB->uxPriority;
1622:os/tasks.c    **** 
1623:os/tasks.c    ****                 #if ( configUSE_MUTEXES == 1 )
1624:os/tasks.c    ****                     {
1625:os/tasks.c    ****                         /* Only change the priority being used if the task is not
1626:os/tasks.c    ****                          * currently using an inherited priority. */
1627:os/tasks.c    ****                         if( pxTCB->uxBasePriority == pxTCB->uxPriority )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 30


1628:os/tasks.c    ****                         {
1629:os/tasks.c    ****                             pxTCB->uxPriority = uxNewPriority;
1630:os/tasks.c    ****                         }
1631:os/tasks.c    ****                         else
1632:os/tasks.c    ****                         {
1633:os/tasks.c    ****                             mtCOVERAGE_TEST_MARKER();
1634:os/tasks.c    ****                         }
1635:os/tasks.c    **** 
1636:os/tasks.c    ****                         /* The base priority gets set whatever. */
1637:os/tasks.c    ****                         pxTCB->uxBasePriority = uxNewPriority;
1638:os/tasks.c    ****                     }
1639:os/tasks.c    ****                 #else /* if ( configUSE_MUTEXES == 1 ) */
1640:os/tasks.c    ****                     {
1641:os/tasks.c    ****                         pxTCB->uxPriority = uxNewPriority;
1642:os/tasks.c    ****                     }
1643:os/tasks.c    ****                 #endif /* if ( configUSE_MUTEXES == 1 ) */
1644:os/tasks.c    **** 
1645:os/tasks.c    ****                 /* Only reset the event list item value if the value is not
1646:os/tasks.c    ****                  * being used for anything else. */
1647:os/tasks.c    ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_V
1648:os/tasks.c    ****                 {
1649:os/tasks.c    ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX
1650:os/tasks.c    ****                 }
1651:os/tasks.c    ****                 else
1652:os/tasks.c    ****                 {
1653:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
1654:os/tasks.c    ****                 }
1655:os/tasks.c    **** 
1656:os/tasks.c    ****                 /* If the task is in the blocked or suspended list we need do
1657:os/tasks.c    ****                  * nothing more than change its priority variable. However, if
1658:os/tasks.c    ****                  * the task is in a ready list it needs to be removed and placed
1659:os/tasks.c    ****                  * in the list appropriate to its new priority. */
1660:os/tasks.c    ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( px
1661:os/tasks.c    ****                 {
1662:os/tasks.c    ****                     /* The task is currently in its ready list - remove before
1663:os/tasks.c    ****                      * adding it to its new ready list.  As we are in a critical
1664:os/tasks.c    ****                      * section we can do this even if the scheduler is suspended. */
1665:os/tasks.c    ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1666:os/tasks.c    ****                     {
1667:os/tasks.c    ****                         /* It is known that the task is in its ready list so
1668:os/tasks.c    ****                          * there is no need to check again and the port level
1669:os/tasks.c    ****                          * reset macro can be called directly. */
1670:os/tasks.c    ****                         portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1671:os/tasks.c    ****                     }
1672:os/tasks.c    ****                     else
1673:os/tasks.c    ****                     {
1674:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
1675:os/tasks.c    ****                     }
1676:os/tasks.c    **** 
1677:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
1678:os/tasks.c    ****                 }
1679:os/tasks.c    ****                 else
1680:os/tasks.c    ****                 {
1681:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
1682:os/tasks.c    ****                 }
1683:os/tasks.c    **** 
1684:os/tasks.c    ****                 if( xYieldRequired != pdFALSE )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 31


1685:os/tasks.c    ****                 {
1686:os/tasks.c    ****                     taskYIELD_IF_USING_PREEMPTION();
1687:os/tasks.c    ****                 }
1688:os/tasks.c    ****                 else
1689:os/tasks.c    ****                 {
1690:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
1691:os/tasks.c    ****                 }
1692:os/tasks.c    **** 
1693:os/tasks.c    ****                 /* Remove compiler warning about unused variables when the port
1694:os/tasks.c    ****                  * optimised task selection is not being used. */
1695:os/tasks.c    ****                 ( void ) uxPriorityUsedOnEntry;
1696:os/tasks.c    ****             }
1697:os/tasks.c    ****         }
1698:os/tasks.c    ****         taskEXIT_CRITICAL();
1699:os/tasks.c    ****     }
1700:os/tasks.c    **** 
1701:os/tasks.c    **** #endif /* INCLUDE_vTaskPrioritySet */
1702:os/tasks.c    **** /*-----------------------------------------------------------*/
1703:os/tasks.c    **** 
1704:os/tasks.c    **** #if ( INCLUDE_vTaskSuspend == 1 )
1705:os/tasks.c    **** 
1706:os/tasks.c    ****     void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1707:os/tasks.c    ****     {
1708:os/tasks.c    ****         TCB_t * pxTCB;
1709:os/tasks.c    **** 
1710:os/tasks.c    ****         taskENTER_CRITICAL();
1711:os/tasks.c    ****         {
1712:os/tasks.c    ****             /* If null is passed in here then it is the running task that is
1713:os/tasks.c    ****              * being suspended. */
1714:os/tasks.c    ****             pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1715:os/tasks.c    **** 
1716:os/tasks.c    ****             traceTASK_SUSPEND( pxTCB );
1717:os/tasks.c    **** 
1718:os/tasks.c    ****             /* Remove task from the ready/delayed list and place in the
1719:os/tasks.c    ****              * suspended list. */
1720:os/tasks.c    ****             if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1721:os/tasks.c    ****             {
1722:os/tasks.c    ****                 taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1723:os/tasks.c    ****             }
1724:os/tasks.c    ****             else
1725:os/tasks.c    ****             {
1726:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
1727:os/tasks.c    ****             }
1728:os/tasks.c    **** 
1729:os/tasks.c    ****             /* Is the task waiting on an event also? */
1730:os/tasks.c    ****             if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1731:os/tasks.c    ****             {
1732:os/tasks.c    ****                 ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1733:os/tasks.c    ****             }
1734:os/tasks.c    ****             else
1735:os/tasks.c    ****             {
1736:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
1737:os/tasks.c    ****             }
1738:os/tasks.c    **** 
1739:os/tasks.c    ****             vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1740:os/tasks.c    **** 
1741:os/tasks.c    ****             #if ( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 32


1742:os/tasks.c    ****                 {
1743:os/tasks.c    ****                     BaseType_t x;
1744:os/tasks.c    **** 
1745:os/tasks.c    ****                     for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
1746:os/tasks.c    ****                     {
1747:os/tasks.c    ****                         if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
1748:os/tasks.c    ****                         {
1749:os/tasks.c    ****                             /* The task was blocked to wait for a notification, but is
1750:os/tasks.c    ****                              * now suspended, so no notification was received. */
1751:os/tasks.c    ****                             pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
1752:os/tasks.c    ****                         }
1753:os/tasks.c    ****                     }
1754:os/tasks.c    ****                 }
1755:os/tasks.c    ****             #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
1756:os/tasks.c    ****         }
1757:os/tasks.c    ****         taskEXIT_CRITICAL();
1758:os/tasks.c    **** 
1759:os/tasks.c    ****         if( xSchedulerRunning != pdFALSE )
1760:os/tasks.c    ****         {
1761:os/tasks.c    ****             /* Reset the next expected unblock time in case it referred to the
1762:os/tasks.c    ****              * task that is now in the Suspended state. */
1763:os/tasks.c    ****             taskENTER_CRITICAL();
1764:os/tasks.c    ****             {
1765:os/tasks.c    ****                 prvResetNextTaskUnblockTime();
1766:os/tasks.c    ****             }
1767:os/tasks.c    ****             taskEXIT_CRITICAL();
1768:os/tasks.c    ****         }
1769:os/tasks.c    ****         else
1770:os/tasks.c    ****         {
1771:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
1772:os/tasks.c    ****         }
1773:os/tasks.c    **** 
1774:os/tasks.c    ****         if( pxTCB == pxCurrentTCB )
1775:os/tasks.c    ****         {
1776:os/tasks.c    ****             if( xSchedulerRunning != pdFALSE )
1777:os/tasks.c    ****             {
1778:os/tasks.c    ****                 /* The current task has just been suspended. */
1779:os/tasks.c    ****                 configASSERT( uxSchedulerSuspended == 0 );
1780:os/tasks.c    ****                 portYIELD_WITHIN_API();
1781:os/tasks.c    ****             }
1782:os/tasks.c    ****             else
1783:os/tasks.c    ****             {
1784:os/tasks.c    ****                 /* The scheduler is not running, but the task that was pointed
1785:os/tasks.c    ****                  * to by pxCurrentTCB has just been suspended and pxCurrentTCB
1786:os/tasks.c    ****                  * must be adjusted to point to a different task. */
1787:os/tasks.c    ****                 if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*li
1788:os/tasks.c    ****                 {
1789:os/tasks.c    ****                     /* No other tasks are ready, so set pxCurrentTCB back to
1790:os/tasks.c    ****                      * NULL so when the next task is created pxCurrentTCB will
1791:os/tasks.c    ****                      * be set to point to it no matter what its relative priority
1792:os/tasks.c    ****                      * is. */
1793:os/tasks.c    ****                     pxCurrentTCB = NULL;
1794:os/tasks.c    ****                 }
1795:os/tasks.c    ****                 else
1796:os/tasks.c    ****                 {
1797:os/tasks.c    ****                     vTaskSwitchContext();
1798:os/tasks.c    ****                 }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 33


1799:os/tasks.c    ****             }
1800:os/tasks.c    ****         }
1801:os/tasks.c    ****         else
1802:os/tasks.c    ****         {
1803:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
1804:os/tasks.c    ****         }
1805:os/tasks.c    ****     }
1806:os/tasks.c    **** 
1807:os/tasks.c    **** #endif /* INCLUDE_vTaskSuspend */
1808:os/tasks.c    **** /*-----------------------------------------------------------*/
1809:os/tasks.c    **** 
1810:os/tasks.c    **** #if ( INCLUDE_vTaskSuspend == 1 )
1811:os/tasks.c    **** 
1812:os/tasks.c    ****     static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1813:os/tasks.c    ****     {
  28              		.loc 1 1813 5 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
1814:os/tasks.c    ****         BaseType_t xReturn = pdFALSE;
  33              		.loc 1 1814 9 view .LVU1
1815:os/tasks.c    ****         const TCB_t * const pxTCB = xTask;
  34              		.loc 1 1815 9 view .LVU2
1816:os/tasks.c    **** 
1817:os/tasks.c    ****         /* Accesses xPendingReadyList so must be called from a critical
1818:os/tasks.c    ****          * section. */
1819:os/tasks.c    **** 
1820:os/tasks.c    ****         /* It does not make sense to check if the calling task is suspended. */
1821:os/tasks.c    ****         configASSERT( xTask );
  35              		.loc 1 1821 9 view .LVU3
  36 0000 28B1     		cbz	r0, .L8
  37              		.loc 1 1821 30 discriminator 2 view .LVU4
1822:os/tasks.c    **** 
1823:os/tasks.c    ****         /* Is the task being resumed actually in the suspended list? */
1824:os/tasks.c    ****         if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  38              		.loc 1 1824 9 discriminator 2 view .LVU5
  39              		.loc 1 1824 13 is_stmt 0 discriminator 2 view .LVU6
  40 0002 4169     		ldr	r1, [r0, #20]
  41              		.loc 1 1824 11 discriminator 2 view .LVU7
  42 0004 0D4A     		ldr	r2, .L10
  43 0006 9142     		cmp	r1, r2
  44 0008 0CD0     		beq	.L9
1814:os/tasks.c    ****         const TCB_t * const pxTCB = xTask;
  45              		.loc 1 1814 20 view .LVU8
  46 000a 0020     		movs	r0, #0
  47              	.LVL1:
1814:os/tasks.c    ****         const TCB_t * const pxTCB = xTask;
  48              		.loc 1 1814 20 view .LVU9
  49 000c 7047     		bx	lr
  50              	.LVL2:
  51              	.L8:
1821:os/tasks.c    **** 
  52              		.loc 1 1821 9 is_stmt 1 view .LVU10
  53              	.LBB133:
  54              	.LBI133:
  55              		.file 2 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h"
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 34


   1:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*
   2:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FreeRTOS Kernel V10.4.3
   3:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
   5:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * subject to the following conditions:
  11:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  12:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * copies or substantial portions of the Software.
  14:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  15:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  22:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * https://www.FreeRTOS.org
  23:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * https://github.com/FreeRTOS
  24:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  25:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * 1 tab == 4 spaces!
  26:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  27:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  28:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  29:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** #ifndef PORTMACRO_H
  30:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define PORTMACRO_H
  31:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  32:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifdef __cplusplus
  33:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         extern "C" {
  34:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
  35:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  36:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------
  37:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * Port specific definitions.
  38:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  39:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * given hardware and compiler.
  41:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *
  42:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * These settings should not be altered.
  43:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  *-----------------------------------------------------------
  44:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  */
  45:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  46:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Type definitions. */
  47:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portCHAR          char
  48:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portFLOAT         float
  49:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portDOUBLE        double
  50:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portLONG          long
  51:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSHORT         short
  52:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSTACK_TYPE    uint32_t
  53:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portBASE_TYPE     long
  54:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  55:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     typedef portSTACK_TYPE   StackType_t;
  56:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     typedef long             BaseType_t;
  57:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     typedef unsigned long    UBaseType_t;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 35


  58:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  59:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #if ( configUSE_16_BIT_TICKS == 1 )
  60:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         typedef uint16_t     TickType_t;
  61:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffff
  62:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #else
  63:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         typedef uint32_t     TickType_t;
  64:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portMAX_DELAY              ( TickType_t ) 0xffffffffUL
  65:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  66:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * not need to be guarded with a critical section. */
  68:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portTICK_TYPE_IS_ATOMIC    1
  69:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
  70:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  71:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  72:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specifics. */
  73:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSTACK_GROWTH      ( -1 )
  74:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portTICK_PERIOD_MS    ( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portBYTE_ALIGNMENT    8
  76:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portDONT_DISCARD      __attribute__( ( used ) )
  77:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  78:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  79:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Scheduler utilities. */
  80:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portYIELD()                                 \
  81:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {                                                   \
  82:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* Set a PendSV to request a context switch. */ \
  83:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT; \
  84:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****                                                         \
  85:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* Barriers are normally not required but do ensure the code is completely \
  86:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****          * within the specified behaviour for the architecture. */ \
  87:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile ( "dsb" ::: "memory" );                     \
  88:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile ( "isb" );                                  \
  89:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
  90:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  91:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portNVIC_INT_CTRL_REG     ( *( ( volatile uint32_t * ) 0xe000ed04 ) )
  92:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portNVIC_PENDSVSET_BIT    ( 1UL << 28UL )
  93:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portEND_SWITCHING_ISR( xSwitchRequired )    if( xSwitchRequired != pdFALSE ) portYIELD(
  94:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portYIELD_FROM_ISR( x )                     portEND_SWITCHING_ISR( x )
  95:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
  96:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
  97:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Critical section management. */
  98:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     extern void vPortEnterCritical( void );
  99:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     extern void vPortExitCritical( void );
 100:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portSET_INTERRUPT_MASK_FROM_ISR()         ulPortRaiseBASEPRI()
 101:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portCLEAR_INTERRUPT_MASK_FROM_ISR( x )    vPortSetBASEPRI( x )
 102:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portDISABLE_INTERRUPTS()                  vPortRaiseBASEPRI()
 103:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portENABLE_INTERRUPTS()                   vPortSetBASEPRI( 0 )
 104:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portENTER_CRITICAL()                      vPortEnterCritical()
 105:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portEXIT_CRITICAL()                       vPortExitCritical()
 106:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 107:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 108:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 109:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 110:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * not necessary for to use this port.  They are defined so the common demo files
 111:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****  * (which build with all the ports) will build. */
 112:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portTASK_FUNCTION_PROTO( vFunction, pvParameters )    void vFunction( void * pvParamete
 113:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portTASK_FUNCTION( vFunction, pvParameters )          void vFunction( void * pvParamete
 114:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 36


 115:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 116:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Tickless idle/low power functionality. */
 117:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifndef portSUPPRESS_TICKS_AND_SLEEP
 118:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 119:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime )    vPortSuppressTicksAndSleep( xE
 120:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 121:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 122:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 123:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Architecture specific optimisations. */
 124:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 125:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define configUSE_PORT_OPTIMISED_TASK_SELECTION    1
 126:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 127:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 128:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 129:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 130:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Generic helper function. */
 131:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t 
 132:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         {
 133:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             uint8_t ucReturn;
 134:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 135:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 136:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 137:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             return ucReturn;
 138:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         }
 139:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 140:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Check the configuration. */
 141:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #if ( configMAX_PRIORITIES > 32 )
 142:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             #error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIO
 143:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #endif
 144:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 145:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* Store/clear the ready priorities in a bit map. */
 146:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities )    ( uxReadyPriorities )
 147:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities )     ( uxReadyPriorities )
 148:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 149:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 150:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 151:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities )    uxTopPriority = ( 3
 152:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 153:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 154:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 155:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 156:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 157:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifdef configASSERT
 158:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         void vPortValidateInterruptPriority( void );
 159:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portASSERT_IF_INTERRUPT_PRIORITY_INVALID()    vPortValidateInterruptPriority()
 160:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 161:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 162:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /* portNOP() is not required by this port. */
 163:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portNOP()
 164:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 165:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #define portINLINE              __inline
 166:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 167:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #ifndef portFORCE_INLINE
 168:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         #define portFORCE_INLINE    inline __attribute__( ( always_inline ) )
 169:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     #endif
 170:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 171:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 37


 172:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 173:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         uint32_t ulCurrentInterrupt;
 174:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         BaseType_t xReturn;
 175:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 176:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* Obtain the number of the currently executing interrupt. */
 177:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 178:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 179:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         if( ulCurrentInterrupt == 0 )
 180:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         {
 181:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             xReturn = pdFALSE;
 182:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         }
 183:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         else
 184:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         {
 185:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             xReturn = pdTRUE;
 186:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         }
 187:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 188:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         return xReturn;
 189:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 190:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 191:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 192:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     portFORCE_INLINE static void vPortRaiseBASEPRI( void )
  56              		.loc 2 193 34 view .LVU11
  57              	.LBB134:
 194:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         uint32_t ulNewBASEPRI;
  58              		.loc 2 195 9 view .LVU12
 196:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile
  59              		.loc 2 197 9 view .LVU13
  60              		.syntax unified
  61              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
  62 000e 4FF05003 			mov r3, #80												
  63 0012 72B6     		cpsid i													
  64 0014 83F31188 		msr basepri, r3											
  65 0018 BFF36F8F 		isb														
  66 001c BFF34F8F 		dsb														
  67 0020 62B6     		cpsie i													
  68              	
  69              	@ 0 "" 2
  70              	.LVL3:
  71              		.thumb
  72              		.syntax unified
  73              	.L3:
  74              		.loc 2 197 9 is_stmt 0 view .LVU14
  75              	.LBE134:
  76              	.LBE133:
1821:os/tasks.c    **** 
  77              		.loc 1 1821 9 is_stmt 1 discriminator 1 view .LVU15
1821:os/tasks.c    **** 
  78              		.loc 1 1821 9 discriminator 1 view .LVU16
1821:os/tasks.c    **** 
  79              		.loc 1 1821 9 discriminator 1 view .LVU17
  80 0022 FEE7     		b	.L3
  81              	.L9:
1825:os/tasks.c    ****         {
1826:os/tasks.c    ****             /* Has the task already been resumed from within an ISR? */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 38


1827:os/tasks.c    ****             if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALS
  82              		.loc 1 1827 13 view .LVU18
  83              		.loc 1 1827 17 is_stmt 0 view .LVU19
  84 0024 836A     		ldr	r3, [r0, #40]
  85              		.loc 1 1827 15 view .LVU20
  86 0026 064A     		ldr	r2, .L10+4
  87 0028 9342     		cmp	r3, r2
  88 002a 02D0     		beq	.L6
1828:os/tasks.c    ****             {
1829:os/tasks.c    ****                 /* Is it in the suspended list because it is in the Suspended
1830:os/tasks.c    ****                  * state, or because is is blocked with no timeout? */
1831:os/tasks.c    ****                 if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint
  89              		.loc 1 1831 17 is_stmt 1 view .LVU21
  90              		.loc 1 1831 19 is_stmt 0 view .LVU22
  91 002c 1BB1     		cbz	r3, .L7
1814:os/tasks.c    ****         const TCB_t * const pxTCB = xTask;
  92              		.loc 1 1814 20 view .LVU23
  93 002e 0020     		movs	r0, #0
  94              	.LVL4:
1814:os/tasks.c    ****         const TCB_t * const pxTCB = xTask;
  95              		.loc 1 1814 20 view .LVU24
  96 0030 7047     		bx	lr
  97              	.LVL5:
  98              	.L6:
1814:os/tasks.c    ****         const TCB_t * const pxTCB = xTask;
  99              		.loc 1 1814 20 view .LVU25
 100 0032 0020     		movs	r0, #0
 101              	.LVL6:
1814:os/tasks.c    ****         const TCB_t * const pxTCB = xTask;
 102              		.loc 1 1814 20 view .LVU26
 103 0034 7047     		bx	lr
 104              	.LVL7:
 105              	.L7:
1832:os/tasks.c    ****                 {
1833:os/tasks.c    ****                     xReturn = pdTRUE;
 106              		.loc 1 1833 29 view .LVU27
 107 0036 0120     		movs	r0, #1
 108              	.LVL8:
1834:os/tasks.c    ****                 }
1835:os/tasks.c    ****                 else
1836:os/tasks.c    ****                 {
1837:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
1838:os/tasks.c    ****                 }
1839:os/tasks.c    ****             }
1840:os/tasks.c    ****             else
1841:os/tasks.c    ****             {
1842:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
1843:os/tasks.c    ****             }
1844:os/tasks.c    ****         }
1845:os/tasks.c    ****         else
1846:os/tasks.c    ****         {
1847:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
 109              		.loc 1 1847 37 is_stmt 1 view .LVU28
1848:os/tasks.c    ****         }
1849:os/tasks.c    **** 
1850:os/tasks.c    ****         return xReturn;
 110              		.loc 1 1850 9 view .LVU29
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 39


1851:os/tasks.c    ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 111              		.loc 1 1851 5 is_stmt 0 view .LVU30
 112 0038 7047     		bx	lr
 113              	.L11:
 114 003a 00BF     		.align	2
 115              	.L10:
 116 003c 00000000 		.word	.LANCHOR0
 117 0040 00000000 		.word	.LANCHOR1
 118              		.cfi_endproc
 119              	.LFE16:
 121              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 122              		.align	1
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu fpv5-d16
 128              	prvTaskCheckFreeStackSpace:
 129              	.LVL9:
 130              	.LFB47:
1852:os/tasks.c    **** 
1853:os/tasks.c    **** #endif /* INCLUDE_vTaskSuspend */
1854:os/tasks.c    **** /*-----------------------------------------------------------*/
1855:os/tasks.c    **** 
1856:os/tasks.c    **** #if ( INCLUDE_vTaskSuspend == 1 )
1857:os/tasks.c    **** 
1858:os/tasks.c    ****     void vTaskResume( TaskHandle_t xTaskToResume )
1859:os/tasks.c    ****     {
1860:os/tasks.c    ****         TCB_t * const pxTCB = xTaskToResume;
1861:os/tasks.c    **** 
1862:os/tasks.c    ****         /* It does not make sense to resume the calling task. */
1863:os/tasks.c    ****         configASSERT( xTaskToResume );
1864:os/tasks.c    **** 
1865:os/tasks.c    ****         /* The parameter cannot be NULL as it is impossible to resume the
1866:os/tasks.c    ****          * currently executing task. */
1867:os/tasks.c    ****         if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
1868:os/tasks.c    ****         {
1869:os/tasks.c    ****             taskENTER_CRITICAL();
1870:os/tasks.c    ****             {
1871:os/tasks.c    ****                 if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1872:os/tasks.c    ****                 {
1873:os/tasks.c    ****                     traceTASK_RESUME( pxTCB );
1874:os/tasks.c    **** 
1875:os/tasks.c    ****                     /* The ready list can be accessed even if the scheduler is
1876:os/tasks.c    ****                      * suspended because this is inside a critical section. */
1877:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1878:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
1879:os/tasks.c    **** 
1880:os/tasks.c    ****                     /* A higher priority task may have just been resumed. */
1881:os/tasks.c    ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1882:os/tasks.c    ****                     {
1883:os/tasks.c    ****                         /* This yield may not cause the task just resumed to run,
1884:os/tasks.c    ****                          * but will leave the lists in the correct state for the
1885:os/tasks.c    ****                          * next yield. */
1886:os/tasks.c    ****                         taskYIELD_IF_USING_PREEMPTION();
1887:os/tasks.c    ****                     }
1888:os/tasks.c    ****                     else
1889:os/tasks.c    ****                     {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 40


1890:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
1891:os/tasks.c    ****                     }
1892:os/tasks.c    ****                 }
1893:os/tasks.c    ****                 else
1894:os/tasks.c    ****                 {
1895:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
1896:os/tasks.c    ****                 }
1897:os/tasks.c    ****             }
1898:os/tasks.c    ****             taskEXIT_CRITICAL();
1899:os/tasks.c    ****         }
1900:os/tasks.c    ****         else
1901:os/tasks.c    ****         {
1902:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
1903:os/tasks.c    ****         }
1904:os/tasks.c    ****     }
1905:os/tasks.c    **** 
1906:os/tasks.c    **** #endif /* INCLUDE_vTaskSuspend */
1907:os/tasks.c    **** 
1908:os/tasks.c    **** /*-----------------------------------------------------------*/
1909:os/tasks.c    **** 
1910:os/tasks.c    **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1911:os/tasks.c    **** 
1912:os/tasks.c    ****     BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1913:os/tasks.c    ****     {
1914:os/tasks.c    ****         BaseType_t xYieldRequired = pdFALSE;
1915:os/tasks.c    ****         TCB_t * const pxTCB = xTaskToResume;
1916:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
1917:os/tasks.c    **** 
1918:os/tasks.c    ****         configASSERT( xTaskToResume );
1919:os/tasks.c    **** 
1920:os/tasks.c    ****         /* RTOS ports that support interrupt nesting have the concept of a
1921:os/tasks.c    ****          * maximum  system call (or maximum API call) interrupt priority.
1922:os/tasks.c    ****          * Interrupts that are  above the maximum system call priority are keep
1923:os/tasks.c    ****          * permanently enabled, even when the RTOS kernel is in a critical section,
1924:os/tasks.c    ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1925:os/tasks.c    ****          * is defined in FreeRTOSConfig.h then
1926:os/tasks.c    ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1927:os/tasks.c    ****          * failure if a FreeRTOS API function is called from an interrupt that has
1928:os/tasks.c    ****          * been assigned a priority above the configured maximum system call
1929:os/tasks.c    ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
1930:os/tasks.c    ****          * from interrupts  that have been assigned a priority at or (logically)
1931:os/tasks.c    ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
1932:os/tasks.c    ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
1933:os/tasks.c    ****          * simple as possible.  More information (albeit Cortex-M specific) is
1934:os/tasks.c    ****          * provided on the following link:
1935:os/tasks.c    ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
1936:os/tasks.c    ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1937:os/tasks.c    **** 
1938:os/tasks.c    ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1939:os/tasks.c    ****         {
1940:os/tasks.c    ****             if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1941:os/tasks.c    ****             {
1942:os/tasks.c    ****                 traceTASK_RESUME_FROM_ISR( pxTCB );
1943:os/tasks.c    **** 
1944:os/tasks.c    ****                 /* Check the ready lists can be accessed. */
1945:os/tasks.c    ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1946:os/tasks.c    ****                 {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 41


1947:os/tasks.c    ****                     /* Ready lists can be accessed so move the task from the
1948:os/tasks.c    ****                      * suspended list to the ready list directly. */
1949:os/tasks.c    ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1950:os/tasks.c    ****                     {
1951:os/tasks.c    ****                         xYieldRequired = pdTRUE;
1952:os/tasks.c    **** 
1953:os/tasks.c    ****                         /* Mark that a yield is pending in case the user is not
1954:os/tasks.c    ****                          * using the return value to initiate a context switch
1955:os/tasks.c    ****                          * from the ISR using portYIELD_FROM_ISR. */
1956:os/tasks.c    ****                         xYieldPending = pdTRUE;
1957:os/tasks.c    ****                     }
1958:os/tasks.c    ****                     else
1959:os/tasks.c    ****                     {
1960:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
1961:os/tasks.c    ****                     }
1962:os/tasks.c    **** 
1963:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1964:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
1965:os/tasks.c    ****                 }
1966:os/tasks.c    ****                 else
1967:os/tasks.c    ****                 {
1968:os/tasks.c    ****                     /* The delayed or ready lists cannot be accessed so the task
1969:os/tasks.c    ****                      * is held in the pending ready list until the scheduler is
1970:os/tasks.c    ****                      * unsuspended. */
1971:os/tasks.c    ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1972:os/tasks.c    ****                 }
1973:os/tasks.c    ****             }
1974:os/tasks.c    ****             else
1975:os/tasks.c    ****             {
1976:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
1977:os/tasks.c    ****             }
1978:os/tasks.c    ****         }
1979:os/tasks.c    ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1980:os/tasks.c    **** 
1981:os/tasks.c    ****         return xYieldRequired;
1982:os/tasks.c    ****     }
1983:os/tasks.c    **** 
1984:os/tasks.c    **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1985:os/tasks.c    **** /*-----------------------------------------------------------*/
1986:os/tasks.c    **** 
1987:os/tasks.c    **** void vTaskStartScheduler( void )
1988:os/tasks.c    **** {
1989:os/tasks.c    ****     BaseType_t xReturn;
1990:os/tasks.c    **** 
1991:os/tasks.c    ****     /* Add the idle task at the lowest priority. */
1992:os/tasks.c    ****     #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
1993:os/tasks.c    ****         {
1994:os/tasks.c    ****             StaticTask_t * pxIdleTaskTCBBuffer = NULL;
1995:os/tasks.c    ****             StackType_t * pxIdleTaskStackBuffer = NULL;
1996:os/tasks.c    ****             uint32_t ulIdleTaskStackSize;
1997:os/tasks.c    **** 
1998:os/tasks.c    ****             /* The Idle task is created using user provided RAM - obtain the
1999:os/tasks.c    ****              * address of the RAM then create the idle task. */
2000:os/tasks.c    ****             vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTas
2001:os/tasks.c    ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
2002:os/tasks.c    ****                                                  configIDLE_TASK_NAME,
2003:os/tasks.c    ****                                                  ulIdleTaskStackSize,
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 42


2004:os/tasks.c    ****                                                  ( void * ) NULL,       /*lint !e961.  The cast is 
2005:os/tasks.c    ****                                                  portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIO
2006:os/tasks.c    ****                                                  pxIdleTaskStackBuffer,
2007:os/tasks.c    ****                                                  pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exceptio
2008:os/tasks.c    **** 
2009:os/tasks.c    ****             if( xIdleTaskHandle != NULL )
2010:os/tasks.c    ****             {
2011:os/tasks.c    ****                 xReturn = pdPASS;
2012:os/tasks.c    ****             }
2013:os/tasks.c    ****             else
2014:os/tasks.c    ****             {
2015:os/tasks.c    ****                 xReturn = pdFAIL;
2016:os/tasks.c    ****             }
2017:os/tasks.c    ****         }
2018:os/tasks.c    ****     #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
2019:os/tasks.c    ****         {
2020:os/tasks.c    ****             /* The Idle task is being created using dynamically allocated RAM. */
2021:os/tasks.c    ****             xReturn = xTaskCreate( prvIdleTask,
2022:os/tasks.c    ****                                    configIDLE_TASK_NAME,
2023:os/tasks.c    ****                                    configMINIMAL_STACK_SIZE,
2024:os/tasks.c    ****                                    ( void * ) NULL,
2025:os/tasks.c    ****                                    portPRIVILEGE_BIT,  /* In effect ( tskIDLE_PRIORITY | portPRIVIL
2026:os/tasks.c    ****                                    &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as i
2027:os/tasks.c    ****         }
2028:os/tasks.c    ****     #endif /* configSUPPORT_STATIC_ALLOCATION */
2029:os/tasks.c    **** 
2030:os/tasks.c    ****     #if ( configUSE_TIMERS == 1 )
2031:os/tasks.c    ****         {
2032:os/tasks.c    ****             if( xReturn == pdPASS )
2033:os/tasks.c    ****             {
2034:os/tasks.c    ****                 xReturn = xTimerCreateTimerTask();
2035:os/tasks.c    ****             }
2036:os/tasks.c    ****             else
2037:os/tasks.c    ****             {
2038:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
2039:os/tasks.c    ****             }
2040:os/tasks.c    ****         }
2041:os/tasks.c    ****     #endif /* configUSE_TIMERS */
2042:os/tasks.c    **** 
2043:os/tasks.c    ****     if( xReturn == pdPASS )
2044:os/tasks.c    ****     {
2045:os/tasks.c    ****         /* freertos_tasks_c_additions_init() should only be called if the user
2046:os/tasks.c    ****          * definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2047:os/tasks.c    ****          * the only macro called by the function. */
2048:os/tasks.c    ****         #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2049:os/tasks.c    ****             {
2050:os/tasks.c    ****                 freertos_tasks_c_additions_init();
2051:os/tasks.c    ****             }
2052:os/tasks.c    ****         #endif
2053:os/tasks.c    **** 
2054:os/tasks.c    ****         /* Interrupts are turned off here, to ensure a tick does not occur
2055:os/tasks.c    ****          * before or during the call to xPortStartScheduler().  The stacks of
2056:os/tasks.c    ****          * the created tasks contain a status word with interrupts switched on
2057:os/tasks.c    ****          * so interrupts will automatically get re-enabled when the first task
2058:os/tasks.c    ****          * starts to run. */
2059:os/tasks.c    ****         portDISABLE_INTERRUPTS();
2060:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 43


2061:os/tasks.c    ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
2062:os/tasks.c    ****             {
2063:os/tasks.c    ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
2064:os/tasks.c    ****                  * structure specific to the task that will run first.
2065:os/tasks.c    ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
2066:os/tasks.c    ****                  * for additional information. */
2067:os/tasks.c    ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2068:os/tasks.c    ****             }
2069:os/tasks.c    ****         #endif /* configUSE_NEWLIB_REENTRANT */
2070:os/tasks.c    **** 
2071:os/tasks.c    ****         xNextTaskUnblockTime = portMAX_DELAY;
2072:os/tasks.c    ****         xSchedulerRunning = pdTRUE;
2073:os/tasks.c    ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
2074:os/tasks.c    **** 
2075:os/tasks.c    ****         /* If configGENERATE_RUN_TIME_STATS is defined then the following
2076:os/tasks.c    ****          * macro must be defined to configure the timer/counter used to generate
2077:os/tasks.c    ****          * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2078:os/tasks.c    ****          * is set to 0 and the following line fails to build then ensure you do not
2079:os/tasks.c    ****          * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2080:os/tasks.c    ****          * FreeRTOSConfig.h file. */
2081:os/tasks.c    ****         portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2082:os/tasks.c    **** 
2083:os/tasks.c    ****         traceTASK_SWITCHED_IN();
2084:os/tasks.c    **** 
2085:os/tasks.c    ****         /* Setting up the timer tick is hardware specific and thus in the
2086:os/tasks.c    ****          * portable interface. */
2087:os/tasks.c    ****         if( xPortStartScheduler() != pdFALSE )
2088:os/tasks.c    ****         {
2089:os/tasks.c    ****             /* Should not reach here as if the scheduler is running the
2090:os/tasks.c    ****              * function will not return. */
2091:os/tasks.c    ****         }
2092:os/tasks.c    ****         else
2093:os/tasks.c    ****         {
2094:os/tasks.c    ****             /* Should only reach here if a task calls xTaskEndScheduler(). */
2095:os/tasks.c    ****         }
2096:os/tasks.c    ****     }
2097:os/tasks.c    ****     else
2098:os/tasks.c    ****     {
2099:os/tasks.c    ****         /* This line will only be reached if the kernel could not be started,
2100:os/tasks.c    ****          * because there was not enough FreeRTOS heap to create the idle task
2101:os/tasks.c    ****          * or the timer task. */
2102:os/tasks.c    ****         configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2103:os/tasks.c    ****     }
2104:os/tasks.c    **** 
2105:os/tasks.c    ****     /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2106:os/tasks.c    ****      * meaning xIdleTaskHandle is not used anywhere else. */
2107:os/tasks.c    ****     ( void ) xIdleTaskHandle;
2108:os/tasks.c    **** 
2109:os/tasks.c    ****     /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
2110:os/tasks.c    ****      * from getting optimized out as it is no longer used by the kernel. */
2111:os/tasks.c    ****     ( void ) uxTopUsedPriority;
2112:os/tasks.c    **** }
2113:os/tasks.c    **** /*-----------------------------------------------------------*/
2114:os/tasks.c    **** 
2115:os/tasks.c    **** void vTaskEndScheduler( void )
2116:os/tasks.c    **** {
2117:os/tasks.c    ****     /* Stop the scheduler interrupts and call the portable scheduler end
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 44


2118:os/tasks.c    ****      * routine so the original ISRs can be restored if necessary.  The port
2119:os/tasks.c    ****      * layer must ensure interrupts enable  bit is left in the correct state. */
2120:os/tasks.c    ****     portDISABLE_INTERRUPTS();
2121:os/tasks.c    ****     xSchedulerRunning = pdFALSE;
2122:os/tasks.c    ****     vPortEndScheduler();
2123:os/tasks.c    **** }
2124:os/tasks.c    **** /*----------------------------------------------------------*/
2125:os/tasks.c    **** 
2126:os/tasks.c    **** void vTaskSuspendAll( void )
2127:os/tasks.c    **** {
2128:os/tasks.c    ****     /* A critical section is not required as the variable is of type
2129:os/tasks.c    ****      * BaseType_t.  Please read Richard Barry's reply in the following link to a
2130:os/tasks.c    ****      * post in the FreeRTOS support forum before reporting this as a bug! -
2131:os/tasks.c    ****      * https://goo.gl/wu4acr */
2132:os/tasks.c    **** 
2133:os/tasks.c    ****     /* portSOFRWARE_BARRIER() is only implemented for emulated/simulated ports that
2134:os/tasks.c    ****      * do not otherwise exhibit real time behaviour. */
2135:os/tasks.c    ****     portSOFTWARE_BARRIER();
2136:os/tasks.c    **** 
2137:os/tasks.c    ****     /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
2138:os/tasks.c    ****      * is used to allow calls to vTaskSuspendAll() to nest. */
2139:os/tasks.c    ****     ++uxSchedulerSuspended;
2140:os/tasks.c    **** 
2141:os/tasks.c    ****     /* Enforces ordering for ports and optimised compilers that may otherwise place
2142:os/tasks.c    ****      * the above increment elsewhere. */
2143:os/tasks.c    ****     portMEMORY_BARRIER();
2144:os/tasks.c    **** }
2145:os/tasks.c    **** /*----------------------------------------------------------*/
2146:os/tasks.c    **** 
2147:os/tasks.c    **** #if ( configUSE_TICKLESS_IDLE != 0 )
2148:os/tasks.c    **** 
2149:os/tasks.c    ****     static TickType_t prvGetExpectedIdleTime( void )
2150:os/tasks.c    ****     {
2151:os/tasks.c    ****         TickType_t xReturn;
2152:os/tasks.c    ****         UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2153:os/tasks.c    **** 
2154:os/tasks.c    ****         /* uxHigherPriorityReadyTasks takes care of the case where
2155:os/tasks.c    ****          * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2156:os/tasks.c    ****          * task that are in the Ready state, even though the idle task is
2157:os/tasks.c    ****          * running. */
2158:os/tasks.c    ****         #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2159:os/tasks.c    ****             {
2160:os/tasks.c    ****                 if( uxTopReadyPriority > tskIDLE_PRIORITY )
2161:os/tasks.c    ****                 {
2162:os/tasks.c    ****                     uxHigherPriorityReadyTasks = pdTRUE;
2163:os/tasks.c    ****                 }
2164:os/tasks.c    ****             }
2165:os/tasks.c    ****         #else
2166:os/tasks.c    ****             {
2167:os/tasks.c    ****                 const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2168:os/tasks.c    **** 
2169:os/tasks.c    ****                 /* When port optimised task selection is used the uxTopReadyPriority
2170:os/tasks.c    ****                  * variable is used as a bit map.  If bits other than the least
2171:os/tasks.c    ****                  * significant bit are set then there are tasks that have a priority
2172:os/tasks.c    ****                  * above the idle priority that are in the Ready state.  This takes
2173:os/tasks.c    ****                  * care of the case where the co-operative scheduler is in use. */
2174:os/tasks.c    ****                 if( uxTopReadyPriority > uxLeastSignificantBit )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 45


2175:os/tasks.c    ****                 {
2176:os/tasks.c    ****                     uxHigherPriorityReadyTasks = pdTRUE;
2177:os/tasks.c    ****                 }
2178:os/tasks.c    ****             }
2179:os/tasks.c    ****         #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */
2180:os/tasks.c    **** 
2181:os/tasks.c    ****         if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2182:os/tasks.c    ****         {
2183:os/tasks.c    ****             xReturn = 0;
2184:os/tasks.c    ****         }
2185:os/tasks.c    ****         else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2186:os/tasks.c    ****         {
2187:os/tasks.c    ****             /* There are other idle priority tasks in the ready state.  If
2188:os/tasks.c    ****              * time slicing is used then the very next tick interrupt must be
2189:os/tasks.c    ****              * processed. */
2190:os/tasks.c    ****             xReturn = 0;
2191:os/tasks.c    ****         }
2192:os/tasks.c    ****         else if( uxHigherPriorityReadyTasks != pdFALSE )
2193:os/tasks.c    ****         {
2194:os/tasks.c    ****             /* There are tasks in the Ready state that have a priority above the
2195:os/tasks.c    ****              * idle priority.  This path can only be reached if
2196:os/tasks.c    ****              * configUSE_PREEMPTION is 0. */
2197:os/tasks.c    ****             xReturn = 0;
2198:os/tasks.c    ****         }
2199:os/tasks.c    ****         else
2200:os/tasks.c    ****         {
2201:os/tasks.c    ****             xReturn = xNextTaskUnblockTime - xTickCount;
2202:os/tasks.c    ****         }
2203:os/tasks.c    **** 
2204:os/tasks.c    ****         return xReturn;
2205:os/tasks.c    ****     }
2206:os/tasks.c    **** 
2207:os/tasks.c    **** #endif /* configUSE_TICKLESS_IDLE */
2208:os/tasks.c    **** /*----------------------------------------------------------*/
2209:os/tasks.c    **** 
2210:os/tasks.c    **** BaseType_t xTaskResumeAll( void )
2211:os/tasks.c    **** {
2212:os/tasks.c    ****     TCB_t * pxTCB = NULL;
2213:os/tasks.c    ****     BaseType_t xAlreadyYielded = pdFALSE;
2214:os/tasks.c    **** 
2215:os/tasks.c    ****     /* If uxSchedulerSuspended is zero then this function does not match a
2216:os/tasks.c    ****      * previous call to vTaskSuspendAll(). */
2217:os/tasks.c    ****     configASSERT( uxSchedulerSuspended );
2218:os/tasks.c    **** 
2219:os/tasks.c    ****     /* It is possible that an ISR caused a task to be removed from an event
2220:os/tasks.c    ****      * list while the scheduler was suspended.  If this was the case then the
2221:os/tasks.c    ****      * removed task will have been added to the xPendingReadyList.  Once the
2222:os/tasks.c    ****      * scheduler has been resumed it is safe to move all the pending ready
2223:os/tasks.c    ****      * tasks from this list into their appropriate ready list. */
2224:os/tasks.c    ****     taskENTER_CRITICAL();
2225:os/tasks.c    ****     {
2226:os/tasks.c    ****         --uxSchedulerSuspended;
2227:os/tasks.c    **** 
2228:os/tasks.c    ****         if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2229:os/tasks.c    ****         {
2230:os/tasks.c    ****             if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2231:os/tasks.c    ****             {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 46


2232:os/tasks.c    ****                 /* Move any readied tasks from the pending list into the
2233:os/tasks.c    ****                  * appropriate ready list. */
2234:os/tasks.c    ****                 while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2235:os/tasks.c    ****                 {
2236:os/tasks.c    ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 vo
2237:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2238:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2239:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
2240:os/tasks.c    **** 
2241:os/tasks.c    ****                     /* If the moved task has a priority higher than the current
2242:os/tasks.c    ****                      * task then a yield must be performed. */
2243:os/tasks.c    ****                     if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2244:os/tasks.c    ****                     {
2245:os/tasks.c    ****                         xYieldPending = pdTRUE;
2246:os/tasks.c    ****                     }
2247:os/tasks.c    ****                     else
2248:os/tasks.c    ****                     {
2249:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
2250:os/tasks.c    ****                     }
2251:os/tasks.c    ****                 }
2252:os/tasks.c    **** 
2253:os/tasks.c    ****                 if( pxTCB != NULL )
2254:os/tasks.c    ****                 {
2255:os/tasks.c    ****                     /* A task was unblocked while the scheduler was suspended,
2256:os/tasks.c    ****                      * which may have prevented the next unblock time from being
2257:os/tasks.c    ****                      * re-calculated, in which case re-calculate it now.  Mainly
2258:os/tasks.c    ****                      * important for low power tickless implementations, where
2259:os/tasks.c    ****                      * this can prevent an unnecessary exit from low power
2260:os/tasks.c    ****                      * state. */
2261:os/tasks.c    ****                     prvResetNextTaskUnblockTime();
2262:os/tasks.c    ****                 }
2263:os/tasks.c    **** 
2264:os/tasks.c    ****                 /* If any ticks occurred while the scheduler was suspended then
2265:os/tasks.c    ****                  * they should be processed now.  This ensures the tick count does
2266:os/tasks.c    ****                  * not  slip, and that any delayed tasks are resumed at the correct
2267:os/tasks.c    ****                  * time. */
2268:os/tasks.c    ****                 {
2269:os/tasks.c    ****                     TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
2270:os/tasks.c    **** 
2271:os/tasks.c    ****                     if( xPendedCounts > ( TickType_t ) 0U )
2272:os/tasks.c    ****                     {
2273:os/tasks.c    ****                         do
2274:os/tasks.c    ****                         {
2275:os/tasks.c    ****                             if( xTaskIncrementTick() != pdFALSE )
2276:os/tasks.c    ****                             {
2277:os/tasks.c    ****                                 xYieldPending = pdTRUE;
2278:os/tasks.c    ****                             }
2279:os/tasks.c    ****                             else
2280:os/tasks.c    ****                             {
2281:os/tasks.c    ****                                 mtCOVERAGE_TEST_MARKER();
2282:os/tasks.c    ****                             }
2283:os/tasks.c    **** 
2284:os/tasks.c    ****                             --xPendedCounts;
2285:os/tasks.c    ****                         } while( xPendedCounts > ( TickType_t ) 0U );
2286:os/tasks.c    **** 
2287:os/tasks.c    ****                         xPendedTicks = 0;
2288:os/tasks.c    ****                     }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 47


2289:os/tasks.c    ****                     else
2290:os/tasks.c    ****                     {
2291:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
2292:os/tasks.c    ****                     }
2293:os/tasks.c    ****                 }
2294:os/tasks.c    **** 
2295:os/tasks.c    ****                 if( xYieldPending != pdFALSE )
2296:os/tasks.c    ****                 {
2297:os/tasks.c    ****                     #if ( configUSE_PREEMPTION != 0 )
2298:os/tasks.c    ****                         {
2299:os/tasks.c    ****                             xAlreadyYielded = pdTRUE;
2300:os/tasks.c    ****                         }
2301:os/tasks.c    ****                     #endif
2302:os/tasks.c    ****                     taskYIELD_IF_USING_PREEMPTION();
2303:os/tasks.c    ****                 }
2304:os/tasks.c    ****                 else
2305:os/tasks.c    ****                 {
2306:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
2307:os/tasks.c    ****                 }
2308:os/tasks.c    ****             }
2309:os/tasks.c    ****         }
2310:os/tasks.c    ****         else
2311:os/tasks.c    ****         {
2312:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
2313:os/tasks.c    ****         }
2314:os/tasks.c    ****     }
2315:os/tasks.c    ****     taskEXIT_CRITICAL();
2316:os/tasks.c    **** 
2317:os/tasks.c    ****     return xAlreadyYielded;
2318:os/tasks.c    **** }
2319:os/tasks.c    **** /*-----------------------------------------------------------*/
2320:os/tasks.c    **** 
2321:os/tasks.c    **** TickType_t xTaskGetTickCount( void )
2322:os/tasks.c    **** {
2323:os/tasks.c    ****     TickType_t xTicks;
2324:os/tasks.c    **** 
2325:os/tasks.c    ****     /* Critical section required if running on a 16 bit processor. */
2326:os/tasks.c    ****     portTICK_TYPE_ENTER_CRITICAL();
2327:os/tasks.c    ****     {
2328:os/tasks.c    ****         xTicks = xTickCount;
2329:os/tasks.c    ****     }
2330:os/tasks.c    ****     portTICK_TYPE_EXIT_CRITICAL();
2331:os/tasks.c    **** 
2332:os/tasks.c    ****     return xTicks;
2333:os/tasks.c    **** }
2334:os/tasks.c    **** /*-----------------------------------------------------------*/
2335:os/tasks.c    **** 
2336:os/tasks.c    **** TickType_t xTaskGetTickCountFromISR( void )
2337:os/tasks.c    **** {
2338:os/tasks.c    ****     TickType_t xReturn;
2339:os/tasks.c    ****     UBaseType_t uxSavedInterruptStatus;
2340:os/tasks.c    **** 
2341:os/tasks.c    ****     /* RTOS ports that support interrupt nesting have the concept of a maximum
2342:os/tasks.c    ****      * system call (or maximum API call) interrupt priority.  Interrupts that are
2343:os/tasks.c    ****      * above the maximum system call priority are kept permanently enabled, even
2344:os/tasks.c    ****      * when the RTOS kernel is in a critical section, but cannot make any calls to
2345:os/tasks.c    ****      * FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 48


2346:os/tasks.c    ****      * then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2347:os/tasks.c    ****      * failure if a FreeRTOS API function is called from an interrupt that has been
2348:os/tasks.c    ****      * assigned a priority above the configured maximum system call priority.
2349:os/tasks.c    ****      * Only FreeRTOS functions that end in FromISR can be called from interrupts
2350:os/tasks.c    ****      * that have been assigned a priority at or (logically) below the maximum
2351:os/tasks.c    ****      * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
2352:os/tasks.c    ****      * safe API to ensure interrupt entry is as fast and as simple as possible.
2353:os/tasks.c    ****      * More information (albeit Cortex-M specific) is provided on the following
2354:os/tasks.c    ****      * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
2355:os/tasks.c    ****     portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2356:os/tasks.c    **** 
2357:os/tasks.c    ****     uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2358:os/tasks.c    ****     {
2359:os/tasks.c    ****         xReturn = xTickCount;
2360:os/tasks.c    ****     }
2361:os/tasks.c    ****     portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2362:os/tasks.c    **** 
2363:os/tasks.c    ****     return xReturn;
2364:os/tasks.c    **** }
2365:os/tasks.c    **** /*-----------------------------------------------------------*/
2366:os/tasks.c    **** 
2367:os/tasks.c    **** UBaseType_t uxTaskGetNumberOfTasks( void )
2368:os/tasks.c    **** {
2369:os/tasks.c    ****     /* A critical section is not required because the variables are of type
2370:os/tasks.c    ****      * BaseType_t. */
2371:os/tasks.c    ****     return uxCurrentNumberOfTasks;
2372:os/tasks.c    **** }
2373:os/tasks.c    **** /*-----------------------------------------------------------*/
2374:os/tasks.c    **** 
2375:os/tasks.c    **** char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed f
2376:os/tasks.c    **** {
2377:os/tasks.c    ****     TCB_t * pxTCB;
2378:os/tasks.c    **** 
2379:os/tasks.c    ****     /* If null is passed in here then the name of the calling task is being
2380:os/tasks.c    ****      * queried. */
2381:os/tasks.c    ****     pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2382:os/tasks.c    ****     configASSERT( pxTCB );
2383:os/tasks.c    ****     return &( pxTCB->pcTaskName[ 0 ] );
2384:os/tasks.c    **** }
2385:os/tasks.c    **** /*-----------------------------------------------------------*/
2386:os/tasks.c    **** 
2387:os/tasks.c    **** #if ( INCLUDE_xTaskGetHandle == 1 )
2388:os/tasks.c    **** 
2389:os/tasks.c    ****     static TCB_t * prvSearchForNameWithinSingleList( List_t * pxList,
2390:os/tasks.c    ****                                                      const char pcNameToQuery[] )
2391:os/tasks.c    ****     {
2392:os/tasks.c    ****         TCB_t * pxNextTCB, * pxFirstTCB, * pxReturn = NULL;
2393:os/tasks.c    ****         UBaseType_t x;
2394:os/tasks.c    ****         char cNextChar;
2395:os/tasks.c    ****         BaseType_t xBreakLoop;
2396:os/tasks.c    **** 
2397:os/tasks.c    ****         /* This function is called with the scheduler suspended. */
2398:os/tasks.c    **** 
2399:os/tasks.c    ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2400:os/tasks.c    ****         {
2401:os/tasks.c    ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
2402:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 49


2403:os/tasks.c    ****             do
2404:os/tasks.c    ****             {
2405:os/tasks.c    ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
2406:os/tasks.c    **** 
2407:os/tasks.c    ****                 /* Check each character in the name looking for a match or
2408:os/tasks.c    ****                  * mismatch. */
2409:os/tasks.c    ****                 xBreakLoop = pdFALSE;
2410:os/tasks.c    **** 
2411:os/tasks.c    ****                 for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2412:os/tasks.c    ****                 {
2413:os/tasks.c    ****                     cNextChar = pxNextTCB->pcTaskName[ x ];
2414:os/tasks.c    **** 
2415:os/tasks.c    ****                     if( cNextChar != pcNameToQuery[ x ] )
2416:os/tasks.c    ****                     {
2417:os/tasks.c    ****                         /* Characters didn't match. */
2418:os/tasks.c    ****                         xBreakLoop = pdTRUE;
2419:os/tasks.c    ****                     }
2420:os/tasks.c    ****                     else if( cNextChar == ( char ) 0x00 )
2421:os/tasks.c    ****                     {
2422:os/tasks.c    ****                         /* Both strings terminated, a match must have been
2423:os/tasks.c    ****                          * found. */
2424:os/tasks.c    ****                         pxReturn = pxNextTCB;
2425:os/tasks.c    ****                         xBreakLoop = pdTRUE;
2426:os/tasks.c    ****                     }
2427:os/tasks.c    ****                     else
2428:os/tasks.c    ****                     {
2429:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
2430:os/tasks.c    ****                     }
2431:os/tasks.c    **** 
2432:os/tasks.c    ****                     if( xBreakLoop != pdFALSE )
2433:os/tasks.c    ****                     {
2434:os/tasks.c    ****                         break;
2435:os/tasks.c    ****                     }
2436:os/tasks.c    ****                 }
2437:os/tasks.c    **** 
2438:os/tasks.c    ****                 if( pxReturn != NULL )
2439:os/tasks.c    ****                 {
2440:os/tasks.c    ****                     /* The handle has been found. */
2441:os/tasks.c    ****                     break;
2442:os/tasks.c    ****                 }
2443:os/tasks.c    ****             } while( pxNextTCB != pxFirstTCB );
2444:os/tasks.c    ****         }
2445:os/tasks.c    ****         else
2446:os/tasks.c    ****         {
2447:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
2448:os/tasks.c    ****         }
2449:os/tasks.c    **** 
2450:os/tasks.c    ****         return pxReturn;
2451:os/tasks.c    ****     }
2452:os/tasks.c    **** 
2453:os/tasks.c    **** #endif /* INCLUDE_xTaskGetHandle */
2454:os/tasks.c    **** /*-----------------------------------------------------------*/
2455:os/tasks.c    **** 
2456:os/tasks.c    **** #if ( INCLUDE_xTaskGetHandle == 1 )
2457:os/tasks.c    **** 
2458:os/tasks.c    ****     TaskHandle_t xTaskGetHandle( const char * pcNameToQuery ) /*lint !e971 Unqualified char types a
2459:os/tasks.c    ****     {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 50


2460:os/tasks.c    ****         UBaseType_t uxQueue = configMAX_PRIORITIES;
2461:os/tasks.c    ****         TCB_t * pxTCB;
2462:os/tasks.c    **** 
2463:os/tasks.c    ****         /* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2464:os/tasks.c    ****         configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2465:os/tasks.c    **** 
2466:os/tasks.c    ****         vTaskSuspendAll();
2467:os/tasks.c    ****         {
2468:os/tasks.c    ****             /* Search the ready lists. */
2469:os/tasks.c    ****             do
2470:os/tasks.c    ****             {
2471:os/tasks.c    ****                 uxQueue--;
2472:os/tasks.c    ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueu
2473:os/tasks.c    **** 
2474:os/tasks.c    ****                 if( pxTCB != NULL )
2475:os/tasks.c    ****                 {
2476:os/tasks.c    ****                     /* Found the handle. */
2477:os/tasks.c    ****                     break;
2478:os/tasks.c    ****                 }
2479:os/tasks.c    ****             } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as 
2480:os/tasks.c    **** 
2481:os/tasks.c    ****             /* Search the delayed lists. */
2482:os/tasks.c    ****             if( pxTCB == NULL )
2483:os/tasks.c    ****             {
2484:os/tasks.c    ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQ
2485:os/tasks.c    ****             }
2486:os/tasks.c    **** 
2487:os/tasks.c    ****             if( pxTCB == NULL )
2488:os/tasks.c    ****             {
2489:os/tasks.c    ****                 pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, p
2490:os/tasks.c    ****             }
2491:os/tasks.c    **** 
2492:os/tasks.c    ****             #if ( INCLUDE_vTaskSuspend == 1 )
2493:os/tasks.c    ****                 {
2494:os/tasks.c    ****                     if( pxTCB == NULL )
2495:os/tasks.c    ****                     {
2496:os/tasks.c    ****                         /* Search the suspended list. */
2497:os/tasks.c    ****                         pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuer
2498:os/tasks.c    ****                     }
2499:os/tasks.c    ****                 }
2500:os/tasks.c    ****             #endif
2501:os/tasks.c    **** 
2502:os/tasks.c    ****             #if ( INCLUDE_vTaskDelete == 1 )
2503:os/tasks.c    ****                 {
2504:os/tasks.c    ****                     if( pxTCB == NULL )
2505:os/tasks.c    ****                     {
2506:os/tasks.c    ****                         /* Search the deleted list. */
2507:os/tasks.c    ****                         pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcName
2508:os/tasks.c    ****                     }
2509:os/tasks.c    ****                 }
2510:os/tasks.c    ****             #endif
2511:os/tasks.c    ****         }
2512:os/tasks.c    ****         ( void ) xTaskResumeAll();
2513:os/tasks.c    **** 
2514:os/tasks.c    ****         return pxTCB;
2515:os/tasks.c    ****     }
2516:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 51


2517:os/tasks.c    **** #endif /* INCLUDE_xTaskGetHandle */
2518:os/tasks.c    **** /*-----------------------------------------------------------*/
2519:os/tasks.c    **** 
2520:os/tasks.c    **** #if ( configUSE_TRACE_FACILITY == 1 )
2521:os/tasks.c    **** 
2522:os/tasks.c    ****     UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray,
2523:os/tasks.c    ****                                       const UBaseType_t uxArraySize,
2524:os/tasks.c    ****                                       uint32_t * const pulTotalRunTime )
2525:os/tasks.c    ****     {
2526:os/tasks.c    ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2527:os/tasks.c    **** 
2528:os/tasks.c    ****         vTaskSuspendAll();
2529:os/tasks.c    ****         {
2530:os/tasks.c    ****             /* Is there a space in the array for each task in the system? */
2531:os/tasks.c    ****             if( uxArraySize >= uxCurrentNumberOfTasks )
2532:os/tasks.c    ****             {
2533:os/tasks.c    ****                 /* Fill in an TaskStatus_t structure with information on each
2534:os/tasks.c    ****                  * task in the Ready state. */
2535:os/tasks.c    ****                 do
2536:os/tasks.c    ****                 {
2537:os/tasks.c    ****                     uxQueue--;
2538:os/tasks.c    ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
2539:os/tasks.c    ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
2540:os/tasks.c    **** 
2541:os/tasks.c    ****                 /* Fill in an TaskStatus_t structure with information on each
2542:os/tasks.c    ****                  * task in the Blocked state. */
2543:os/tasks.c    ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2544:os/tasks.c    ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
2545:os/tasks.c    **** 
2546:os/tasks.c    ****                 #if ( INCLUDE_vTaskDelete == 1 )
2547:os/tasks.c    ****                     {
2548:os/tasks.c    ****                         /* Fill in an TaskStatus_t structure with information on
2549:os/tasks.c    ****                          * each task that has been deleted but not yet cleaned up. */
2550:os/tasks.c    ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2551:os/tasks.c    ****                     }
2552:os/tasks.c    ****                 #endif
2553:os/tasks.c    **** 
2554:os/tasks.c    ****                 #if ( INCLUDE_vTaskSuspend == 1 )
2555:os/tasks.c    ****                     {
2556:os/tasks.c    ****                         /* Fill in an TaskStatus_t structure with information on
2557:os/tasks.c    ****                          * each task in the Suspended state. */
2558:os/tasks.c    ****                         uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &
2559:os/tasks.c    ****                     }
2560:os/tasks.c    ****                 #endif
2561:os/tasks.c    **** 
2562:os/tasks.c    ****                 #if ( configGENERATE_RUN_TIME_STATS == 1 )
2563:os/tasks.c    ****                     {
2564:os/tasks.c    ****                         if( pulTotalRunTime != NULL )
2565:os/tasks.c    ****                         {
2566:os/tasks.c    ****                             #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2567:os/tasks.c    ****                                 portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2568:os/tasks.c    ****                             #else
2569:os/tasks.c    ****                                 *pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2570:os/tasks.c    ****                             #endif
2571:os/tasks.c    ****                         }
2572:os/tasks.c    ****                     }
2573:os/tasks.c    ****                 #else /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 52


2574:os/tasks.c    ****                     {
2575:os/tasks.c    ****                         if( pulTotalRunTime != NULL )
2576:os/tasks.c    ****                         {
2577:os/tasks.c    ****                             *pulTotalRunTime = 0;
2578:os/tasks.c    ****                         }
2579:os/tasks.c    ****                     }
2580:os/tasks.c    ****                 #endif /* if ( configGENERATE_RUN_TIME_STATS == 1 ) */
2581:os/tasks.c    ****             }
2582:os/tasks.c    ****             else
2583:os/tasks.c    ****             {
2584:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
2585:os/tasks.c    ****             }
2586:os/tasks.c    ****         }
2587:os/tasks.c    ****         ( void ) xTaskResumeAll();
2588:os/tasks.c    **** 
2589:os/tasks.c    ****         return uxTask;
2590:os/tasks.c    ****     }
2591:os/tasks.c    **** 
2592:os/tasks.c    **** #endif /* configUSE_TRACE_FACILITY */
2593:os/tasks.c    **** /*----------------------------------------------------------*/
2594:os/tasks.c    **** 
2595:os/tasks.c    **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2596:os/tasks.c    **** 
2597:os/tasks.c    ****     TaskHandle_t xTaskGetIdleTaskHandle( void )
2598:os/tasks.c    ****     {
2599:os/tasks.c    ****         /* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2600:os/tasks.c    ****          * started, then xIdleTaskHandle will be NULL. */
2601:os/tasks.c    ****         configASSERT( ( xIdleTaskHandle != NULL ) );
2602:os/tasks.c    ****         return xIdleTaskHandle;
2603:os/tasks.c    ****     }
2604:os/tasks.c    **** 
2605:os/tasks.c    **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2606:os/tasks.c    **** /*----------------------------------------------------------*/
2607:os/tasks.c    **** 
2608:os/tasks.c    **** /* This conditional compilation should use inequality to 0, not equality to 1.
2609:os/tasks.c    ****  * This is to ensure vTaskStepTick() is available when user defined low power mode
2610:os/tasks.c    ****  * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2611:os/tasks.c    ****  * 1. */
2612:os/tasks.c    **** #if ( configUSE_TICKLESS_IDLE != 0 )
2613:os/tasks.c    **** 
2614:os/tasks.c    ****     void vTaskStepTick( const TickType_t xTicksToJump )
2615:os/tasks.c    ****     {
2616:os/tasks.c    ****         /* Correct the tick count value after a period during which the tick
2617:os/tasks.c    ****          * was suppressed.  Note this does *not* call the tick hook function for
2618:os/tasks.c    ****          * each stepped tick. */
2619:os/tasks.c    ****         configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2620:os/tasks.c    ****         xTickCount += xTicksToJump;
2621:os/tasks.c    ****         traceINCREASE_TICK_COUNT( xTicksToJump );
2622:os/tasks.c    ****     }
2623:os/tasks.c    **** 
2624:os/tasks.c    **** #endif /* configUSE_TICKLESS_IDLE */
2625:os/tasks.c    **** /*----------------------------------------------------------*/
2626:os/tasks.c    **** 
2627:os/tasks.c    **** BaseType_t xTaskCatchUpTicks( TickType_t xTicksToCatchUp )
2628:os/tasks.c    **** {
2629:os/tasks.c    ****     BaseType_t xYieldOccurred;
2630:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 53


2631:os/tasks.c    ****     /* Must not be called with the scheduler suspended as the implementation
2632:os/tasks.c    ****      * relies on xPendedTicks being wound down to 0 in xTaskResumeAll(). */
2633:os/tasks.c    ****     configASSERT( uxSchedulerSuspended == 0 );
2634:os/tasks.c    **** 
2635:os/tasks.c    ****     /* Use xPendedTicks to mimic xTicksToCatchUp number of ticks occurring when
2636:os/tasks.c    ****      * the scheduler is suspended so the ticks are executed in xTaskResumeAll(). */
2637:os/tasks.c    ****     vTaskSuspendAll();
2638:os/tasks.c    ****     xPendedTicks += xTicksToCatchUp;
2639:os/tasks.c    ****     xYieldOccurred = xTaskResumeAll();
2640:os/tasks.c    **** 
2641:os/tasks.c    ****     return xYieldOccurred;
2642:os/tasks.c    **** }
2643:os/tasks.c    **** /*----------------------------------------------------------*/
2644:os/tasks.c    **** 
2645:os/tasks.c    **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2646:os/tasks.c    **** 
2647:os/tasks.c    ****     BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2648:os/tasks.c    ****     {
2649:os/tasks.c    ****         TCB_t * pxTCB = xTask;
2650:os/tasks.c    ****         BaseType_t xReturn;
2651:os/tasks.c    **** 
2652:os/tasks.c    ****         configASSERT( pxTCB );
2653:os/tasks.c    **** 
2654:os/tasks.c    ****         vTaskSuspendAll();
2655:os/tasks.c    ****         {
2656:os/tasks.c    ****             /* A task can only be prematurely removed from the Blocked state if
2657:os/tasks.c    ****              * it is actually in the Blocked state. */
2658:os/tasks.c    ****             if( eTaskGetState( xTask ) == eBlocked )
2659:os/tasks.c    ****             {
2660:os/tasks.c    ****                 xReturn = pdPASS;
2661:os/tasks.c    **** 
2662:os/tasks.c    ****                 /* Remove the reference to the task from the blocked list.  An
2663:os/tasks.c    ****                  * interrupt won't touch the xStateListItem because the
2664:os/tasks.c    ****                  * scheduler is suspended. */
2665:os/tasks.c    ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2666:os/tasks.c    **** 
2667:os/tasks.c    ****                 /* Is the task waiting on an event also?  If so remove it from
2668:os/tasks.c    ****                  * the event list too.  Interrupts can touch the event list item,
2669:os/tasks.c    ****                  * even though the scheduler is suspended, so a critical section
2670:os/tasks.c    ****                  * is used. */
2671:os/tasks.c    ****                 taskENTER_CRITICAL();
2672:os/tasks.c    ****                 {
2673:os/tasks.c    ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2674:os/tasks.c    ****                     {
2675:os/tasks.c    ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2676:os/tasks.c    **** 
2677:os/tasks.c    ****                         /* This lets the task know it was forcibly removed from the
2678:os/tasks.c    ****                          * blocked state so it should not re-evaluate its block time and
2679:os/tasks.c    ****                          * then block again. */
2680:os/tasks.c    ****                         pxTCB->ucDelayAborted = pdTRUE;
2681:os/tasks.c    ****                     }
2682:os/tasks.c    ****                     else
2683:os/tasks.c    ****                     {
2684:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
2685:os/tasks.c    ****                     }
2686:os/tasks.c    ****                 }
2687:os/tasks.c    ****                 taskEXIT_CRITICAL();
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 54


2688:os/tasks.c    **** 
2689:os/tasks.c    ****                 /* Place the unblocked task into the appropriate ready list. */
2690:os/tasks.c    ****                 prvAddTaskToReadyList( pxTCB );
2691:os/tasks.c    **** 
2692:os/tasks.c    ****                 /* A task being unblocked cannot cause an immediate context
2693:os/tasks.c    ****                  * switch if preemption is turned off. */
2694:os/tasks.c    ****                 #if ( configUSE_PREEMPTION == 1 )
2695:os/tasks.c    ****                     {
2696:os/tasks.c    ****                         /* Preemption is on, but a context switch should only be
2697:os/tasks.c    ****                          * performed if the unblocked task has a priority that is
2698:os/tasks.c    ****                          * higher than the currently executing task. */
2699:os/tasks.c    ****                         if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2700:os/tasks.c    ****                         {
2701:os/tasks.c    ****                             /* Pend the yield to be performed when the scheduler
2702:os/tasks.c    ****                              * is unsuspended. */
2703:os/tasks.c    ****                             xYieldPending = pdTRUE;
2704:os/tasks.c    ****                         }
2705:os/tasks.c    ****                         else
2706:os/tasks.c    ****                         {
2707:os/tasks.c    ****                             mtCOVERAGE_TEST_MARKER();
2708:os/tasks.c    ****                         }
2709:os/tasks.c    ****                     }
2710:os/tasks.c    ****                 #endif /* configUSE_PREEMPTION */
2711:os/tasks.c    ****             }
2712:os/tasks.c    ****             else
2713:os/tasks.c    ****             {
2714:os/tasks.c    ****                 xReturn = pdFAIL;
2715:os/tasks.c    ****             }
2716:os/tasks.c    ****         }
2717:os/tasks.c    ****         ( void ) xTaskResumeAll();
2718:os/tasks.c    **** 
2719:os/tasks.c    ****         return xReturn;
2720:os/tasks.c    ****     }
2721:os/tasks.c    **** 
2722:os/tasks.c    **** #endif /* INCLUDE_xTaskAbortDelay */
2723:os/tasks.c    **** /*----------------------------------------------------------*/
2724:os/tasks.c    **** 
2725:os/tasks.c    **** BaseType_t xTaskIncrementTick( void )
2726:os/tasks.c    **** {
2727:os/tasks.c    ****     TCB_t * pxTCB;
2728:os/tasks.c    ****     TickType_t xItemValue;
2729:os/tasks.c    ****     BaseType_t xSwitchRequired = pdFALSE;
2730:os/tasks.c    **** 
2731:os/tasks.c    ****     /* Called by the portable layer each time a tick interrupt occurs.
2732:os/tasks.c    ****      * Increments the tick then checks to see if the new tick value will cause any
2733:os/tasks.c    ****      * tasks to be unblocked. */
2734:os/tasks.c    ****     traceTASK_INCREMENT_TICK( xTickCount );
2735:os/tasks.c    **** 
2736:os/tasks.c    ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2737:os/tasks.c    ****     {
2738:os/tasks.c    ****         /* Minor optimisation.  The tick count cannot change in this
2739:os/tasks.c    ****          * block. */
2740:os/tasks.c    ****         const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2741:os/tasks.c    **** 
2742:os/tasks.c    ****         /* Increment the RTOS tick, switching the delayed and overflowed
2743:os/tasks.c    ****          * delayed lists if it wraps to 0. */
2744:os/tasks.c    ****         xTickCount = xConstTickCount;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 55


2745:os/tasks.c    **** 
2746:os/tasks.c    ****         if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to fa
2747:os/tasks.c    ****         {
2748:os/tasks.c    ****             taskSWITCH_DELAYED_LISTS();
2749:os/tasks.c    ****         }
2750:os/tasks.c    ****         else
2751:os/tasks.c    ****         {
2752:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
2753:os/tasks.c    ****         }
2754:os/tasks.c    **** 
2755:os/tasks.c    ****         /* See if this tick has made a timeout expire.  Tasks are stored in
2756:os/tasks.c    ****          * the  queue in the order of their wake time - meaning once one task
2757:os/tasks.c    ****          * has been found whose block time has not expired there is no need to
2758:os/tasks.c    ****          * look any further down the list. */
2759:os/tasks.c    ****         if( xConstTickCount >= xNextTaskUnblockTime )
2760:os/tasks.c    ****         {
2761:os/tasks.c    ****             for( ; ; )
2762:os/tasks.c    ****             {
2763:os/tasks.c    ****                 if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2764:os/tasks.c    ****                 {
2765:os/tasks.c    ****                     /* The delayed list is empty.  Set xNextTaskUnblockTime
2766:os/tasks.c    ****                      * to the maximum possible value so it is extremely
2767:os/tasks.c    ****                      * unlikely that the
2768:os/tasks.c    ****                      * if( xTickCount >= xNextTaskUnblockTime ) test will pass
2769:os/tasks.c    ****                      * next time through. */
2770:os/tasks.c    ****                     xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts
2771:os/tasks.c    ****                     break;
2772:os/tasks.c    ****                 }
2773:os/tasks.c    ****                 else
2774:os/tasks.c    ****                 {
2775:os/tasks.c    ****                     /* The delayed list is not empty, get the value of the
2776:os/tasks.c    ****                      * item at the head of the delayed list.  This is the time
2777:os/tasks.c    ****                      * at which the task at the head of the delayed list must
2778:os/tasks.c    ****                      * be removed from the Blocked state. */
2779:os/tasks.c    ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * 
2780:os/tasks.c    ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2781:os/tasks.c    **** 
2782:os/tasks.c    ****                     if( xConstTickCount < xItemValue )
2783:os/tasks.c    ****                     {
2784:os/tasks.c    ****                         /* It is not time to unblock this item yet, but the
2785:os/tasks.c    ****                          * item value is the time at which the task at the head
2786:os/tasks.c    ****                          * of the blocked list must be removed from the Blocked
2787:os/tasks.c    ****                          * state -  so record the item value in
2788:os/tasks.c    ****                          * xNextTaskUnblockTime. */
2789:os/tasks.c    ****                         xNextTaskUnblockTime = xItemValue;
2790:os/tasks.c    ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
2791:os/tasks.c    ****                     }
2792:os/tasks.c    ****                     else
2793:os/tasks.c    ****                     {
2794:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
2795:os/tasks.c    ****                     }
2796:os/tasks.c    **** 
2797:os/tasks.c    ****                     /* It is time to remove the item from the Blocked state. */
2798:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2799:os/tasks.c    **** 
2800:os/tasks.c    ****                     /* Is the task waiting on an event also?  If so remove
2801:os/tasks.c    ****                      * it from the event list. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 56


2802:os/tasks.c    ****                     if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2803:os/tasks.c    ****                     {
2804:os/tasks.c    ****                         ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2805:os/tasks.c    ****                     }
2806:os/tasks.c    ****                     else
2807:os/tasks.c    ****                     {
2808:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
2809:os/tasks.c    ****                     }
2810:os/tasks.c    **** 
2811:os/tasks.c    ****                     /* Place the unblocked task into the appropriate ready
2812:os/tasks.c    ****                      * list. */
2813:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
2814:os/tasks.c    **** 
2815:os/tasks.c    ****                     /* A task being unblocked cannot cause an immediate
2816:os/tasks.c    ****                      * context switch if preemption is turned off. */
2817:os/tasks.c    ****                     #if ( configUSE_PREEMPTION == 1 )
2818:os/tasks.c    ****                         {
2819:os/tasks.c    ****                             /* Preemption is on, but a context switch should
2820:os/tasks.c    ****                              * only be performed if the unblocked task has a
2821:os/tasks.c    ****                              * priority that is equal to or higher than the
2822:os/tasks.c    ****                              * currently executing task. */
2823:os/tasks.c    ****                             if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2824:os/tasks.c    ****                             {
2825:os/tasks.c    ****                                 xSwitchRequired = pdTRUE;
2826:os/tasks.c    ****                             }
2827:os/tasks.c    ****                             else
2828:os/tasks.c    ****                             {
2829:os/tasks.c    ****                                 mtCOVERAGE_TEST_MARKER();
2830:os/tasks.c    ****                             }
2831:os/tasks.c    ****                         }
2832:os/tasks.c    ****                     #endif /* configUSE_PREEMPTION */
2833:os/tasks.c    ****                 }
2834:os/tasks.c    ****             }
2835:os/tasks.c    ****         }
2836:os/tasks.c    **** 
2837:os/tasks.c    ****         /* Tasks of equal priority to the currently running task will share
2838:os/tasks.c    ****          * processing time (time slice) if preemption is on, and the application
2839:os/tasks.c    ****          * writer has not explicitly turned time slicing off. */
2840:os/tasks.c    ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2841:os/tasks.c    ****             {
2842:os/tasks.c    ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) >
2843:os/tasks.c    ****                 {
2844:os/tasks.c    ****                     xSwitchRequired = pdTRUE;
2845:os/tasks.c    ****                 }
2846:os/tasks.c    ****                 else
2847:os/tasks.c    ****                 {
2848:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
2849:os/tasks.c    ****                 }
2850:os/tasks.c    ****             }
2851:os/tasks.c    ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2852:os/tasks.c    **** 
2853:os/tasks.c    ****         #if ( configUSE_TICK_HOOK == 1 )
2854:os/tasks.c    ****             {
2855:os/tasks.c    ****                 /* Guard against the tick hook being called when the pended tick
2856:os/tasks.c    ****                  * count is being unwound (when the scheduler is being unlocked). */
2857:os/tasks.c    ****                 if( xPendedTicks == ( TickType_t ) 0 )
2858:os/tasks.c    ****                 {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 57


2859:os/tasks.c    ****                     vApplicationTickHook();
2860:os/tasks.c    ****                 }
2861:os/tasks.c    ****                 else
2862:os/tasks.c    ****                 {
2863:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
2864:os/tasks.c    ****                 }
2865:os/tasks.c    ****             }
2866:os/tasks.c    ****         #endif /* configUSE_TICK_HOOK */
2867:os/tasks.c    **** 
2868:os/tasks.c    ****         #if ( configUSE_PREEMPTION == 1 )
2869:os/tasks.c    ****             {
2870:os/tasks.c    ****                 if( xYieldPending != pdFALSE )
2871:os/tasks.c    ****                 {
2872:os/tasks.c    ****                     xSwitchRequired = pdTRUE;
2873:os/tasks.c    ****                 }
2874:os/tasks.c    ****                 else
2875:os/tasks.c    ****                 {
2876:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
2877:os/tasks.c    ****                 }
2878:os/tasks.c    ****             }
2879:os/tasks.c    ****         #endif /* configUSE_PREEMPTION */
2880:os/tasks.c    ****     }
2881:os/tasks.c    ****     else
2882:os/tasks.c    ****     {
2883:os/tasks.c    ****         ++xPendedTicks;
2884:os/tasks.c    **** 
2885:os/tasks.c    ****         /* The tick hook gets called at regular intervals, even if the
2886:os/tasks.c    ****          * scheduler is locked. */
2887:os/tasks.c    ****         #if ( configUSE_TICK_HOOK == 1 )
2888:os/tasks.c    ****             {
2889:os/tasks.c    ****                 vApplicationTickHook();
2890:os/tasks.c    ****             }
2891:os/tasks.c    ****         #endif
2892:os/tasks.c    ****     }
2893:os/tasks.c    **** 
2894:os/tasks.c    ****     return xSwitchRequired;
2895:os/tasks.c    **** }
2896:os/tasks.c    **** /*-----------------------------------------------------------*/
2897:os/tasks.c    **** 
2898:os/tasks.c    **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2899:os/tasks.c    **** 
2900:os/tasks.c    ****     void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
2901:os/tasks.c    ****                                      TaskHookFunction_t pxHookFunction )
2902:os/tasks.c    ****     {
2903:os/tasks.c    ****         TCB_t * xTCB;
2904:os/tasks.c    **** 
2905:os/tasks.c    ****         /* If xTask is NULL then it is the task hook of the calling task that is
2906:os/tasks.c    ****          * getting set. */
2907:os/tasks.c    ****         if( xTask == NULL )
2908:os/tasks.c    ****         {
2909:os/tasks.c    ****             xTCB = ( TCB_t * ) pxCurrentTCB;
2910:os/tasks.c    ****         }
2911:os/tasks.c    ****         else
2912:os/tasks.c    ****         {
2913:os/tasks.c    ****             xTCB = xTask;
2914:os/tasks.c    ****         }
2915:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 58


2916:os/tasks.c    ****         /* Save the hook function in the TCB.  A critical section is required as
2917:os/tasks.c    ****          * the value can be accessed from an interrupt. */
2918:os/tasks.c    ****         taskENTER_CRITICAL();
2919:os/tasks.c    ****         {
2920:os/tasks.c    ****             xTCB->pxTaskTag = pxHookFunction;
2921:os/tasks.c    ****         }
2922:os/tasks.c    ****         taskEXIT_CRITICAL();
2923:os/tasks.c    ****     }
2924:os/tasks.c    **** 
2925:os/tasks.c    **** #endif /* configUSE_APPLICATION_TASK_TAG */
2926:os/tasks.c    **** /*-----------------------------------------------------------*/
2927:os/tasks.c    **** 
2928:os/tasks.c    **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2929:os/tasks.c    **** 
2930:os/tasks.c    ****     TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2931:os/tasks.c    ****     {
2932:os/tasks.c    ****         TCB_t * pxTCB;
2933:os/tasks.c    ****         TaskHookFunction_t xReturn;
2934:os/tasks.c    **** 
2935:os/tasks.c    ****         /* If xTask is NULL then set the calling task's hook. */
2936:os/tasks.c    ****         pxTCB = prvGetTCBFromHandle( xTask );
2937:os/tasks.c    **** 
2938:os/tasks.c    ****         /* Save the hook function in the TCB.  A critical section is required as
2939:os/tasks.c    ****          * the value can be accessed from an interrupt. */
2940:os/tasks.c    ****         taskENTER_CRITICAL();
2941:os/tasks.c    ****         {
2942:os/tasks.c    ****             xReturn = pxTCB->pxTaskTag;
2943:os/tasks.c    ****         }
2944:os/tasks.c    ****         taskEXIT_CRITICAL();
2945:os/tasks.c    **** 
2946:os/tasks.c    ****         return xReturn;
2947:os/tasks.c    ****     }
2948:os/tasks.c    **** 
2949:os/tasks.c    **** #endif /* configUSE_APPLICATION_TASK_TAG */
2950:os/tasks.c    **** /*-----------------------------------------------------------*/
2951:os/tasks.c    **** 
2952:os/tasks.c    **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2953:os/tasks.c    **** 
2954:os/tasks.c    ****     TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2955:os/tasks.c    ****     {
2956:os/tasks.c    ****         TCB_t * pxTCB;
2957:os/tasks.c    ****         TaskHookFunction_t xReturn;
2958:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
2959:os/tasks.c    **** 
2960:os/tasks.c    ****         /* If xTask is NULL then set the calling task's hook. */
2961:os/tasks.c    ****         pxTCB = prvGetTCBFromHandle( xTask );
2962:os/tasks.c    **** 
2963:os/tasks.c    ****         /* Save the hook function in the TCB.  A critical section is required as
2964:os/tasks.c    ****          * the value can be accessed from an interrupt. */
2965:os/tasks.c    ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
2966:os/tasks.c    ****         {
2967:os/tasks.c    ****             xReturn = pxTCB->pxTaskTag;
2968:os/tasks.c    ****         }
2969:os/tasks.c    ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2970:os/tasks.c    **** 
2971:os/tasks.c    ****         return xReturn;
2972:os/tasks.c    ****     }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 59


2973:os/tasks.c    **** 
2974:os/tasks.c    **** #endif /* configUSE_APPLICATION_TASK_TAG */
2975:os/tasks.c    **** /*-----------------------------------------------------------*/
2976:os/tasks.c    **** 
2977:os/tasks.c    **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2978:os/tasks.c    **** 
2979:os/tasks.c    ****     BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask,
2980:os/tasks.c    ****                                              void * pvParameter )
2981:os/tasks.c    ****     {
2982:os/tasks.c    ****         TCB_t * xTCB;
2983:os/tasks.c    ****         BaseType_t xReturn;
2984:os/tasks.c    **** 
2985:os/tasks.c    ****         /* If xTask is NULL then we are calling our own task hook. */
2986:os/tasks.c    ****         if( xTask == NULL )
2987:os/tasks.c    ****         {
2988:os/tasks.c    ****             xTCB = pxCurrentTCB;
2989:os/tasks.c    ****         }
2990:os/tasks.c    ****         else
2991:os/tasks.c    ****         {
2992:os/tasks.c    ****             xTCB = xTask;
2993:os/tasks.c    ****         }
2994:os/tasks.c    **** 
2995:os/tasks.c    ****         if( xTCB->pxTaskTag != NULL )
2996:os/tasks.c    ****         {
2997:os/tasks.c    ****             xReturn = xTCB->pxTaskTag( pvParameter );
2998:os/tasks.c    ****         }
2999:os/tasks.c    ****         else
3000:os/tasks.c    ****         {
3001:os/tasks.c    ****             xReturn = pdFAIL;
3002:os/tasks.c    ****         }
3003:os/tasks.c    **** 
3004:os/tasks.c    ****         return xReturn;
3005:os/tasks.c    ****     }
3006:os/tasks.c    **** 
3007:os/tasks.c    **** #endif /* configUSE_APPLICATION_TASK_TAG */
3008:os/tasks.c    **** /*-----------------------------------------------------------*/
3009:os/tasks.c    **** 
3010:os/tasks.c    **** void vTaskSwitchContext( void )
3011:os/tasks.c    **** {
3012:os/tasks.c    ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
3013:os/tasks.c    ****     {
3014:os/tasks.c    ****         /* The scheduler is currently suspended - do not allow a context
3015:os/tasks.c    ****          * switch. */
3016:os/tasks.c    ****         xYieldPending = pdTRUE;
3017:os/tasks.c    ****     }
3018:os/tasks.c    ****     else
3019:os/tasks.c    ****     {
3020:os/tasks.c    ****         xYieldPending = pdFALSE;
3021:os/tasks.c    ****         traceTASK_SWITCHED_OUT();
3022:os/tasks.c    **** 
3023:os/tasks.c    ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3024:os/tasks.c    ****             {
3025:os/tasks.c    ****                 #ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
3026:os/tasks.c    ****                     portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
3027:os/tasks.c    ****                 #else
3028:os/tasks.c    ****                     ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
3029:os/tasks.c    ****                 #endif
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 60


3030:os/tasks.c    **** 
3031:os/tasks.c    ****                 /* Add the amount of time the task has been running to the
3032:os/tasks.c    ****                  * accumulated time so far.  The time the task started running was
3033:os/tasks.c    ****                  * stored in ulTaskSwitchedInTime.  Note that there is no overflow
3034:os/tasks.c    ****                  * protection here so count values are only valid until the timer
3035:os/tasks.c    ****                  * overflows.  The guard against negative values is to protect
3036:os/tasks.c    ****                  * against suspect run time stat counter implementations - which
3037:os/tasks.c    ****                  * are provided by the application, not the kernel. */
3038:os/tasks.c    ****                 if( ulTotalRunTime > ulTaskSwitchedInTime )
3039:os/tasks.c    ****                 {
3040:os/tasks.c    ****                     pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
3041:os/tasks.c    ****                 }
3042:os/tasks.c    ****                 else
3043:os/tasks.c    ****                 {
3044:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
3045:os/tasks.c    ****                 }
3046:os/tasks.c    **** 
3047:os/tasks.c    ****                 ulTaskSwitchedInTime = ulTotalRunTime;
3048:os/tasks.c    ****             }
3049:os/tasks.c    ****         #endif /* configGENERATE_RUN_TIME_STATS */
3050:os/tasks.c    **** 
3051:os/tasks.c    ****         /* Check for stack overflow, if configured. */
3052:os/tasks.c    ****         taskCHECK_FOR_STACK_OVERFLOW();
3053:os/tasks.c    **** 
3054:os/tasks.c    ****         /* Before the currently running task is switched out, save its errno. */
3055:os/tasks.c    ****         #if ( configUSE_POSIX_ERRNO == 1 )
3056:os/tasks.c    ****             {
3057:os/tasks.c    ****                 pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
3058:os/tasks.c    ****             }
3059:os/tasks.c    ****         #endif
3060:os/tasks.c    **** 
3061:os/tasks.c    ****         /* Select a new task to run using either the generic C or port
3062:os/tasks.c    ****          * optimised asm code. */
3063:os/tasks.c    ****         taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with
3064:os/tasks.c    ****         traceTASK_SWITCHED_IN();
3065:os/tasks.c    **** 
3066:os/tasks.c    ****         /* After the new task is switched in, update the global errno. */
3067:os/tasks.c    ****         #if ( configUSE_POSIX_ERRNO == 1 )
3068:os/tasks.c    ****             {
3069:os/tasks.c    ****                 FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3070:os/tasks.c    ****             }
3071:os/tasks.c    ****         #endif
3072:os/tasks.c    **** 
3073:os/tasks.c    ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3074:os/tasks.c    ****             {
3075:os/tasks.c    ****                 /* Switch Newlib's _impure_ptr variable to point to the _reent
3076:os/tasks.c    ****                  * structure specific to this task.
3077:os/tasks.c    ****                  * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3078:os/tasks.c    ****                  * for additional information. */
3079:os/tasks.c    ****                 _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3080:os/tasks.c    ****             }
3081:os/tasks.c    ****         #endif /* configUSE_NEWLIB_REENTRANT */
3082:os/tasks.c    ****     }
3083:os/tasks.c    **** }
3084:os/tasks.c    **** /*-----------------------------------------------------------*/
3085:os/tasks.c    **** 
3086:os/tasks.c    **** void vTaskPlaceOnEventList( List_t * const pxEventList,
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 61


3087:os/tasks.c    ****                             const TickType_t xTicksToWait )
3088:os/tasks.c    **** {
3089:os/tasks.c    ****     configASSERT( pxEventList );
3090:os/tasks.c    **** 
3091:os/tasks.c    ****     /* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3092:os/tasks.c    ****      * SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3093:os/tasks.c    **** 
3094:os/tasks.c    ****     /* Place the event list item of the TCB in the appropriate event list.
3095:os/tasks.c    ****      * This is placed in the list in priority order so the highest priority task
3096:os/tasks.c    ****      * is the first to be woken by the event.  The queue that contains the event
3097:os/tasks.c    ****      * list is locked, preventing simultaneous access from interrupts. */
3098:os/tasks.c    ****     vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3099:os/tasks.c    **** 
3100:os/tasks.c    ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3101:os/tasks.c    **** }
3102:os/tasks.c    **** /*-----------------------------------------------------------*/
3103:os/tasks.c    **** 
3104:os/tasks.c    **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
3105:os/tasks.c    ****                                      const TickType_t xItemValue,
3106:os/tasks.c    ****                                      const TickType_t xTicksToWait )
3107:os/tasks.c    **** {
3108:os/tasks.c    ****     configASSERT( pxEventList );
3109:os/tasks.c    **** 
3110:os/tasks.c    ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3111:os/tasks.c    ****      * the event groups implementation. */
3112:os/tasks.c    ****     configASSERT( uxSchedulerSuspended != 0 );
3113:os/tasks.c    **** 
3114:os/tasks.c    ****     /* Store the item value in the event list item.  It is safe to access the
3115:os/tasks.c    ****      * event list item here as interrupts won't access the event list item of a
3116:os/tasks.c    ****      * task that is not in the Blocked state. */
3117:os/tasks.c    ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VA
3118:os/tasks.c    **** 
3119:os/tasks.c    ****     /* Place the event list item of the TCB at the end of the appropriate event
3120:os/tasks.c    ****      * list.  It is safe to access the event list here because it is part of an
3121:os/tasks.c    ****      * event group implementation - and interrupts don't access event groups
3122:os/tasks.c    ****      * directly (instead they access them indirectly by pending function calls to
3123:os/tasks.c    ****      * the task level). */
3124:os/tasks.c    ****     vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3125:os/tasks.c    **** 
3126:os/tasks.c    ****     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
3127:os/tasks.c    **** }
3128:os/tasks.c    **** /*-----------------------------------------------------------*/
3129:os/tasks.c    **** 
3130:os/tasks.c    **** #if ( configUSE_TIMERS == 1 )
3131:os/tasks.c    **** 
3132:os/tasks.c    ****     void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
3133:os/tasks.c    ****                                           TickType_t xTicksToWait,
3134:os/tasks.c    ****                                           const BaseType_t xWaitIndefinitely )
3135:os/tasks.c    ****     {
3136:os/tasks.c    ****         configASSERT( pxEventList );
3137:os/tasks.c    **** 
3138:os/tasks.c    ****         /* This function should not be called by application code hence the
3139:os/tasks.c    ****          * 'Restricted' in its name.  It is not part of the public API.  It is
3140:os/tasks.c    ****          * designed for use by kernel code, and has special calling requirements -
3141:os/tasks.c    ****          * it should be called with the scheduler suspended. */
3142:os/tasks.c    **** 
3143:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 62


3144:os/tasks.c    ****         /* Place the event list item of the TCB in the appropriate event list.
3145:os/tasks.c    ****          * In this case it is assume that this is the only task that is going to
3146:os/tasks.c    ****          * be waiting on this event list, so the faster vListInsertEnd() function
3147:os/tasks.c    ****          * can be used in place of vListInsert. */
3148:os/tasks.c    ****         vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
3149:os/tasks.c    **** 
3150:os/tasks.c    ****         /* If the task should block indefinitely then set the block time to a
3151:os/tasks.c    ****          * value that will be recognised as an indefinite delay inside the
3152:os/tasks.c    ****          * prvAddCurrentTaskToDelayedList() function. */
3153:os/tasks.c    ****         if( xWaitIndefinitely != pdFALSE )
3154:os/tasks.c    ****         {
3155:os/tasks.c    ****             xTicksToWait = portMAX_DELAY;
3156:os/tasks.c    ****         }
3157:os/tasks.c    **** 
3158:os/tasks.c    ****         traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3159:os/tasks.c    ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
3160:os/tasks.c    ****     }
3161:os/tasks.c    **** 
3162:os/tasks.c    **** #endif /* configUSE_TIMERS */
3163:os/tasks.c    **** /*-----------------------------------------------------------*/
3164:os/tasks.c    **** 
3165:os/tasks.c    **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3166:os/tasks.c    **** {
3167:os/tasks.c    ****     TCB_t * pxUnblockedTCB;
3168:os/tasks.c    ****     BaseType_t xReturn;
3169:os/tasks.c    **** 
3170:os/tasks.c    ****     /* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3171:os/tasks.c    ****      * called from a critical section within an ISR. */
3172:os/tasks.c    **** 
3173:os/tasks.c    ****     /* The event list is sorted in priority order, so the first in the list can
3174:os/tasks.c    ****      * be removed as it is known to be the highest priority.  Remove the TCB from
3175:os/tasks.c    ****      * the delayed list, and add it to the ready list.
3176:os/tasks.c    ****      *
3177:os/tasks.c    ****      * If an event is for a queue that is locked then this function will never
3178:os/tasks.c    ****      * get called - the lock count on the queue will get modified instead.  This
3179:os/tasks.c    ****      * means exclusive access to the event list is guaranteed here.
3180:os/tasks.c    ****      *
3181:os/tasks.c    ****      * This function assumes that a check has already been made to ensure that
3182:os/tasks.c    ****      * pxEventList is not empty. */
3183:os/tasks.c    ****     pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as th
3184:os/tasks.c    ****     configASSERT( pxUnblockedTCB );
3185:os/tasks.c    ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3186:os/tasks.c    **** 
3187:os/tasks.c    ****     if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3188:os/tasks.c    ****     {
3189:os/tasks.c    ****         ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3190:os/tasks.c    ****         prvAddTaskToReadyList( pxUnblockedTCB );
3191:os/tasks.c    **** 
3192:os/tasks.c    ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3193:os/tasks.c    ****             {
3194:os/tasks.c    ****                 /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3195:os/tasks.c    ****                  * might be set to the blocked task's time out time.  If the task is
3196:os/tasks.c    ****                  * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3197:os/tasks.c    ****                  * normally left unchanged, because it is automatically reset to a new
3198:os/tasks.c    ****                  * value when the tick count equals xNextTaskUnblockTime.  However if
3199:os/tasks.c    ****                  * tickless idling is used it might be more important to enter sleep mode
3200:os/tasks.c    ****                  * at the earliest possible time - so reset xNextTaskUnblockTime here to
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 63


3201:os/tasks.c    ****                  * ensure it is updated at the earliest possible time. */
3202:os/tasks.c    ****                 prvResetNextTaskUnblockTime();
3203:os/tasks.c    ****             }
3204:os/tasks.c    ****         #endif
3205:os/tasks.c    ****     }
3206:os/tasks.c    ****     else
3207:os/tasks.c    ****     {
3208:os/tasks.c    ****         /* The delayed and ready lists cannot be accessed, so hold this task
3209:os/tasks.c    ****          * pending until the scheduler is resumed. */
3210:os/tasks.c    ****         vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3211:os/tasks.c    ****     }
3212:os/tasks.c    **** 
3213:os/tasks.c    ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3214:os/tasks.c    ****     {
3215:os/tasks.c    ****         /* Return true if the task removed from the event list has a higher
3216:os/tasks.c    ****          * priority than the calling task.  This allows the calling task to know if
3217:os/tasks.c    ****          * it should force a context switch now. */
3218:os/tasks.c    ****         xReturn = pdTRUE;
3219:os/tasks.c    **** 
3220:os/tasks.c    ****         /* Mark that a yield is pending in case the user is not using the
3221:os/tasks.c    ****          * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3222:os/tasks.c    ****         xYieldPending = pdTRUE;
3223:os/tasks.c    ****     }
3224:os/tasks.c    ****     else
3225:os/tasks.c    ****     {
3226:os/tasks.c    ****         xReturn = pdFALSE;
3227:os/tasks.c    ****     }
3228:os/tasks.c    **** 
3229:os/tasks.c    ****     return xReturn;
3230:os/tasks.c    **** }
3231:os/tasks.c    **** /*-----------------------------------------------------------*/
3232:os/tasks.c    **** 
3233:os/tasks.c    **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
3234:os/tasks.c    ****                                         const TickType_t xItemValue )
3235:os/tasks.c    **** {
3236:os/tasks.c    ****     TCB_t * pxUnblockedTCB;
3237:os/tasks.c    **** 
3238:os/tasks.c    ****     /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3239:os/tasks.c    ****      * the event flags implementation. */
3240:os/tasks.c    ****     configASSERT( uxSchedulerSuspended != pdFALSE );
3241:os/tasks.c    **** 
3242:os/tasks.c    ****     /* Store the new item value in the event list. */
3243:os/tasks.c    ****     listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3244:os/tasks.c    **** 
3245:os/tasks.c    ****     /* Remove the event list form the event flag.  Interrupts do not access
3246:os/tasks.c    ****      * event flags. */
3247:os/tasks.c    ****     pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as th
3248:os/tasks.c    ****     configASSERT( pxUnblockedTCB );
3249:os/tasks.c    ****     ( void ) uxListRemove( pxEventListItem );
3250:os/tasks.c    **** 
3251:os/tasks.c    ****     #if ( configUSE_TICKLESS_IDLE != 0 )
3252:os/tasks.c    ****         {
3253:os/tasks.c    ****             /* If a task is blocked on a kernel object then xNextTaskUnblockTime
3254:os/tasks.c    ****              * might be set to the blocked task's time out time.  If the task is
3255:os/tasks.c    ****              * unblocked for a reason other than a timeout xNextTaskUnblockTime is
3256:os/tasks.c    ****              * normally left unchanged, because it is automatically reset to a new
3257:os/tasks.c    ****              * value when the tick count equals xNextTaskUnblockTime.  However if
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 64


3258:os/tasks.c    ****              * tickless idling is used it might be more important to enter sleep mode
3259:os/tasks.c    ****              * at the earliest possible time - so reset xNextTaskUnblockTime here to
3260:os/tasks.c    ****              * ensure it is updated at the earliest possible time. */
3261:os/tasks.c    ****             prvResetNextTaskUnblockTime();
3262:os/tasks.c    ****         }
3263:os/tasks.c    ****     #endif
3264:os/tasks.c    **** 
3265:os/tasks.c    ****     /* Remove the task from the delayed list and add it to the ready list.  The
3266:os/tasks.c    ****      * scheduler is suspended so interrupts will not be accessing the ready
3267:os/tasks.c    ****      * lists. */
3268:os/tasks.c    ****     ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3269:os/tasks.c    ****     prvAddTaskToReadyList( pxUnblockedTCB );
3270:os/tasks.c    **** 
3271:os/tasks.c    ****     if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3272:os/tasks.c    ****     {
3273:os/tasks.c    ****         /* The unblocked task has a priority above that of the calling task, so
3274:os/tasks.c    ****          * a context switch is required.  This function is called with the
3275:os/tasks.c    ****          * scheduler suspended so xYieldPending is set so the context switch
3276:os/tasks.c    ****          * occurs immediately that the scheduler is resumed (unsuspended). */
3277:os/tasks.c    ****         xYieldPending = pdTRUE;
3278:os/tasks.c    ****     }
3279:os/tasks.c    **** }
3280:os/tasks.c    **** /*-----------------------------------------------------------*/
3281:os/tasks.c    **** 
3282:os/tasks.c    **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3283:os/tasks.c    **** {
3284:os/tasks.c    ****     configASSERT( pxTimeOut );
3285:os/tasks.c    ****     taskENTER_CRITICAL();
3286:os/tasks.c    ****     {
3287:os/tasks.c    ****         pxTimeOut->xOverflowCount = xNumOfOverflows;
3288:os/tasks.c    ****         pxTimeOut->xTimeOnEntering = xTickCount;
3289:os/tasks.c    ****     }
3290:os/tasks.c    ****     taskEXIT_CRITICAL();
3291:os/tasks.c    **** }
3292:os/tasks.c    **** /*-----------------------------------------------------------*/
3293:os/tasks.c    **** 
3294:os/tasks.c    **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3295:os/tasks.c    **** {
3296:os/tasks.c    ****     /* For internal use only as it does not use a critical section. */
3297:os/tasks.c    ****     pxTimeOut->xOverflowCount = xNumOfOverflows;
3298:os/tasks.c    ****     pxTimeOut->xTimeOnEntering = xTickCount;
3299:os/tasks.c    **** }
3300:os/tasks.c    **** /*-----------------------------------------------------------*/
3301:os/tasks.c    **** 
3302:os/tasks.c    **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
3303:os/tasks.c    ****                                  TickType_t * const pxTicksToWait )
3304:os/tasks.c    **** {
3305:os/tasks.c    ****     BaseType_t xReturn;
3306:os/tasks.c    **** 
3307:os/tasks.c    ****     configASSERT( pxTimeOut );
3308:os/tasks.c    ****     configASSERT( pxTicksToWait );
3309:os/tasks.c    **** 
3310:os/tasks.c    ****     taskENTER_CRITICAL();
3311:os/tasks.c    ****     {
3312:os/tasks.c    ****         /* Minor optimisation.  The tick count cannot change in this block. */
3313:os/tasks.c    ****         const TickType_t xConstTickCount = xTickCount;
3314:os/tasks.c    ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 65


3315:os/tasks.c    **** 
3316:os/tasks.c    ****         #if ( INCLUDE_xTaskAbortDelay == 1 )
3317:os/tasks.c    ****             if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3318:os/tasks.c    ****             {
3319:os/tasks.c    ****                 /* The delay was aborted, which is not the same as a time out,
3320:os/tasks.c    ****                  * but has the same result. */
3321:os/tasks.c    ****                 pxCurrentTCB->ucDelayAborted = pdFALSE;
3322:os/tasks.c    ****                 xReturn = pdTRUE;
3323:os/tasks.c    ****             }
3324:os/tasks.c    ****             else
3325:os/tasks.c    ****         #endif
3326:os/tasks.c    **** 
3327:os/tasks.c    ****         #if ( INCLUDE_vTaskSuspend == 1 )
3328:os/tasks.c    ****             if( *pxTicksToWait == portMAX_DELAY )
3329:os/tasks.c    ****             {
3330:os/tasks.c    ****                 /* If INCLUDE_vTaskSuspend is set to 1 and the block time
3331:os/tasks.c    ****                  * specified is the maximum block time then the task should block
3332:os/tasks.c    ****                  * indefinitely, and therefore never time out. */
3333:os/tasks.c    ****                 xReturn = pdFALSE;
3334:os/tasks.c    ****             }
3335:os/tasks.c    ****             else
3336:os/tasks.c    ****         #endif
3337:os/tasks.c    **** 
3338:os/tasks.c    ****         if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTi
3339:os/tasks.c    ****         {
3340:os/tasks.c    ****             /* The tick count is greater than the time at which
3341:os/tasks.c    ****              * vTaskSetTimeout() was called, but has also overflowed since
3342:os/tasks.c    ****              * vTaskSetTimeOut() was called.  It must have wrapped all the way
3343:os/tasks.c    ****              * around and gone past again. This passed since vTaskSetTimeout()
3344:os/tasks.c    ****              * was called. */
3345:os/tasks.c    ****             xReturn = pdTRUE;
3346:os/tasks.c    ****             *pxTicksToWait = ( TickType_t ) 0;
3347:os/tasks.c    ****         }
3348:os/tasks.c    ****         else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant wi
3349:os/tasks.c    ****         {
3350:os/tasks.c    ****             /* Not a genuine timeout. Adjust parameters for time remaining. */
3351:os/tasks.c    ****             *pxTicksToWait -= xElapsedTime;
3352:os/tasks.c    ****             vTaskInternalSetTimeOutState( pxTimeOut );
3353:os/tasks.c    ****             xReturn = pdFALSE;
3354:os/tasks.c    ****         }
3355:os/tasks.c    ****         else
3356:os/tasks.c    ****         {
3357:os/tasks.c    ****             *pxTicksToWait = ( TickType_t ) 0;
3358:os/tasks.c    ****             xReturn = pdTRUE;
3359:os/tasks.c    ****         }
3360:os/tasks.c    ****     }
3361:os/tasks.c    ****     taskEXIT_CRITICAL();
3362:os/tasks.c    **** 
3363:os/tasks.c    ****     return xReturn;
3364:os/tasks.c    **** }
3365:os/tasks.c    **** /*-----------------------------------------------------------*/
3366:os/tasks.c    **** 
3367:os/tasks.c    **** void vTaskMissedYield( void )
3368:os/tasks.c    **** {
3369:os/tasks.c    ****     xYieldPending = pdTRUE;
3370:os/tasks.c    **** }
3371:os/tasks.c    **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 66


3372:os/tasks.c    **** 
3373:os/tasks.c    **** #if ( configUSE_TRACE_FACILITY == 1 )
3374:os/tasks.c    **** 
3375:os/tasks.c    ****     UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3376:os/tasks.c    ****     {
3377:os/tasks.c    ****         UBaseType_t uxReturn;
3378:os/tasks.c    ****         TCB_t const * pxTCB;
3379:os/tasks.c    **** 
3380:os/tasks.c    ****         if( xTask != NULL )
3381:os/tasks.c    ****         {
3382:os/tasks.c    ****             pxTCB = xTask;
3383:os/tasks.c    ****             uxReturn = pxTCB->uxTaskNumber;
3384:os/tasks.c    ****         }
3385:os/tasks.c    ****         else
3386:os/tasks.c    ****         {
3387:os/tasks.c    ****             uxReturn = 0U;
3388:os/tasks.c    ****         }
3389:os/tasks.c    **** 
3390:os/tasks.c    ****         return uxReturn;
3391:os/tasks.c    ****     }
3392:os/tasks.c    **** 
3393:os/tasks.c    **** #endif /* configUSE_TRACE_FACILITY */
3394:os/tasks.c    **** /*-----------------------------------------------------------*/
3395:os/tasks.c    **** 
3396:os/tasks.c    **** #if ( configUSE_TRACE_FACILITY == 1 )
3397:os/tasks.c    **** 
3398:os/tasks.c    ****     void vTaskSetTaskNumber( TaskHandle_t xTask,
3399:os/tasks.c    ****                              const UBaseType_t uxHandle )
3400:os/tasks.c    ****     {
3401:os/tasks.c    ****         TCB_t * pxTCB;
3402:os/tasks.c    **** 
3403:os/tasks.c    ****         if( xTask != NULL )
3404:os/tasks.c    ****         {
3405:os/tasks.c    ****             pxTCB = xTask;
3406:os/tasks.c    ****             pxTCB->uxTaskNumber = uxHandle;
3407:os/tasks.c    ****         }
3408:os/tasks.c    ****     }
3409:os/tasks.c    **** 
3410:os/tasks.c    **** #endif /* configUSE_TRACE_FACILITY */
3411:os/tasks.c    **** 
3412:os/tasks.c    **** /*
3413:os/tasks.c    ****  * -----------------------------------------------------------
3414:os/tasks.c    ****  * The Idle task.
3415:os/tasks.c    ****  * ----------------------------------------------------------
3416:os/tasks.c    ****  *
3417:os/tasks.c    ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3418:os/tasks.c    ****  * language extensions.  The equivalent prototype for this function is:
3419:os/tasks.c    ****  *
3420:os/tasks.c    ****  * void prvIdleTask( void *pvParameters );
3421:os/tasks.c    ****  *
3422:os/tasks.c    ****  */
3423:os/tasks.c    **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3424:os/tasks.c    **** {
3425:os/tasks.c    ****     /* Stop warnings. */
3426:os/tasks.c    ****     ( void ) pvParameters;
3427:os/tasks.c    **** 
3428:os/tasks.c    ****     /** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 67


3429:os/tasks.c    ****      * SCHEDULER IS STARTED. **/
3430:os/tasks.c    **** 
3431:os/tasks.c    ****     /* In case a task that has a secure context deletes itself, in which case
3432:os/tasks.c    ****      * the idle task is responsible for deleting the task's secure context, if
3433:os/tasks.c    ****      * any. */
3434:os/tasks.c    ****     portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3435:os/tasks.c    **** 
3436:os/tasks.c    ****     for( ; ; )
3437:os/tasks.c    ****     {
3438:os/tasks.c    ****         /* See if any tasks have deleted themselves - if so then the idle task
3439:os/tasks.c    ****          * is responsible for freeing the deleted task's TCB and stack. */
3440:os/tasks.c    ****         prvCheckTasksWaitingTermination();
3441:os/tasks.c    **** 
3442:os/tasks.c    ****         #if ( configUSE_PREEMPTION == 0 )
3443:os/tasks.c    ****             {
3444:os/tasks.c    ****                 /* If we are not using preemption we keep forcing a task switch to
3445:os/tasks.c    ****                  * see if any other task has become available.  If we are using
3446:os/tasks.c    ****                  * preemption we don't need to do this as any task becoming available
3447:os/tasks.c    ****                  * will automatically get the processor anyway. */
3448:os/tasks.c    ****                 taskYIELD();
3449:os/tasks.c    ****             }
3450:os/tasks.c    ****         #endif /* configUSE_PREEMPTION */
3451:os/tasks.c    **** 
3452:os/tasks.c    ****         #if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3453:os/tasks.c    ****             {
3454:os/tasks.c    ****                 /* When using preemption tasks of equal priority will be
3455:os/tasks.c    ****                  * timesliced.  If a task that is sharing the idle priority is ready
3456:os/tasks.c    ****                  * to run then the idle task should yield before the end of the
3457:os/tasks.c    ****                  * timeslice.
3458:os/tasks.c    ****                  *
3459:os/tasks.c    ****                  * A critical region is not required here as we are just reading from
3460:os/tasks.c    ****                  * the list, and an occasional incorrect value will not matter.  If
3461:os/tasks.c    ****                  * the ready list at the idle priority contains more than one task
3462:os/tasks.c    ****                  * then a task other than the idle task is ready to execute. */
3463:os/tasks.c    ****                 if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBase
3464:os/tasks.c    ****                 {
3465:os/tasks.c    ****                     taskYIELD();
3466:os/tasks.c    ****                 }
3467:os/tasks.c    ****                 else
3468:os/tasks.c    ****                 {
3469:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
3470:os/tasks.c    ****                 }
3471:os/tasks.c    ****             }
3472:os/tasks.c    ****         #endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3473:os/tasks.c    **** 
3474:os/tasks.c    ****         #if ( configUSE_IDLE_HOOK == 1 )
3475:os/tasks.c    ****             {
3476:os/tasks.c    ****                 extern void vApplicationIdleHook( void );
3477:os/tasks.c    **** 
3478:os/tasks.c    ****                 /* Call the user defined function from within the idle task.  This
3479:os/tasks.c    ****                  * allows the application designer to add background functionality
3480:os/tasks.c    ****                  * without the overhead of a separate task.
3481:os/tasks.c    ****                  * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3482:os/tasks.c    ****                  * CALL A FUNCTION THAT MIGHT BLOCK. */
3483:os/tasks.c    ****                 vApplicationIdleHook();
3484:os/tasks.c    ****             }
3485:os/tasks.c    ****         #endif /* configUSE_IDLE_HOOK */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 68


3486:os/tasks.c    **** 
3487:os/tasks.c    ****         /* This conditional compilation should use inequality to 0, not equality
3488:os/tasks.c    ****          * to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3489:os/tasks.c    ****          * user defined low power mode  implementations require
3490:os/tasks.c    ****          * configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3491:os/tasks.c    ****         #if ( configUSE_TICKLESS_IDLE != 0 )
3492:os/tasks.c    ****             {
3493:os/tasks.c    ****                 TickType_t xExpectedIdleTime;
3494:os/tasks.c    **** 
3495:os/tasks.c    ****                 /* It is not desirable to suspend then resume the scheduler on
3496:os/tasks.c    ****                  * each iteration of the idle task.  Therefore, a preliminary
3497:os/tasks.c    ****                  * test of the expected idle time is performed without the
3498:os/tasks.c    ****                  * scheduler suspended.  The result here is not necessarily
3499:os/tasks.c    ****                  * valid. */
3500:os/tasks.c    ****                 xExpectedIdleTime = prvGetExpectedIdleTime();
3501:os/tasks.c    **** 
3502:os/tasks.c    ****                 if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3503:os/tasks.c    ****                 {
3504:os/tasks.c    ****                     vTaskSuspendAll();
3505:os/tasks.c    ****                     {
3506:os/tasks.c    ****                         /* Now the scheduler is suspended, the expected idle
3507:os/tasks.c    ****                          * time can be sampled again, and this time its value can
3508:os/tasks.c    ****                          * be used. */
3509:os/tasks.c    ****                         configASSERT( xNextTaskUnblockTime >= xTickCount );
3510:os/tasks.c    ****                         xExpectedIdleTime = prvGetExpectedIdleTime();
3511:os/tasks.c    **** 
3512:os/tasks.c    ****                         /* Define the following macro to set xExpectedIdleTime to 0
3513:os/tasks.c    ****                          * if the application does not want
3514:os/tasks.c    ****                          * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3515:os/tasks.c    ****                         configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3516:os/tasks.c    **** 
3517:os/tasks.c    ****                         if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3518:os/tasks.c    ****                         {
3519:os/tasks.c    ****                             traceLOW_POWER_IDLE_BEGIN();
3520:os/tasks.c    ****                             portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3521:os/tasks.c    ****                             traceLOW_POWER_IDLE_END();
3522:os/tasks.c    ****                         }
3523:os/tasks.c    ****                         else
3524:os/tasks.c    ****                         {
3525:os/tasks.c    ****                             mtCOVERAGE_TEST_MARKER();
3526:os/tasks.c    ****                         }
3527:os/tasks.c    ****                     }
3528:os/tasks.c    ****                     ( void ) xTaskResumeAll();
3529:os/tasks.c    ****                 }
3530:os/tasks.c    ****                 else
3531:os/tasks.c    ****                 {
3532:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
3533:os/tasks.c    ****                 }
3534:os/tasks.c    ****             }
3535:os/tasks.c    ****         #endif /* configUSE_TICKLESS_IDLE */
3536:os/tasks.c    ****     }
3537:os/tasks.c    **** }
3538:os/tasks.c    **** /*-----------------------------------------------------------*/
3539:os/tasks.c    **** 
3540:os/tasks.c    **** #if ( configUSE_TICKLESS_IDLE != 0 )
3541:os/tasks.c    **** 
3542:os/tasks.c    ****     eSleepModeStatus eTaskConfirmSleepModeStatus( void )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 69


3543:os/tasks.c    ****     {
3544:os/tasks.c    ****         /* The idle task exists in addition to the application tasks. */
3545:os/tasks.c    ****         const UBaseType_t uxNonApplicationTasks = 1;
3546:os/tasks.c    ****         eSleepModeStatus eReturn = eStandardSleep;
3547:os/tasks.c    **** 
3548:os/tasks.c    ****         /* This function must be called from a critical section. */
3549:os/tasks.c    **** 
3550:os/tasks.c    ****         if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3551:os/tasks.c    ****         {
3552:os/tasks.c    ****             /* A task was made ready while the scheduler was suspended. */
3553:os/tasks.c    ****             eReturn = eAbortSleep;
3554:os/tasks.c    ****         }
3555:os/tasks.c    ****         else if( xYieldPending != pdFALSE )
3556:os/tasks.c    ****         {
3557:os/tasks.c    ****             /* A yield was pended while the scheduler was suspended. */
3558:os/tasks.c    ****             eReturn = eAbortSleep;
3559:os/tasks.c    ****         }
3560:os/tasks.c    ****         else if( xPendedTicks != 0 )
3561:os/tasks.c    ****         {
3562:os/tasks.c    ****             /* A tick interrupt has already occurred but was held pending
3563:os/tasks.c    ****              * because the scheduler is suspended. */
3564:os/tasks.c    ****             eReturn = eAbortSleep;
3565:os/tasks.c    ****         }
3566:os/tasks.c    ****         else
3567:os/tasks.c    ****         {
3568:os/tasks.c    ****             /* If all the tasks are in the suspended list (which might mean they
3569:os/tasks.c    ****              * have an infinite block time rather than actually being suspended)
3570:os/tasks.c    ****              * then it is safe to turn all clocks off and just wait for external
3571:os/tasks.c    ****              * interrupts. */
3572:os/tasks.c    ****             if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonA
3573:os/tasks.c    ****             {
3574:os/tasks.c    ****                 eReturn = eNoTasksWaitingTimeout;
3575:os/tasks.c    ****             }
3576:os/tasks.c    ****             else
3577:os/tasks.c    ****             {
3578:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
3579:os/tasks.c    ****             }
3580:os/tasks.c    ****         }
3581:os/tasks.c    **** 
3582:os/tasks.c    ****         return eReturn;
3583:os/tasks.c    ****     }
3584:os/tasks.c    **** 
3585:os/tasks.c    **** #endif /* configUSE_TICKLESS_IDLE */
3586:os/tasks.c    **** /*-----------------------------------------------------------*/
3587:os/tasks.c    **** 
3588:os/tasks.c    **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3589:os/tasks.c    **** 
3590:os/tasks.c    ****     void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet,
3591:os/tasks.c    ****                                             BaseType_t xIndex,
3592:os/tasks.c    ****                                             void * pvValue )
3593:os/tasks.c    ****     {
3594:os/tasks.c    ****         TCB_t * pxTCB;
3595:os/tasks.c    **** 
3596:os/tasks.c    ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3597:os/tasks.c    ****         {
3598:os/tasks.c    ****             pxTCB = prvGetTCBFromHandle( xTaskToSet );
3599:os/tasks.c    ****             configASSERT( pxTCB != NULL );
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 70


3600:os/tasks.c    ****             pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3601:os/tasks.c    ****         }
3602:os/tasks.c    ****     }
3603:os/tasks.c    **** 
3604:os/tasks.c    **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3605:os/tasks.c    **** /*-----------------------------------------------------------*/
3606:os/tasks.c    **** 
3607:os/tasks.c    **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3608:os/tasks.c    **** 
3609:os/tasks.c    ****     void * pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery,
3610:os/tasks.c    ****                                                BaseType_t xIndex )
3611:os/tasks.c    ****     {
3612:os/tasks.c    ****         void * pvReturn = NULL;
3613:os/tasks.c    ****         TCB_t * pxTCB;
3614:os/tasks.c    **** 
3615:os/tasks.c    ****         if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3616:os/tasks.c    ****         {
3617:os/tasks.c    ****             pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3618:os/tasks.c    ****             pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3619:os/tasks.c    ****         }
3620:os/tasks.c    ****         else
3621:os/tasks.c    ****         {
3622:os/tasks.c    ****             pvReturn = NULL;
3623:os/tasks.c    ****         }
3624:os/tasks.c    **** 
3625:os/tasks.c    ****         return pvReturn;
3626:os/tasks.c    ****     }
3627:os/tasks.c    **** 
3628:os/tasks.c    **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3629:os/tasks.c    **** /*-----------------------------------------------------------*/
3630:os/tasks.c    **** 
3631:os/tasks.c    **** #if ( portUSING_MPU_WRAPPERS == 1 )
3632:os/tasks.c    **** 
3633:os/tasks.c    ****     void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
3634:os/tasks.c    ****                                   const MemoryRegion_t * const xRegions )
3635:os/tasks.c    ****     {
3636:os/tasks.c    ****         TCB_t * pxTCB;
3637:os/tasks.c    **** 
3638:os/tasks.c    ****         /* If null is passed in here then we are modifying the MPU settings of
3639:os/tasks.c    ****          * the calling task. */
3640:os/tasks.c    ****         pxTCB = prvGetTCBFromHandle( xTaskToModify );
3641:os/tasks.c    **** 
3642:os/tasks.c    ****         vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3643:os/tasks.c    ****     }
3644:os/tasks.c    **** 
3645:os/tasks.c    **** #endif /* portUSING_MPU_WRAPPERS */
3646:os/tasks.c    **** /*-----------------------------------------------------------*/
3647:os/tasks.c    **** 
3648:os/tasks.c    **** static void prvInitialiseTaskLists( void )
3649:os/tasks.c    **** {
3650:os/tasks.c    ****     UBaseType_t uxPriority;
3651:os/tasks.c    **** 
3652:os/tasks.c    ****     for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPrio
3653:os/tasks.c    ****     {
3654:os/tasks.c    ****         vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3655:os/tasks.c    ****     }
3656:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 71


3657:os/tasks.c    ****     vListInitialise( &xDelayedTaskList1 );
3658:os/tasks.c    ****     vListInitialise( &xDelayedTaskList2 );
3659:os/tasks.c    ****     vListInitialise( &xPendingReadyList );
3660:os/tasks.c    **** 
3661:os/tasks.c    ****     #if ( INCLUDE_vTaskDelete == 1 )
3662:os/tasks.c    ****         {
3663:os/tasks.c    ****             vListInitialise( &xTasksWaitingTermination );
3664:os/tasks.c    ****         }
3665:os/tasks.c    ****     #endif /* INCLUDE_vTaskDelete */
3666:os/tasks.c    **** 
3667:os/tasks.c    ****     #if ( INCLUDE_vTaskSuspend == 1 )
3668:os/tasks.c    ****         {
3669:os/tasks.c    ****             vListInitialise( &xSuspendedTaskList );
3670:os/tasks.c    ****         }
3671:os/tasks.c    ****     #endif /* INCLUDE_vTaskSuspend */
3672:os/tasks.c    **** 
3673:os/tasks.c    ****     /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3674:os/tasks.c    ****      * using list2. */
3675:os/tasks.c    ****     pxDelayedTaskList = &xDelayedTaskList1;
3676:os/tasks.c    ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
3677:os/tasks.c    **** }
3678:os/tasks.c    **** /*-----------------------------------------------------------*/
3679:os/tasks.c    **** 
3680:os/tasks.c    **** static void prvCheckTasksWaitingTermination( void )
3681:os/tasks.c    **** {
3682:os/tasks.c    ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3683:os/tasks.c    **** 
3684:os/tasks.c    ****     #if ( INCLUDE_vTaskDelete == 1 )
3685:os/tasks.c    ****         {
3686:os/tasks.c    ****             TCB_t * pxTCB;
3687:os/tasks.c    **** 
3688:os/tasks.c    ****             /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3689:os/tasks.c    ****              * being called too often in the idle task. */
3690:os/tasks.c    ****             while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3691:os/tasks.c    ****             {
3692:os/tasks.c    ****                 taskENTER_CRITICAL();
3693:os/tasks.c    ****                 {
3694:os/tasks.c    ****                     pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e
3695:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3696:os/tasks.c    ****                     --uxCurrentNumberOfTasks;
3697:os/tasks.c    ****                     --uxDeletedTasksWaitingCleanUp;
3698:os/tasks.c    ****                 }
3699:os/tasks.c    ****                 taskEXIT_CRITICAL();
3700:os/tasks.c    **** 
3701:os/tasks.c    ****                 prvDeleteTCB( pxTCB );
3702:os/tasks.c    ****             }
3703:os/tasks.c    ****         }
3704:os/tasks.c    ****     #endif /* INCLUDE_vTaskDelete */
3705:os/tasks.c    **** }
3706:os/tasks.c    **** /*-----------------------------------------------------------*/
3707:os/tasks.c    **** 
3708:os/tasks.c    **** #if ( configUSE_TRACE_FACILITY == 1 )
3709:os/tasks.c    **** 
3710:os/tasks.c    ****     void vTaskGetInfo( TaskHandle_t xTask,
3711:os/tasks.c    ****                        TaskStatus_t * pxTaskStatus,
3712:os/tasks.c    ****                        BaseType_t xGetFreeStackSpace,
3713:os/tasks.c    ****                        eTaskState eState )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 72


3714:os/tasks.c    ****     {
3715:os/tasks.c    ****         TCB_t * pxTCB;
3716:os/tasks.c    **** 
3717:os/tasks.c    ****         /* xTask is NULL then get the state of the calling task. */
3718:os/tasks.c    ****         pxTCB = prvGetTCBFromHandle( xTask );
3719:os/tasks.c    **** 
3720:os/tasks.c    ****         pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3721:os/tasks.c    ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
3722:os/tasks.c    ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3723:os/tasks.c    ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
3724:os/tasks.c    ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3725:os/tasks.c    **** 
3726:os/tasks.c    ****         #if ( configUSE_MUTEXES == 1 )
3727:os/tasks.c    ****             {
3728:os/tasks.c    ****                 pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3729:os/tasks.c    ****             }
3730:os/tasks.c    ****         #else
3731:os/tasks.c    ****             {
3732:os/tasks.c    ****                 pxTaskStatus->uxBasePriority = 0;
3733:os/tasks.c    ****             }
3734:os/tasks.c    ****         #endif
3735:os/tasks.c    **** 
3736:os/tasks.c    ****         #if ( configGENERATE_RUN_TIME_STATS == 1 )
3737:os/tasks.c    ****             {
3738:os/tasks.c    ****                 pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3739:os/tasks.c    ****             }
3740:os/tasks.c    ****         #else
3741:os/tasks.c    ****             {
3742:os/tasks.c    ****                 pxTaskStatus->ulRunTimeCounter = 0;
3743:os/tasks.c    ****             }
3744:os/tasks.c    ****         #endif
3745:os/tasks.c    **** 
3746:os/tasks.c    ****         /* Obtaining the task state is a little fiddly, so is only done if the
3747:os/tasks.c    ****          * value of eState passed into this function is eInvalid - otherwise the
3748:os/tasks.c    ****          * state is just set to whatever is passed in. */
3749:os/tasks.c    ****         if( eState != eInvalid )
3750:os/tasks.c    ****         {
3751:os/tasks.c    ****             if( pxTCB == pxCurrentTCB )
3752:os/tasks.c    ****             {
3753:os/tasks.c    ****                 pxTaskStatus->eCurrentState = eRunning;
3754:os/tasks.c    ****             }
3755:os/tasks.c    ****             else
3756:os/tasks.c    ****             {
3757:os/tasks.c    ****                 pxTaskStatus->eCurrentState = eState;
3758:os/tasks.c    **** 
3759:os/tasks.c    ****                 #if ( INCLUDE_vTaskSuspend == 1 )
3760:os/tasks.c    ****                     {
3761:os/tasks.c    ****                         /* If the task is in the suspended list then there is a
3762:os/tasks.c    ****                          *  chance it is actually just blocked indefinitely - so really
3763:os/tasks.c    ****                          *  it should be reported as being in the Blocked state. */
3764:os/tasks.c    ****                         if( eState == eSuspended )
3765:os/tasks.c    ****                         {
3766:os/tasks.c    ****                             vTaskSuspendAll();
3767:os/tasks.c    ****                             {
3768:os/tasks.c    ****                                 if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3769:os/tasks.c    ****                                 {
3770:os/tasks.c    ****                                     pxTaskStatus->eCurrentState = eBlocked;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 73


3771:os/tasks.c    ****                                 }
3772:os/tasks.c    ****                             }
3773:os/tasks.c    ****                             ( void ) xTaskResumeAll();
3774:os/tasks.c    ****                         }
3775:os/tasks.c    ****                     }
3776:os/tasks.c    ****                 #endif /* INCLUDE_vTaskSuspend */
3777:os/tasks.c    ****             }
3778:os/tasks.c    ****         }
3779:os/tasks.c    ****         else
3780:os/tasks.c    ****         {
3781:os/tasks.c    ****             pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3782:os/tasks.c    ****         }
3783:os/tasks.c    **** 
3784:os/tasks.c    ****         /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3785:os/tasks.c    ****          * parameter is provided to allow it to be skipped. */
3786:os/tasks.c    ****         if( xGetFreeStackSpace != pdFALSE )
3787:os/tasks.c    ****         {
3788:os/tasks.c    ****             #if ( portSTACK_GROWTH > 0 )
3789:os/tasks.c    ****                 {
3790:os/tasks.c    ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3791:os/tasks.c    ****                 }
3792:os/tasks.c    ****             #else
3793:os/tasks.c    ****                 {
3794:os/tasks.c    ****                     pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) 
3795:os/tasks.c    ****                 }
3796:os/tasks.c    ****             #endif
3797:os/tasks.c    ****         }
3798:os/tasks.c    ****         else
3799:os/tasks.c    ****         {
3800:os/tasks.c    ****             pxTaskStatus->usStackHighWaterMark = 0;
3801:os/tasks.c    ****         }
3802:os/tasks.c    ****     }
3803:os/tasks.c    **** 
3804:os/tasks.c    **** #endif /* configUSE_TRACE_FACILITY */
3805:os/tasks.c    **** /*-----------------------------------------------------------*/
3806:os/tasks.c    **** 
3807:os/tasks.c    **** #if ( configUSE_TRACE_FACILITY == 1 )
3808:os/tasks.c    **** 
3809:os/tasks.c    ****     static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t * pxTaskStatusArray,
3810:os/tasks.c    ****                                                      List_t * pxList,
3811:os/tasks.c    ****                                                      eTaskState eState )
3812:os/tasks.c    ****     {
3813:os/tasks.c    ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
3814:os/tasks.c    ****         UBaseType_t uxTask = 0;
3815:os/tasks.c    **** 
3816:os/tasks.c    ****         if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3817:os/tasks.c    ****         {
3818:os/tasks.c    ****             listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this
3819:os/tasks.c    **** 
3820:os/tasks.c    ****             /* Populate an TaskStatus_t structure within the
3821:os/tasks.c    ****              * pxTaskStatusArray array for each task that is referenced from
3822:os/tasks.c    ****              * pxList.  See the definition of TaskStatus_t in task.h for the
3823:os/tasks.c    ****              * meaning of each TaskStatus_t structure member. */
3824:os/tasks.c    ****             do
3825:os/tasks.c    ****             {
3826:os/tasks.c    ****                 listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as t
3827:os/tasks.c    ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 74


3828:os/tasks.c    ****                 uxTask++;
3829:os/tasks.c    ****             } while( pxNextTCB != pxFirstTCB );
3830:os/tasks.c    ****         }
3831:os/tasks.c    ****         else
3832:os/tasks.c    ****         {
3833:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
3834:os/tasks.c    ****         }
3835:os/tasks.c    **** 
3836:os/tasks.c    ****         return uxTask;
3837:os/tasks.c    ****     }
3838:os/tasks.c    **** 
3839:os/tasks.c    **** #endif /* configUSE_TRACE_FACILITY */
3840:os/tasks.c    **** /*-----------------------------------------------------------*/
3841:os/tasks.c    **** 
3842:os/tasks.c    **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3843:os/tasks.c    **** 
3844:os/tasks.c    ****     static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3845:os/tasks.c    ****     {
 131              		.loc 1 3845 5 is_stmt 1 view -0
 132              		.cfi_startproc
 133              		@ args = 0, pretend = 0, frame = 0
 134              		@ frame_needed = 0, uses_anonymous_args = 0
 135              		@ link register save eliminated.
3846:os/tasks.c    ****         uint32_t ulCount = 0U;
 136              		.loc 1 3846 9 view .LVU32
3847:os/tasks.c    **** 
3848:os/tasks.c    ****         while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 137              		.loc 1 3848 9 view .LVU33
3846:os/tasks.c    ****         uint32_t ulCount = 0U;
 138              		.loc 1 3846 18 is_stmt 0 view .LVU34
 139 0000 0023     		movs	r3, #0
 140              	.LVL10:
 141              	.L13:
 142              		.loc 1 3848 14 is_stmt 1 view .LVU35
 143              		.loc 1 3848 16 is_stmt 0 view .LVU36
 144 0002 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 145              		.loc 1 3848 14 view .LVU37
 146 0004 A52A     		cmp	r2, #165
 147 0006 02D1     		bne	.L15
3849:os/tasks.c    ****         {
3850:os/tasks.c    ****             pucStackByte -= portSTACK_GROWTH;
 148              		.loc 1 3850 13 is_stmt 1 view .LVU38
 149              		.loc 1 3850 26 is_stmt 0 view .LVU39
 150 0008 0130     		adds	r0, r0, #1
 151              	.LVL11:
3851:os/tasks.c    ****             ulCount++;
 152              		.loc 1 3851 13 is_stmt 1 view .LVU40
 153              		.loc 1 3851 20 is_stmt 0 view .LVU41
 154 000a 0133     		adds	r3, r3, #1
 155              	.LVL12:
 156              		.loc 1 3851 20 view .LVU42
 157 000c F9E7     		b	.L13
 158              	.L15:
3852:os/tasks.c    ****         }
3853:os/tasks.c    **** 
3854:os/tasks.c    ****         ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on sma
 159              		.loc 1 3854 9 is_stmt 1 view .LVU43
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 75


 160              	.LVL13:
3855:os/tasks.c    **** 
3856:os/tasks.c    ****         return ( configSTACK_DEPTH_TYPE ) ulCount;
 161              		.loc 1 3856 9 view .LVU44
3857:os/tasks.c    ****     }
 162              		.loc 1 3857 5 is_stmt 0 view .LVU45
 163 000e C3F38F00 		ubfx	r0, r3, #2, #16
 164              	.LVL14:
 165              		.loc 1 3857 5 view .LVU46
 166 0012 7047     		bx	lr
 167              		.cfi_endproc
 168              	.LFE47:
 170              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 171              		.align	1
 172              		.syntax unified
 173              		.thumb
 174              		.thumb_func
 175              		.fpu fpv5-d16
 177              	prvResetNextTaskUnblockTime:
 178              	.LFB50:
3858:os/tasks.c    **** 
3859:os/tasks.c    **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3860:os/tasks.c    **** /*-----------------------------------------------------------*/
3861:os/tasks.c    **** 
3862:os/tasks.c    **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3863:os/tasks.c    **** 
3864:os/tasks.c    **** /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3865:os/tasks.c    ****  * same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3866:os/tasks.c    ****  * user to determine the return type.  It gets around the problem of the value
3867:os/tasks.c    ****  * overflowing on 8-bit types without breaking backward compatibility for
3868:os/tasks.c    ****  * applications that expect an 8-bit return type. */
3869:os/tasks.c    ****     configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3870:os/tasks.c    ****     {
3871:os/tasks.c    ****         TCB_t * pxTCB;
3872:os/tasks.c    ****         uint8_t * pucEndOfStack;
3873:os/tasks.c    ****         configSTACK_DEPTH_TYPE uxReturn;
3874:os/tasks.c    **** 
3875:os/tasks.c    ****         /* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3876:os/tasks.c    ****          * the same except for their return type.  Using configSTACK_DEPTH_TYPE
3877:os/tasks.c    ****          * allows the user to determine the return type.  It gets around the
3878:os/tasks.c    ****          * problem of the value overflowing on 8-bit types without breaking
3879:os/tasks.c    ****          * backward compatibility for applications that expect an 8-bit return
3880:os/tasks.c    ****          * type. */
3881:os/tasks.c    **** 
3882:os/tasks.c    ****         pxTCB = prvGetTCBFromHandle( xTask );
3883:os/tasks.c    **** 
3884:os/tasks.c    ****         #if portSTACK_GROWTH < 0
3885:os/tasks.c    ****             {
3886:os/tasks.c    ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3887:os/tasks.c    ****             }
3888:os/tasks.c    ****         #else
3889:os/tasks.c    ****             {
3890:os/tasks.c    ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3891:os/tasks.c    ****             }
3892:os/tasks.c    ****         #endif
3893:os/tasks.c    **** 
3894:os/tasks.c    ****         uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 76


3895:os/tasks.c    **** 
3896:os/tasks.c    ****         return uxReturn;
3897:os/tasks.c    ****     }
3898:os/tasks.c    **** 
3899:os/tasks.c    **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3900:os/tasks.c    **** /*-----------------------------------------------------------*/
3901:os/tasks.c    **** 
3902:os/tasks.c    **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3903:os/tasks.c    **** 
3904:os/tasks.c    ****     UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3905:os/tasks.c    ****     {
3906:os/tasks.c    ****         TCB_t * pxTCB;
3907:os/tasks.c    ****         uint8_t * pucEndOfStack;
3908:os/tasks.c    ****         UBaseType_t uxReturn;
3909:os/tasks.c    **** 
3910:os/tasks.c    ****         pxTCB = prvGetTCBFromHandle( xTask );
3911:os/tasks.c    **** 
3912:os/tasks.c    ****         #if portSTACK_GROWTH < 0
3913:os/tasks.c    ****             {
3914:os/tasks.c    ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3915:os/tasks.c    ****             }
3916:os/tasks.c    ****         #else
3917:os/tasks.c    ****             {
3918:os/tasks.c    ****                 pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3919:os/tasks.c    ****             }
3920:os/tasks.c    ****         #endif
3921:os/tasks.c    **** 
3922:os/tasks.c    ****         uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3923:os/tasks.c    **** 
3924:os/tasks.c    ****         return uxReturn;
3925:os/tasks.c    ****     }
3926:os/tasks.c    **** 
3927:os/tasks.c    **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3928:os/tasks.c    **** /*-----------------------------------------------------------*/
3929:os/tasks.c    **** 
3930:os/tasks.c    **** #if ( INCLUDE_vTaskDelete == 1 )
3931:os/tasks.c    **** 
3932:os/tasks.c    ****     static void prvDeleteTCB( TCB_t * pxTCB )
3933:os/tasks.c    ****     {
3934:os/tasks.c    ****         /* This call is required specifically for the TriCore port.  It must be
3935:os/tasks.c    ****          * above the vPortFree() calls.  The call is also used by ports/demos that
3936:os/tasks.c    ****          * want to allocate and clean RAM statically. */
3937:os/tasks.c    ****         portCLEAN_UP_TCB( pxTCB );
3938:os/tasks.c    **** 
3939:os/tasks.c    ****         /* Free up the memory allocated by the scheduler for the task.  It is up
3940:os/tasks.c    ****          * to the task to free any memory allocated at the application level.
3941:os/tasks.c    ****          * See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
3942:os/tasks.c    ****          * for additional information. */
3943:os/tasks.c    ****         #if ( configUSE_NEWLIB_REENTRANT == 1 )
3944:os/tasks.c    ****             {
3945:os/tasks.c    ****                 _reclaim_reent( &( pxTCB->xNewLib_reent ) );
3946:os/tasks.c    ****             }
3947:os/tasks.c    ****         #endif /* configUSE_NEWLIB_REENTRANT */
3948:os/tasks.c    **** 
3949:os/tasks.c    ****         #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 )
3950:os/tasks.c    ****             {
3951:os/tasks.c    ****                 /* The task can only have been allocated dynamically - free both
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 77


3952:os/tasks.c    ****                  * the stack and TCB. */
3953:os/tasks.c    ****                 vPortFreeStack( pxTCB->pxStack );
3954:os/tasks.c    ****                 vPortFree( pxTCB );
3955:os/tasks.c    ****             }
3956:os/tasks.c    ****         #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been
3957:os/tasks.c    ****             {
3958:os/tasks.c    ****                 /* The task could have been allocated statically or dynamically, so
3959:os/tasks.c    ****                  * check what was statically allocated before trying to free the
3960:os/tasks.c    ****                  * memory. */
3961:os/tasks.c    ****                 if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3962:os/tasks.c    ****                 {
3963:os/tasks.c    ****                     /* Both the stack and TCB were allocated dynamically, so both
3964:os/tasks.c    ****                      * must be freed. */
3965:os/tasks.c    ****                     vPortFreeStack( pxTCB->pxStack );
3966:os/tasks.c    ****                     vPortFree( pxTCB );
3967:os/tasks.c    ****                 }
3968:os/tasks.c    ****                 else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3969:os/tasks.c    ****                 {
3970:os/tasks.c    ****                     /* Only the stack was statically allocated, so the TCB is the
3971:os/tasks.c    ****                      * only memory that must be freed. */
3972:os/tasks.c    ****                     vPortFree( pxTCB );
3973:os/tasks.c    ****                 }
3974:os/tasks.c    ****                 else
3975:os/tasks.c    ****                 {
3976:os/tasks.c    ****                     /* Neither the stack nor the TCB were allocated dynamically, so
3977:os/tasks.c    ****                      * nothing needs to be freed. */
3978:os/tasks.c    ****                     configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND
3979:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
3980:os/tasks.c    ****                 }
3981:os/tasks.c    ****             }
3982:os/tasks.c    ****         #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3983:os/tasks.c    ****     }
3984:os/tasks.c    **** 
3985:os/tasks.c    **** #endif /* INCLUDE_vTaskDelete */
3986:os/tasks.c    **** /*-----------------------------------------------------------*/
3987:os/tasks.c    **** 
3988:os/tasks.c    **** static void prvResetNextTaskUnblockTime( void )
3989:os/tasks.c    **** {
 179              		.loc 1 3989 1 is_stmt 1 view -0
 180              		.cfi_startproc
 181              		@ args = 0, pretend = 0, frame = 0
 182              		@ frame_needed = 0, uses_anonymous_args = 0
 183              		@ link register save eliminated.
3990:os/tasks.c    ****     if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 184              		.loc 1 3990 5 view .LVU48
 185              		.loc 1 3990 9 is_stmt 0 view .LVU49
 186 0000 074B     		ldr	r3, .L19
 187 0002 1B68     		ldr	r3, [r3]
 188 0004 1B68     		ldr	r3, [r3]
 189              		.loc 1 3990 7 view .LVU50
 190 0006 23B9     		cbnz	r3, .L17
3991:os/tasks.c    ****     {
3992:os/tasks.c    ****         /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3993:os/tasks.c    ****          * the maximum possible value so it is  extremely unlikely that the
3994:os/tasks.c    ****          * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3995:os/tasks.c    ****          * there is an item in the delayed list. */
3996:os/tasks.c    ****         xNextTaskUnblockTime = portMAX_DELAY;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 78


 191              		.loc 1 3996 9 is_stmt 1 view .LVU51
 192              		.loc 1 3996 30 is_stmt 0 view .LVU52
 193 0008 064B     		ldr	r3, .L19+4
 194 000a 4FF0FF32 		mov	r2, #-1
 195 000e 1A60     		str	r2, [r3]
 196 0010 7047     		bx	lr
 197              	.L17:
3997:os/tasks.c    ****     }
3998:os/tasks.c    ****     else
3999:os/tasks.c    ****     {
4000:os/tasks.c    ****         /* The new current delayed list is not empty, get the value of
4001:os/tasks.c    ****          * the item at the head of the delayed list.  This is the time at
4002:os/tasks.c    ****          * which the task at the head of the delayed list should be removed
4003:os/tasks.c    ****          * from the Blocked state. */
4004:os/tasks.c    ****         xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 198              		.loc 1 4004 9 is_stmt 1 view .LVU53
 199              		.loc 1 4004 32 is_stmt 0 view .LVU54
 200 0012 034B     		ldr	r3, .L19
 201 0014 1B68     		ldr	r3, [r3]
 202 0016 DB68     		ldr	r3, [r3, #12]
 203 0018 1A68     		ldr	r2, [r3]
 204              		.loc 1 4004 30 view .LVU55
 205 001a 024B     		ldr	r3, .L19+4
 206 001c 1A60     		str	r2, [r3]
4005:os/tasks.c    ****     }
4006:os/tasks.c    **** }
 207              		.loc 1 4006 1 view .LVU56
 208 001e 7047     		bx	lr
 209              	.L20:
 210              		.align	2
 211              	.L19:
 212 0020 00000000 		.word	.LANCHOR2
 213 0024 00000000 		.word	.LANCHOR3
 214              		.cfi_endproc
 215              	.LFE50:
 217              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 218              		.align	1
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv5-d16
 224              	prvInitialiseNewTask:
 225              	.LVL15:
 226              	.LFB6:
 825:os/tasks.c    ****     StackType_t * pxTopOfStack;
 227              		.loc 1 825 1 is_stmt 1 view -0
 228              		.cfi_startproc
 229              		@ args = 16, pretend = 0, frame = 0
 230              		@ frame_needed = 0, uses_anonymous_args = 0
 825:os/tasks.c    ****     StackType_t * pxTopOfStack;
 231              		.loc 1 825 1 is_stmt 0 view .LVU58
 232 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 233              	.LCFI0:
 234              		.cfi_def_cfa_offset 40
 235              		.cfi_offset 3, -40
 236              		.cfi_offset 4, -36
 237              		.cfi_offset 5, -32
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 79


 238              		.cfi_offset 6, -28
 239              		.cfi_offset 7, -24
 240              		.cfi_offset 8, -20
 241              		.cfi_offset 9, -16
 242              		.cfi_offset 10, -12
 243              		.cfi_offset 11, -8
 244              		.cfi_offset 14, -4
 245 0004 8046     		mov	r8, r0
 246 0006 0D46     		mov	r5, r1
 247 0008 9346     		mov	fp, r2
 248 000a 9946     		mov	r9, r3
 249 000c 0A9E     		ldr	r6, [sp, #40]
 250 000e DDF82CA0 		ldr	r10, [sp, #44]
 251 0012 0C9C     		ldr	r4, [sp, #48]
 826:os/tasks.c    ****     UBaseType_t x;
 252              		.loc 1 826 5 is_stmt 1 view .LVU59
 827:os/tasks.c    **** 
 253              		.loc 1 827 5 view .LVU60
 848:os/tasks.c    ****         }
 254              		.loc 1 848 13 view .LVU61
 848:os/tasks.c    ****         }
 255              		.loc 1 848 22 is_stmt 0 view .LVU62
 256 0014 9200     		lsls	r2, r2, #2
 257              	.LVL16:
 848:os/tasks.c    ****         }
 258              		.loc 1 848 22 view .LVU63
 259 0016 A521     		movs	r1, #165
 260              	.LVL17:
 848:os/tasks.c    ****         }
 261              		.loc 1 848 22 view .LVU64
 262 0018 206B     		ldr	r0, [r4, #48]
 263              	.LVL18:
 848:os/tasks.c    ****         }
 264              		.loc 1 848 22 view .LVU65
 265 001a FFF7FEFF 		bl	memset
 266              	.LVL19:
 858:os/tasks.c    ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 267              		.loc 1 858 13 is_stmt 1 view .LVU66
 858:os/tasks.c    ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 268              		.loc 1 858 39 is_stmt 0 view .LVU67
 269 001e 276B     		ldr	r7, [r4, #48]
 858:os/tasks.c    ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 270              		.loc 1 858 48 view .LVU68
 271 0020 6FF04043 		mvn	r3, #-1073741824
 272 0024 5B44     		add	r3, r3, fp
 858:os/tasks.c    ****             pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( 
 273              		.loc 1 858 26 view .LVU69
 274 0026 07EB8307 		add	r7, r7, r3, lsl #2
 275              	.LVL20:
 859:os/tasks.c    **** 
 276              		.loc 1 859 13 is_stmt 1 view .LVU70
 859:os/tasks.c    **** 
 277              		.loc 1 859 91 is_stmt 0 view .LVU71
 278 002a 27F00707 		bic	r7, r7, #7
 279              	.LVL21:
 862:os/tasks.c    **** 
 280              		.loc 1 862 13 is_stmt 1 view .LVU72
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 80


 862:os/tasks.c    **** 
 281              		.loc 1 862 134 view .LVU73
 886:os/tasks.c    ****     {
 282              		.loc 1 886 5 view .LVU74
 886:os/tasks.c    ****     {
 283              		.loc 1 886 7 is_stmt 0 view .LVU75
 284 002e 85B3     		cbz	r5, .L33
 888:os/tasks.c    ****         {
 285              		.loc 1 888 16 view .LVU76
 286 0030 0022     		movs	r2, #0
 287              	.L22:
 288              	.LVL22:
 888:os/tasks.c    ****         {
 289              		.loc 1 888 37 is_stmt 1 discriminator 1 view .LVU77
 888:os/tasks.c    ****         {
 290              		.loc 1 888 9 is_stmt 0 discriminator 1 view .LVU78
 291 0032 0F2A     		cmp	r2, #15
 292 0034 07D8     		bhi	.L24
 890:os/tasks.c    **** 
 293              		.loc 1 890 13 is_stmt 1 view .LVU79
 890:os/tasks.c    **** 
 294              		.loc 1 890 47 is_stmt 0 view .LVU80
 295 0036 A95C     		ldrb	r1, [r5, r2]	@ zero_extendqisi2
 890:os/tasks.c    **** 
 296              		.loc 1 890 39 view .LVU81
 297 0038 A318     		adds	r3, r4, r2
 298 003a 83F83410 		strb	r1, [r3, #52]
 895:os/tasks.c    ****             {
 299              		.loc 1 895 13 is_stmt 1 view .LVU82
 895:os/tasks.c    ****             {
 300              		.loc 1 895 23 is_stmt 0 view .LVU83
 301 003e AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 895:os/tasks.c    ****             {
 302              		.loc 1 895 15 view .LVU84
 303 0040 0BB1     		cbz	r3, .L24
 901:os/tasks.c    ****             }
 304              		.loc 1 901 41 is_stmt 1 discriminator 2 view .LVU85
 888:os/tasks.c    ****         {
 305              		.loc 1 888 82 discriminator 2 view .LVU86
 888:os/tasks.c    ****         {
 306              		.loc 1 888 83 is_stmt 0 discriminator 2 view .LVU87
 307 0042 0132     		adds	r2, r2, #1
 308              	.LVL23:
 888:os/tasks.c    ****         {
 309              		.loc 1 888 83 discriminator 2 view .LVU88
 310 0044 F5E7     		b	.L22
 311              	.L24:
 907:os/tasks.c    ****     }
 312              		.loc 1 907 9 is_stmt 1 view .LVU89
 907:os/tasks.c    ****     }
 313              		.loc 1 907 61 is_stmt 0 view .LVU90
 314 0046 0023     		movs	r3, #0
 315 0048 84F84330 		strb	r3, [r4, #67]
 316              	.LVL24:
 317              	.L26:
 918:os/tasks.c    ****     {
 318              		.loc 1 918 5 is_stmt 1 view .LVU91
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 81


 918:os/tasks.c    ****     {
 319              		.loc 1 918 7 is_stmt 0 view .LVU92
 320 004c 032E     		cmp	r6, #3
 321 004e 00D9     		bls	.L27
 920:os/tasks.c    ****     }
 322              		.loc 1 920 20 view .LVU93
 323 0050 0326     		movs	r6, #3
 324              	.L27:
 325              	.LVL25:
 924:os/tasks.c    ****     }
 326              		.loc 1 924 33 is_stmt 1 view .LVU94
 927:os/tasks.c    ****     #if ( configUSE_MUTEXES == 1 )
 327              		.loc 1 927 5 view .LVU95
 927:os/tasks.c    ****     #if ( configUSE_MUTEXES == 1 )
 328              		.loc 1 927 26 is_stmt 0 view .LVU96
 329 0052 E662     		str	r6, [r4, #44]
 930:os/tasks.c    ****             pxNewTCB->uxMutexesHeld = 0;
 330              		.loc 1 930 13 is_stmt 1 view .LVU97
 930:os/tasks.c    ****             pxNewTCB->uxMutexesHeld = 0;
 331              		.loc 1 930 38 is_stmt 0 view .LVU98
 332 0054 E664     		str	r6, [r4, #76]
 931:os/tasks.c    ****         }
 333              		.loc 1 931 13 is_stmt 1 view .LVU99
 931:os/tasks.c    ****         }
 334              		.loc 1 931 37 is_stmt 0 view .LVU100
 335 0056 0025     		movs	r5, #0
 336              	.LVL26:
 931:os/tasks.c    ****         }
 337              		.loc 1 931 37 view .LVU101
 338 0058 2565     		str	r5, [r4, #80]
 935:os/tasks.c    ****     vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 339              		.loc 1 935 5 is_stmt 1 view .LVU102
 340 005a 201D     		adds	r0, r4, #4
 341 005c FFF7FEFF 		bl	vListInitialiseItem
 342              	.LVL27:
 936:os/tasks.c    **** 
 343              		.loc 1 936 5 view .LVU103
 344 0060 04F11800 		add	r0, r4, #24
 345 0064 FFF7FEFF 		bl	vListInitialiseItem
 346              	.LVL28:
 940:os/tasks.c    **** 
 347              		.loc 1 940 5 view .LVU104
 348 0068 2461     		str	r4, [r4, #16]
 943:os/tasks.c    ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 349              		.loc 1 943 5 view .LVU105
 350 006a C6F10406 		rsb	r6, r6, #4
 351              	.LVL29:
 943:os/tasks.c    ****     listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 352              		.loc 1 943 5 is_stmt 0 view .LVU106
 353 006e A661     		str	r6, [r4, #24]
 944:os/tasks.c    **** 
 354              		.loc 1 944 5 is_stmt 1 view .LVU107
 355 0070 6462     		str	r4, [r4, #36]
 971:os/tasks.c    ****         }
 356              		.loc 1 971 13 view .LVU108
 983:os/tasks.c    ****             memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyS
 357              		.loc 1 983 13 view .LVU109
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 82


 358 0072 6565     		str	r5, [r4, #84]	@ unaligned
 984:os/tasks.c    ****         }
 359              		.loc 1 984 13 view .LVU110
 360 0074 84F85850 		strb	r5, [r4, #88]
1049:os/tasks.c    ****                 }
 361              		.loc 1 1049 21 view .LVU111
1049:os/tasks.c    ****                 }
 362              		.loc 1 1049 46 is_stmt 0 view .LVU112
 363 0078 4A46     		mov	r2, r9
 364 007a 4146     		mov	r1, r8
 365 007c 3846     		mov	r0, r7
 366 007e FFF7FEFF 		bl	pxPortInitialiseStack
 367              	.LVL30:
1049:os/tasks.c    ****                 }
 368              		.loc 1 1049 44 view .LVU113
 369 0082 2060     		str	r0, [r4]
1055:os/tasks.c    ****     {
 370              		.loc 1 1055 5 is_stmt 1 view .LVU114
1055:os/tasks.c    ****     {
 371              		.loc 1 1055 7 is_stmt 0 view .LVU115
 372 0084 BAF1000F 		cmp	r10, #0
 373 0088 01D0     		beq	.L21
1059:os/tasks.c    ****     }
 374              		.loc 1 1059 9 is_stmt 1 view .LVU116
1059:os/tasks.c    ****     }
 375              		.loc 1 1059 24 is_stmt 0 view .LVU117
 376 008a CAF80040 		str	r4, [r10]
1063:os/tasks.c    ****     }
 377              		.loc 1 1063 33 is_stmt 1 view .LVU118
 378              	.L21:
1065:os/tasks.c    **** /*-----------------------------------------------------------*/
 379              		.loc 1 1065 1 is_stmt 0 view .LVU119
 380 008e BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 381              	.LVL31:
 382              	.L33:
 913:os/tasks.c    ****     }
 383              		.loc 1 913 9 is_stmt 1 view .LVU120
 913:os/tasks.c    ****     }
 384              		.loc 1 913 35 is_stmt 0 view .LVU121
 385 0092 0023     		movs	r3, #0
 386 0094 84F83430 		strb	r3, [r4, #52]
 387 0098 D8E7     		b	.L26
 388              		.cfi_endproc
 389              	.LFE6:
 391              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 392              		.align	1
 393              		.syntax unified
 394              		.thumb
 395              		.thumb_func
 396              		.fpu fpv5-d16
 398              	prvInitialiseTaskLists:
 399              	.LFB43:
3649:os/tasks.c    ****     UBaseType_t uxPriority;
 400              		.loc 1 3649 1 is_stmt 1 view -0
 401              		.cfi_startproc
 402              		@ args = 0, pretend = 0, frame = 0
 403              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 83


 404 0000 38B5     		push	{r3, r4, r5, lr}
 405              	.LCFI1:
 406              		.cfi_def_cfa_offset 16
 407              		.cfi_offset 3, -16
 408              		.cfi_offset 4, -12
 409              		.cfi_offset 5, -8
 410              		.cfi_offset 14, -4
3650:os/tasks.c    **** 
 411              		.loc 1 3650 5 view .LVU123
3652:os/tasks.c    ****     {
 412              		.loc 1 3652 5 view .LVU124
 413              	.LVL32:
3652:os/tasks.c    ****     {
 414              		.loc 1 3652 21 is_stmt 0 view .LVU125
 415 0002 0024     		movs	r4, #0
3652:os/tasks.c    ****     {
 416              		.loc 1 3652 5 view .LVU126
 417 0004 07E0     		b	.L35
 418              	.LVL33:
 419              	.L36:
3654:os/tasks.c    ****     }
 420              		.loc 1 3654 9 is_stmt 1 discriminator 3 view .LVU127
 421 0006 04EB8402 		add	r2, r4, r4, lsl #2
 422 000a 9300     		lsls	r3, r2, #2
 423 000c 0E48     		ldr	r0, .L38
 424 000e 1844     		add	r0, r0, r3
 425 0010 FFF7FEFF 		bl	vListInitialise
 426              	.LVL34:
3652:os/tasks.c    ****     {
 427              		.loc 1 3652 94 discriminator 3 view .LVU128
3652:os/tasks.c    ****     {
 428              		.loc 1 3652 104 is_stmt 0 discriminator 3 view .LVU129
 429 0014 0134     		adds	r4, r4, #1
 430              	.LVL35:
 431              	.L35:
3652:os/tasks.c    ****     {
 432              		.loc 1 3652 43 is_stmt 1 discriminator 1 view .LVU130
3652:os/tasks.c    ****     {
 433              		.loc 1 3652 5 is_stmt 0 discriminator 1 view .LVU131
 434 0016 032C     		cmp	r4, #3
 435 0018 F5D9     		bls	.L36
3657:os/tasks.c    ****     vListInitialise( &xDelayedTaskList2 );
 436              		.loc 1 3657 5 is_stmt 1 view .LVU132
 437 001a 0C4D     		ldr	r5, .L38+4
 438 001c 2846     		mov	r0, r5
 439 001e FFF7FEFF 		bl	vListInitialise
 440              	.LVL36:
3658:os/tasks.c    ****     vListInitialise( &xPendingReadyList );
 441              		.loc 1 3658 5 view .LVU133
 442 0022 0B4C     		ldr	r4, .L38+8
 443              	.LVL37:
3658:os/tasks.c    ****     vListInitialise( &xPendingReadyList );
 444              		.loc 1 3658 5 is_stmt 0 view .LVU134
 445 0024 2046     		mov	r0, r4
 446 0026 FFF7FEFF 		bl	vListInitialise
 447              	.LVL38:
3659:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 84


 448              		.loc 1 3659 5 is_stmt 1 view .LVU135
 449 002a 0A48     		ldr	r0, .L38+12
 450 002c FFF7FEFF 		bl	vListInitialise
 451              	.LVL39:
3663:os/tasks.c    ****         }
 452              		.loc 1 3663 13 view .LVU136
 453 0030 0948     		ldr	r0, .L38+16
 454 0032 FFF7FEFF 		bl	vListInitialise
 455              	.LVL40:
3669:os/tasks.c    ****         }
 456              		.loc 1 3669 13 view .LVU137
 457 0036 0948     		ldr	r0, .L38+20
 458 0038 FFF7FEFF 		bl	vListInitialise
 459              	.LVL41:
3675:os/tasks.c    ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 460              		.loc 1 3675 5 view .LVU138
3675:os/tasks.c    ****     pxOverflowDelayedTaskList = &xDelayedTaskList2;
 461              		.loc 1 3675 23 is_stmt 0 view .LVU139
 462 003c 084B     		ldr	r3, .L38+24
 463 003e 1D60     		str	r5, [r3]
3676:os/tasks.c    **** }
 464              		.loc 1 3676 5 is_stmt 1 view .LVU140
3676:os/tasks.c    **** }
 465              		.loc 1 3676 31 is_stmt 0 view .LVU141
 466 0040 084B     		ldr	r3, .L38+28
 467 0042 1C60     		str	r4, [r3]
3677:os/tasks.c    **** /*-----------------------------------------------------------*/
 468              		.loc 1 3677 1 view .LVU142
 469 0044 38BD     		pop	{r3, r4, r5, pc}
 470              	.L39:
 471 0046 00BF     		.align	2
 472              	.L38:
 473 0048 00000000 		.word	.LANCHOR4
 474 004c 00000000 		.word	.LANCHOR5
 475 0050 00000000 		.word	.LANCHOR6
 476 0054 00000000 		.word	.LANCHOR1
 477 0058 00000000 		.word	.LANCHOR7
 478 005c 00000000 		.word	.LANCHOR0
 479 0060 00000000 		.word	.LANCHOR2
 480 0064 00000000 		.word	.LANCHOR8
 481              		.cfi_endproc
 482              	.LFE43:
 484              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 485              		.align	1
 486              		.syntax unified
 487              		.thumb
 488              		.thumb_func
 489              		.fpu fpv5-d16
 491              	prvAddNewTaskToReadyList:
 492              	.LVL42:
 493              	.LFB7:
1069:os/tasks.c    ****     /* Ensure interrupts don't access the task lists while the lists are being
 494              		.loc 1 1069 1 is_stmt 1 view -0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
1069:os/tasks.c    ****     /* Ensure interrupts don't access the task lists while the lists are being
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 85


 498              		.loc 1 1069 1 is_stmt 0 view .LVU144
 499 0000 10B5     		push	{r4, lr}
 500              	.LCFI2:
 501              		.cfi_def_cfa_offset 8
 502              		.cfi_offset 4, -8
 503              		.cfi_offset 14, -4
 504 0002 0446     		mov	r4, r0
1072:os/tasks.c    ****     {
 505              		.loc 1 1072 5 is_stmt 1 view .LVU145
 506 0004 FFF7FEFF 		bl	vPortEnterCritical
 507              	.LVL43:
1074:os/tasks.c    **** 
 508              		.loc 1 1074 9 view .LVU146
1074:os/tasks.c    **** 
 509              		.loc 1 1074 31 is_stmt 0 view .LVU147
 510 0008 214A     		ldr	r2, .L48
 511 000a 1368     		ldr	r3, [r2]
 512 000c 0133     		adds	r3, r3, #1
 513 000e 1360     		str	r3, [r2]
1076:os/tasks.c    ****         {
 514              		.loc 1 1076 9 is_stmt 1 view .LVU148
1076:os/tasks.c    ****         {
 515              		.loc 1 1076 26 is_stmt 0 view .LVU149
 516 0010 204B     		ldr	r3, .L48+4
 517 0012 1B68     		ldr	r3, [r3]
1076:os/tasks.c    ****         {
 518              		.loc 1 1076 11 view .LVU150
 519 0014 5BB1     		cbz	r3, .L46
1099:os/tasks.c    ****             {
 520              		.loc 1 1099 13 is_stmt 1 view .LVU151
1099:os/tasks.c    ****             {
 521              		.loc 1 1099 35 is_stmt 0 view .LVU152
 522 0016 204B     		ldr	r3, .L48+8
 523 0018 1B68     		ldr	r3, [r3]
1099:os/tasks.c    ****             {
 524              		.loc 1 1099 15 view .LVU153
 525 001a 6BB9     		cbnz	r3, .L42
1101:os/tasks.c    ****                 {
 526              		.loc 1 1101 17 is_stmt 1 view .LVU154
1101:os/tasks.c    ****                 {
 527              		.loc 1 1101 33 is_stmt 0 view .LVU155
 528 001c 1D4B     		ldr	r3, .L48+4
 529 001e 1B68     		ldr	r3, [r3]
 530 0020 DA6A     		ldr	r2, [r3, #44]
1101:os/tasks.c    ****                 {
 531              		.loc 1 1101 57 view .LVU156
 532 0022 E36A     		ldr	r3, [r4, #44]
1101:os/tasks.c    ****                 {
 533              		.loc 1 1101 19 view .LVU157
 534 0024 9A42     		cmp	r2, r3
 535 0026 07D8     		bhi	.L42
1103:os/tasks.c    ****                 }
 536              		.loc 1 1103 21 is_stmt 1 view .LVU158
1103:os/tasks.c    ****                 }
 537              		.loc 1 1103 34 is_stmt 0 view .LVU159
 538 0028 1A4B     		ldr	r3, .L48+4
 539 002a 1C60     		str	r4, [r3]
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 86


 540 002c 04E0     		b	.L42
 541              	.L46:
1080:os/tasks.c    **** 
 542              		.loc 1 1080 13 is_stmt 1 view .LVU160
1080:os/tasks.c    **** 
 543              		.loc 1 1080 26 is_stmt 0 view .LVU161
 544 002e 194B     		ldr	r3, .L48+4
 545 0030 1C60     		str	r4, [r3]
1082:os/tasks.c    ****             {
 546              		.loc 1 1082 13 is_stmt 1 view .LVU162
1082:os/tasks.c    ****             {
 547              		.loc 1 1082 40 is_stmt 0 view .LVU163
 548 0032 1368     		ldr	r3, [r2]
1082:os/tasks.c    ****             {
 549              		.loc 1 1082 15 view .LVU164
 550 0034 012B     		cmp	r3, #1
 551 0036 27D0     		beq	.L47
 552              	.L42:
1112:os/tasks.c    ****             }
 553              		.loc 1 1112 41 is_stmt 1 view .LVU165
1116:os/tasks.c    **** 
 554              		.loc 1 1116 9 view .LVU166
1116:os/tasks.c    **** 
 555              		.loc 1 1116 21 is_stmt 0 view .LVU167
 556 0038 184A     		ldr	r2, .L48+12
 557 003a 1368     		ldr	r3, [r2]
 558 003c 0133     		adds	r3, r3, #1
 559 003e 1360     		str	r3, [r2]
1121:os/tasks.c    ****             }
 560              		.loc 1 1121 17 is_stmt 1 view .LVU168
1121:os/tasks.c    ****             }
 561              		.loc 1 1121 39 is_stmt 0 view .LVU169
 562 0040 6364     		str	r3, [r4, #68]
1124:os/tasks.c    **** 
 563              		.loc 1 1124 37 is_stmt 1 view .LVU170
1126:os/tasks.c    **** 
 564              		.loc 1 1126 9 view .LVU171
1126:os/tasks.c    **** 
 565              		.loc 1 1126 9 view .LVU172
 566 0042 E06A     		ldr	r0, [r4, #44]
 567 0044 164B     		ldr	r3, .L48+16
 568 0046 1B68     		ldr	r3, [r3]
 569 0048 9842     		cmp	r0, r3
 570 004a 01D9     		bls	.L43
1126:os/tasks.c    **** 
 571              		.loc 1 1126 9 discriminator 1 view .LVU173
 572 004c 144B     		ldr	r3, .L48+16
 573 004e 1860     		str	r0, [r3]
 574              	.L43:
1126:os/tasks.c    **** 
 575              		.loc 1 1126 9 discriminator 3 view .LVU174
1126:os/tasks.c    **** 
 576              		.loc 1 1126 9 discriminator 3 view .LVU175
 577 0050 00EB8000 		add	r0, r0, r0, lsl #2
 578 0054 211D     		adds	r1, r4, #4
 579 0056 134B     		ldr	r3, .L48+20
 580 0058 03EB8000 		add	r0, r3, r0, lsl #2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 87


 581 005c FFF7FEFF 		bl	vListInsertEnd
 582              	.LVL44:
1126:os/tasks.c    **** 
 583              		.loc 1 1126 42 discriminator 3 view .LVU176
1128:os/tasks.c    ****     }
 584              		.loc 1 1128 9 discriminator 3 view .LVU177
1130:os/tasks.c    **** 
 585              		.loc 1 1130 5 discriminator 3 view .LVU178
 586 0060 FFF7FEFF 		bl	vPortExitCritical
 587              	.LVL45:
1132:os/tasks.c    ****     {
 588              		.loc 1 1132 5 discriminator 3 view .LVU179
1132:os/tasks.c    ****     {
 589              		.loc 1 1132 27 is_stmt 0 discriminator 3 view .LVU180
 590 0064 0C4B     		ldr	r3, .L48+8
 591 0066 1B68     		ldr	r3, [r3]
1132:os/tasks.c    ****     {
 592              		.loc 1 1132 7 discriminator 3 view .LVU181
 593 0068 6BB1     		cbz	r3, .L40
1136:os/tasks.c    ****         {
 594              		.loc 1 1136 9 is_stmt 1 view .LVU182
1136:os/tasks.c    ****         {
 595              		.loc 1 1136 25 is_stmt 0 view .LVU183
 596 006a 0A4B     		ldr	r3, .L48+4
 597 006c 1B68     		ldr	r3, [r3]
 598 006e DA6A     		ldr	r2, [r3, #44]
1136:os/tasks.c    ****         {
 599              		.loc 1 1136 48 view .LVU184
 600 0070 E36A     		ldr	r3, [r4, #44]
1136:os/tasks.c    ****         {
 601              		.loc 1 1136 11 view .LVU185
 602 0072 9A42     		cmp	r2, r3
 603 0074 07D2     		bcs	.L40
1138:os/tasks.c    ****         }
 604              		.loc 1 1138 13 is_stmt 1 view .LVU186
 605 0076 0C4B     		ldr	r3, .L48+24
 606 0078 4FF08052 		mov	r2, #268435456
 607 007c 1A60     		str	r2, [r3]
1138:os/tasks.c    ****         }
 608              		.loc 1 1138 13 view .LVU187
 609              		.syntax unified
 610              	@ 1138 "os/tasks.c" 1
 611 007e BFF34F8F 		dsb
 612              	@ 0 "" 2
1138:os/tasks.c    ****         }
 613              		.loc 1 1138 13 view .LVU188
 614              	@ 1138 "os/tasks.c" 1
 615 0082 BFF36F8F 		isb
 616              	@ 0 "" 2
1138:os/tasks.c    ****         }
 617              		.loc 1 1138 44 view .LVU189
1147:os/tasks.c    ****     }
 618              		.loc 1 1147 33 view .LVU190
 619              		.thumb
 620              		.syntax unified
 621              	.L40:
1149:os/tasks.c    **** /*-----------------------------------------------------------*/
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 88


 622              		.loc 1 1149 1 is_stmt 0 view .LVU191
 623 0086 10BD     		pop	{r4, pc}
 624              	.LVL46:
 625              	.L47:
1087:os/tasks.c    ****             }
 626              		.loc 1 1087 17 is_stmt 1 view .LVU192
 627 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 628              	.LVL47:
 629 008c D4E7     		b	.L42
 630              	.L49:
 631 008e 00BF     		.align	2
 632              	.L48:
 633 0090 00000000 		.word	.LANCHOR9
 634 0094 00000000 		.word	.LANCHOR10
 635 0098 00000000 		.word	.LANCHOR11
 636 009c 00000000 		.word	.LANCHOR12
 637 00a0 00000000 		.word	.LANCHOR13
 638 00a4 00000000 		.word	.LANCHOR4
 639 00a8 04ED00E0 		.word	-536810236
 640              		.cfi_endproc
 641              	.LFE7:
 643              		.section	.text.prvDeleteTCB,"ax",%progbits
 644              		.align	1
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu fpv5-d16
 650              	prvDeleteTCB:
 651              	.LVL48:
 652              	.LFB49:
3933:os/tasks.c    ****         /* This call is required specifically for the TriCore port.  It must be
 653              		.loc 1 3933 5 view -0
 654              		.cfi_startproc
 655              		@ args = 0, pretend = 0, frame = 0
 656              		@ frame_needed = 0, uses_anonymous_args = 0
3933:os/tasks.c    ****         /* This call is required specifically for the TriCore port.  It must be
 657              		.loc 1 3933 5 is_stmt 0 view .LVU194
 658 0000 10B5     		push	{r4, lr}
 659              	.LCFI3:
 660              		.cfi_def_cfa_offset 8
 661              		.cfi_offset 4, -8
 662              		.cfi_offset 14, -4
 663 0002 0446     		mov	r4, r0
3937:os/tasks.c    **** 
 664              		.loc 1 3937 9 is_stmt 1 view .LVU195
3961:os/tasks.c    ****                 {
 665              		.loc 1 3961 17 view .LVU196
3961:os/tasks.c    ****                 {
 666              		.loc 1 3961 26 is_stmt 0 view .LVU197
 667 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
3961:os/tasks.c    ****                 {
 668              		.loc 1 3961 19 view .LVU198
 669 0008 73B1     		cbz	r3, .L56
3968:os/tasks.c    ****                 {
 670              		.loc 1 3968 22 is_stmt 1 view .LVU199
3968:os/tasks.c    ****                 {
 671              		.loc 1 3968 24 is_stmt 0 view .LVU200
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 89


 672 000a 012B     		cmp	r3, #1
 673 000c 13D0     		beq	.L57
3978:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
 674              		.loc 1 3978 21 is_stmt 1 view .LVU201
 675 000e 022B     		cmp	r3, #2
 676 0010 10D0     		beq	.L50
3978:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
 677              		.loc 1 3978 21 view .LVU202
 678              	.LBB135:
 679              	.LBI135:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 680              		.loc 2 193 34 view .LVU203
 681              	.LBB136:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 682              		.loc 2 195 9 view .LVU204
 683              		.loc 2 197 9 view .LVU205
 684              		.syntax unified
 685              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 686 0012 4FF05003 			mov r3, #80												
 687 0016 72B6     		cpsid i													
 688 0018 83F31188 		msr basepri, r3											
 689 001c BFF36F8F 		isb														
 690 0020 BFF34F8F 		dsb														
 691 0024 62B6     		cpsie i													
 692              	
 693              	@ 0 "" 2
 694              	.LVL49:
 695              		.thumb
 696              		.syntax unified
 697              	.L54:
 698              		.loc 2 197 9 is_stmt 0 view .LVU206
 699              	.LBE136:
 700              	.LBE135:
3978:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
 701              		.loc 1 3978 21 is_stmt 1 discriminator 1 view .LVU207
3978:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
 702              		.loc 1 3978 21 discriminator 1 view .LVU208
3978:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
 703              		.loc 1 3978 21 discriminator 1 view .LVU209
 704 0026 FEE7     		b	.L54
 705              	.L56:
3965:os/tasks.c    ****                     vPortFree( pxTCB );
 706              		.loc 1 3965 21 view .LVU210
 707 0028 006B     		ldr	r0, [r0, #48]
 708              	.LVL50:
3965:os/tasks.c    ****                     vPortFree( pxTCB );
 709              		.loc 1 3965 21 is_stmt 0 view .LVU211
 710 002a FFF7FEFF 		bl	vPortFree
 711              	.LVL51:
3966:os/tasks.c    ****                 }
 712              		.loc 1 3966 21 is_stmt 1 view .LVU212
 713 002e 2046     		mov	r0, r4
 714 0030 FFF7FEFF 		bl	vPortFree
 715              	.LVL52:
 716              	.L50:
3983:os/tasks.c    **** 
 717              		.loc 1 3983 5 is_stmt 0 view .LVU213
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 90


 718 0034 10BD     		pop	{r4, pc}
 719              	.LVL53:
 720              	.L57:
3972:os/tasks.c    ****                 }
 721              		.loc 1 3972 21 is_stmt 1 view .LVU214
 722 0036 FFF7FEFF 		bl	vPortFree
 723              	.LVL54:
3972:os/tasks.c    ****                 }
 724              		.loc 1 3972 21 is_stmt 0 view .LVU215
 725 003a FBE7     		b	.L50
 726              		.cfi_endproc
 727              	.LFE49:
 729              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 730              		.align	1
 731              		.syntax unified
 732              		.thumb
 733              		.thumb_func
 734              		.fpu fpv5-d16
 736              	prvCheckTasksWaitingTermination:
 737              	.LFB44:
3681:os/tasks.c    ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 738              		.loc 1 3681 1 is_stmt 1 view -0
 739              		.cfi_startproc
 740              		@ args = 0, pretend = 0, frame = 0
 741              		@ frame_needed = 0, uses_anonymous_args = 0
 742              	.LBB137:
3686:os/tasks.c    **** 
 743              		.loc 1 3686 13 view .LVU217
3690:os/tasks.c    ****             {
 744              		.loc 1 3690 13 view .LVU218
3690:os/tasks.c    ****             {
 745              		.loc 1 3690 18 view .LVU219
3690:os/tasks.c    ****             {
 746              		.loc 1 3690 49 is_stmt 0 view .LVU220
 747 0000 0F4B     		ldr	r3, .L65
 748 0002 1B68     		ldr	r3, [r3]
3690:os/tasks.c    ****             {
 749              		.loc 1 3690 18 view .LVU221
 750 0004 D3B1     		cbz	r3, .L64
 751              	.LBE137:
3681:os/tasks.c    ****     /** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
 752              		.loc 1 3681 1 view .LVU222
 753 0006 10B5     		push	{r4, lr}
 754              	.LCFI4:
 755              		.cfi_def_cfa_offset 8
 756              		.cfi_offset 4, -8
 757              		.cfi_offset 14, -4
 758              	.L60:
 759              	.LBB138:
3692:os/tasks.c    ****                 {
 760              		.loc 1 3692 17 is_stmt 1 view .LVU223
 761 0008 FFF7FEFF 		bl	vPortEnterCritical
 762              	.LVL55:
3694:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 763              		.loc 1 3694 21 view .LVU224
3694:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 764              		.loc 1 3694 29 is_stmt 0 view .LVU225
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 91


 765 000c 0D4B     		ldr	r3, .L65+4
 766 000e DB68     		ldr	r3, [r3, #12]
3694:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 767              		.loc 1 3694 27 view .LVU226
 768 0010 DC68     		ldr	r4, [r3, #12]
 769              	.LVL56:
3695:os/tasks.c    ****                     --uxCurrentNumberOfTasks;
 770              		.loc 1 3695 21 is_stmt 1 view .LVU227
3695:os/tasks.c    ****                     --uxCurrentNumberOfTasks;
 771              		.loc 1 3695 30 is_stmt 0 view .LVU228
 772 0012 201D     		adds	r0, r4, #4
 773 0014 FFF7FEFF 		bl	uxListRemove
 774              	.LVL57:
3696:os/tasks.c    ****                     --uxDeletedTasksWaitingCleanUp;
 775              		.loc 1 3696 21 is_stmt 1 view .LVU229
 776 0018 0B4A     		ldr	r2, .L65+8
 777 001a 1368     		ldr	r3, [r2]
 778 001c 013B     		subs	r3, r3, #1
 779 001e 1360     		str	r3, [r2]
3697:os/tasks.c    ****                 }
 780              		.loc 1 3697 21 view .LVU230
 781 0020 074A     		ldr	r2, .L65
 782 0022 1368     		ldr	r3, [r2]
 783 0024 013B     		subs	r3, r3, #1
 784 0026 1360     		str	r3, [r2]
3699:os/tasks.c    **** 
 785              		.loc 1 3699 17 view .LVU231
 786 0028 FFF7FEFF 		bl	vPortExitCritical
 787              	.LVL58:
3701:os/tasks.c    ****             }
 788              		.loc 1 3701 17 view .LVU232
 789 002c 2046     		mov	r0, r4
 790 002e FFF7FEFF 		bl	prvDeleteTCB
 791              	.LVL59:
3690:os/tasks.c    ****             {
 792              		.loc 1 3690 18 view .LVU233
3690:os/tasks.c    ****             {
 793              		.loc 1 3690 49 is_stmt 0 view .LVU234
 794 0032 034B     		ldr	r3, .L65
 795 0034 1B68     		ldr	r3, [r3]
3690:os/tasks.c    ****             {
 796              		.loc 1 3690 18 view .LVU235
 797 0036 002B     		cmp	r3, #0
 798 0038 E6D1     		bne	.L60
 799              	.LBE138:
3705:os/tasks.c    **** /*-----------------------------------------------------------*/
 800              		.loc 1 3705 1 view .LVU236
 801 003a 10BD     		pop	{r4, pc}
 802              	.LVL60:
 803              	.L64:
 804              	.LCFI5:
 805              		.cfi_def_cfa_offset 0
 806              		.cfi_restore 4
 807              		.cfi_restore 14
3705:os/tasks.c    **** /*-----------------------------------------------------------*/
 808              		.loc 1 3705 1 view .LVU237
 809 003c 7047     		bx	lr
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 92


 810              	.L66:
 811 003e 00BF     		.align	2
 812              	.L65:
 813 0040 00000000 		.word	.LANCHOR14
 814 0044 00000000 		.word	.LANCHOR7
 815 0048 00000000 		.word	.LANCHOR9
 816              		.cfi_endproc
 817              	.LFE44:
 819              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 820              		.align	1
 821              		.syntax unified
 822              		.thumb
 823              		.thumb_func
 824              		.fpu fpv5-d16
 826              	prvAddCurrentTaskToDelayedList:
 827              	.LVL61:
 828              	.LFB65:
4007:os/tasks.c    **** /*-----------------------------------------------------------*/
4008:os/tasks.c    **** 
4009:os/tasks.c    **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
4010:os/tasks.c    **** 
4011:os/tasks.c    ****     TaskHandle_t xTaskGetCurrentTaskHandle( void )
4012:os/tasks.c    ****     {
4013:os/tasks.c    ****         TaskHandle_t xReturn;
4014:os/tasks.c    **** 
4015:os/tasks.c    ****         /* A critical section is not required as this is not called from
4016:os/tasks.c    ****          * an interrupt and the current TCB will always be the same for any
4017:os/tasks.c    ****          * individual execution thread. */
4018:os/tasks.c    ****         xReturn = pxCurrentTCB;
4019:os/tasks.c    **** 
4020:os/tasks.c    ****         return xReturn;
4021:os/tasks.c    ****     }
4022:os/tasks.c    **** 
4023:os/tasks.c    **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
4024:os/tasks.c    **** /*-----------------------------------------------------------*/
4025:os/tasks.c    **** 
4026:os/tasks.c    **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
4027:os/tasks.c    **** 
4028:os/tasks.c    ****     BaseType_t xTaskGetSchedulerState( void )
4029:os/tasks.c    ****     {
4030:os/tasks.c    ****         BaseType_t xReturn;
4031:os/tasks.c    **** 
4032:os/tasks.c    ****         if( xSchedulerRunning == pdFALSE )
4033:os/tasks.c    ****         {
4034:os/tasks.c    ****             xReturn = taskSCHEDULER_NOT_STARTED;
4035:os/tasks.c    ****         }
4036:os/tasks.c    ****         else
4037:os/tasks.c    ****         {
4038:os/tasks.c    ****             if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4039:os/tasks.c    ****             {
4040:os/tasks.c    ****                 xReturn = taskSCHEDULER_RUNNING;
4041:os/tasks.c    ****             }
4042:os/tasks.c    ****             else
4043:os/tasks.c    ****             {
4044:os/tasks.c    ****                 xReturn = taskSCHEDULER_SUSPENDED;
4045:os/tasks.c    ****             }
4046:os/tasks.c    ****         }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 93


4047:os/tasks.c    **** 
4048:os/tasks.c    ****         return xReturn;
4049:os/tasks.c    ****     }
4050:os/tasks.c    **** 
4051:os/tasks.c    **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
4052:os/tasks.c    **** /*-----------------------------------------------------------*/
4053:os/tasks.c    **** 
4054:os/tasks.c    **** #if ( configUSE_MUTEXES == 1 )
4055:os/tasks.c    **** 
4056:os/tasks.c    ****     BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
4057:os/tasks.c    ****     {
4058:os/tasks.c    ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
4059:os/tasks.c    ****         BaseType_t xReturn = pdFALSE;
4060:os/tasks.c    **** 
4061:os/tasks.c    ****         /* If the mutex was given back by an interrupt while the queue was
4062:os/tasks.c    ****          * locked then the mutex holder might now be NULL.  _RB_ Is this still
4063:os/tasks.c    ****          * needed as interrupts can no longer use mutexes? */
4064:os/tasks.c    ****         if( pxMutexHolder != NULL )
4065:os/tasks.c    ****         {
4066:os/tasks.c    ****             /* If the holder of the mutex has a priority below the priority of
4067:os/tasks.c    ****              * the task attempting to obtain the mutex then it will temporarily
4068:os/tasks.c    ****              * inherit the priority of the task attempting to obtain the mutex. */
4069:os/tasks.c    ****             if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
4070:os/tasks.c    ****             {
4071:os/tasks.c    ****                 /* Adjust the mutex holder state to account for its new
4072:os/tasks.c    ****                  * priority.  Only reset the event list item value if the value is
4073:os/tasks.c    ****                  * not being used for anything else. */
4074:os/tasks.c    ****                 if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_
4075:os/tasks.c    ****                 {
4076:os/tasks.c    ****                     listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) 
4077:os/tasks.c    ****                 }
4078:os/tasks.c    ****                 else
4079:os/tasks.c    ****                 {
4080:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
4081:os/tasks.c    ****                 }
4082:os/tasks.c    **** 
4083:os/tasks.c    ****                 /* If the task being modified is in the ready state it will need
4084:os/tasks.c    ****                  * to be moved into a new list. */
4085:os/tasks.c    ****                 if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] )
4086:os/tasks.c    ****                 {
4087:os/tasks.c    ****                     if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 
4088:os/tasks.c    ****                     {
4089:os/tasks.c    ****                         /* It is known that the task is in its ready list so
4090:os/tasks.c    ****                          * there is no need to check again and the port level
4091:os/tasks.c    ****                          * reset macro can be called directly. */
4092:os/tasks.c    ****                         portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority 
4093:os/tasks.c    ****                     }
4094:os/tasks.c    ****                     else
4095:os/tasks.c    ****                     {
4096:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
4097:os/tasks.c    ****                     }
4098:os/tasks.c    **** 
4099:os/tasks.c    ****                     /* Inherit the priority before being moved into the new list. */
4100:os/tasks.c    ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4101:os/tasks.c    ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
4102:os/tasks.c    ****                 }
4103:os/tasks.c    ****                 else
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 94


4104:os/tasks.c    ****                 {
4105:os/tasks.c    ****                     /* Just inherit the priority. */
4106:os/tasks.c    ****                     pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
4107:os/tasks.c    ****                 }
4108:os/tasks.c    **** 
4109:os/tasks.c    ****                 traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4110:os/tasks.c    **** 
4111:os/tasks.c    ****                 /* Inheritance occurred. */
4112:os/tasks.c    ****                 xReturn = pdTRUE;
4113:os/tasks.c    ****             }
4114:os/tasks.c    ****             else
4115:os/tasks.c    ****             {
4116:os/tasks.c    ****                 if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
4117:os/tasks.c    ****                 {
4118:os/tasks.c    ****                     /* The base priority of the mutex holder is lower than the
4119:os/tasks.c    ****                      * priority of the task attempting to take the mutex, but the
4120:os/tasks.c    ****                      * current priority of the mutex holder is not lower than the
4121:os/tasks.c    ****                      * priority of the task attempting to take the mutex.
4122:os/tasks.c    ****                      * Therefore the mutex holder must have already inherited a
4123:os/tasks.c    ****                      * priority, but inheritance would have occurred if that had
4124:os/tasks.c    ****                      * not been the case. */
4125:os/tasks.c    ****                     xReturn = pdTRUE;
4126:os/tasks.c    ****                 }
4127:os/tasks.c    ****                 else
4128:os/tasks.c    ****                 {
4129:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
4130:os/tasks.c    ****                 }
4131:os/tasks.c    ****             }
4132:os/tasks.c    ****         }
4133:os/tasks.c    ****         else
4134:os/tasks.c    ****         {
4135:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
4136:os/tasks.c    ****         }
4137:os/tasks.c    **** 
4138:os/tasks.c    ****         return xReturn;
4139:os/tasks.c    ****     }
4140:os/tasks.c    **** 
4141:os/tasks.c    **** #endif /* configUSE_MUTEXES */
4142:os/tasks.c    **** /*-----------------------------------------------------------*/
4143:os/tasks.c    **** 
4144:os/tasks.c    **** #if ( configUSE_MUTEXES == 1 )
4145:os/tasks.c    **** 
4146:os/tasks.c    ****     BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4147:os/tasks.c    ****     {
4148:os/tasks.c    ****         TCB_t * const pxTCB = pxMutexHolder;
4149:os/tasks.c    ****         BaseType_t xReturn = pdFALSE;
4150:os/tasks.c    **** 
4151:os/tasks.c    ****         if( pxMutexHolder != NULL )
4152:os/tasks.c    ****         {
4153:os/tasks.c    ****             /* A task can only have an inherited priority if it holds the mutex.
4154:os/tasks.c    ****              * If the mutex is held by a task then it cannot be given from an
4155:os/tasks.c    ****              * interrupt, and if a mutex is given by the holding task then it must
4156:os/tasks.c    ****              * be the running state task. */
4157:os/tasks.c    ****             configASSERT( pxTCB == pxCurrentTCB );
4158:os/tasks.c    ****             configASSERT( pxTCB->uxMutexesHeld );
4159:os/tasks.c    ****             ( pxTCB->uxMutexesHeld )--;
4160:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 95


4161:os/tasks.c    ****             /* Has the holder of the mutex inherited the priority of another
4162:os/tasks.c    ****              * task? */
4163:os/tasks.c    ****             if( pxTCB->uxPriority != pxTCB->uxBasePriority )
4164:os/tasks.c    ****             {
4165:os/tasks.c    ****                 /* Only disinherit if no other mutexes are held. */
4166:os/tasks.c    ****                 if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
4167:os/tasks.c    ****                 {
4168:os/tasks.c    ****                     /* A task can only have an inherited priority if it holds
4169:os/tasks.c    ****                      * the mutex.  If the mutex is held by a task then it cannot be
4170:os/tasks.c    ****                      * given from an interrupt, and if a mutex is given by the
4171:os/tasks.c    ****                      * holding task then it must be the running state task.  Remove
4172:os/tasks.c    ****                      * the holding task from the ready list. */
4173:os/tasks.c    ****                     if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4174:os/tasks.c    ****                     {
4175:os/tasks.c    ****                         portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4176:os/tasks.c    ****                     }
4177:os/tasks.c    ****                     else
4178:os/tasks.c    ****                     {
4179:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
4180:os/tasks.c    ****                     }
4181:os/tasks.c    **** 
4182:os/tasks.c    ****                     /* Disinherit the priority before adding the task into the
4183:os/tasks.c    ****                      * new  ready list. */
4184:os/tasks.c    ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4185:os/tasks.c    ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
4186:os/tasks.c    **** 
4187:os/tasks.c    ****                     /* Reset the event list item value.  It cannot be in use for
4188:os/tasks.c    ****                      * any other purpose if this task is running, and it must be
4189:os/tasks.c    ****                      * running to give back the mutex. */
4190:os/tasks.c    ****                     listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_P
4191:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
4192:os/tasks.c    **** 
4193:os/tasks.c    ****                     /* Return true to indicate that a context switch is required.
4194:os/tasks.c    ****                      * This is only actually required in the corner case whereby
4195:os/tasks.c    ****                      * multiple mutexes were held and the mutexes were given back
4196:os/tasks.c    ****                      * in an order different to that in which they were taken.
4197:os/tasks.c    ****                      * If a context switch did not occur when the first mutex was
4198:os/tasks.c    ****                      * returned, even if a task was waiting on it, then a context
4199:os/tasks.c    ****                      * switch should occur when the last mutex is returned whether
4200:os/tasks.c    ****                      * a task is waiting on it or not. */
4201:os/tasks.c    ****                     xReturn = pdTRUE;
4202:os/tasks.c    ****                 }
4203:os/tasks.c    ****                 else
4204:os/tasks.c    ****                 {
4205:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
4206:os/tasks.c    ****                 }
4207:os/tasks.c    ****             }
4208:os/tasks.c    ****             else
4209:os/tasks.c    ****             {
4210:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
4211:os/tasks.c    ****             }
4212:os/tasks.c    ****         }
4213:os/tasks.c    ****         else
4214:os/tasks.c    ****         {
4215:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
4216:os/tasks.c    ****         }
4217:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 96


4218:os/tasks.c    ****         return xReturn;
4219:os/tasks.c    ****     }
4220:os/tasks.c    **** 
4221:os/tasks.c    **** #endif /* configUSE_MUTEXES */
4222:os/tasks.c    **** /*-----------------------------------------------------------*/
4223:os/tasks.c    **** 
4224:os/tasks.c    **** #if ( configUSE_MUTEXES == 1 )
4225:os/tasks.c    **** 
4226:os/tasks.c    ****     void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
4227:os/tasks.c    ****                                               UBaseType_t uxHighestPriorityWaitingTask )
4228:os/tasks.c    ****     {
4229:os/tasks.c    ****         TCB_t * const pxTCB = pxMutexHolder;
4230:os/tasks.c    ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4231:os/tasks.c    ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
4232:os/tasks.c    **** 
4233:os/tasks.c    ****         if( pxMutexHolder != NULL )
4234:os/tasks.c    ****         {
4235:os/tasks.c    ****             /* If pxMutexHolder is not NULL then the holder must hold at least
4236:os/tasks.c    ****              * one mutex. */
4237:os/tasks.c    ****             configASSERT( pxTCB->uxMutexesHeld );
4238:os/tasks.c    **** 
4239:os/tasks.c    ****             /* Determine the priority to which the priority of the task that
4240:os/tasks.c    ****              * holds the mutex should be set.  This will be the greater of the
4241:os/tasks.c    ****              * holding task's base priority and the priority of the highest
4242:os/tasks.c    ****              * priority task that is waiting to obtain the mutex. */
4243:os/tasks.c    ****             if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
4244:os/tasks.c    ****             {
4245:os/tasks.c    ****                 uxPriorityToUse = uxHighestPriorityWaitingTask;
4246:os/tasks.c    ****             }
4247:os/tasks.c    ****             else
4248:os/tasks.c    ****             {
4249:os/tasks.c    ****                 uxPriorityToUse = pxTCB->uxBasePriority;
4250:os/tasks.c    ****             }
4251:os/tasks.c    **** 
4252:os/tasks.c    ****             /* Does the priority need to change? */
4253:os/tasks.c    ****             if( pxTCB->uxPriority != uxPriorityToUse )
4254:os/tasks.c    ****             {
4255:os/tasks.c    ****                 /* Only disinherit if no other mutexes are held.  This is a
4256:os/tasks.c    ****                  * simplification in the priority inheritance implementation.  If
4257:os/tasks.c    ****                  * the task that holds the mutex is also holding other mutexes then
4258:os/tasks.c    ****                  * the other mutexes may have caused the priority inheritance. */
4259:os/tasks.c    ****                 if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4260:os/tasks.c    ****                 {
4261:os/tasks.c    ****                     /* If a task has timed out because it already holds the
4262:os/tasks.c    ****                      * mutex it was trying to obtain then it cannot of inherited
4263:os/tasks.c    ****                      * its own priority. */
4264:os/tasks.c    ****                     configASSERT( pxTCB != pxCurrentTCB );
4265:os/tasks.c    **** 
4266:os/tasks.c    ****                     /* Disinherit the priority, remembering the previous
4267:os/tasks.c    ****                      * priority to facilitate determining the subject task's
4268:os/tasks.c    ****                      * state. */
4269:os/tasks.c    ****                     traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
4270:os/tasks.c    ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
4271:os/tasks.c    ****                     pxTCB->uxPriority = uxPriorityToUse;
4272:os/tasks.c    **** 
4273:os/tasks.c    ****                     /* Only reset the event list item value if the value is not
4274:os/tasks.c    ****                      * being used for anything else. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 97


4275:os/tasks.c    ****                     if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_IT
4276:os/tasks.c    ****                     {
4277:os/tasks.c    ****                         listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configM
4278:os/tasks.c    ****                     }
4279:os/tasks.c    ****                     else
4280:os/tasks.c    ****                     {
4281:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
4282:os/tasks.c    ****                     }
4283:os/tasks.c    **** 
4284:os/tasks.c    ****                     /* If the running task is not the task that holds the mutex
4285:os/tasks.c    ****                      * then the task that holds the mutex could be in either the
4286:os/tasks.c    ****                      * Ready, Blocked or Suspended states.  Only remove the task
4287:os/tasks.c    ****                      * from its current state list if it is in the Ready state as
4288:os/tasks.c    ****                      * the task's priority is going to change and there is one
4289:os/tasks.c    ****                      * Ready list per priority. */
4290:os/tasks.c    ****                     if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &
4291:os/tasks.c    ****                     {
4292:os/tasks.c    ****                         if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4293:os/tasks.c    ****                         {
4294:os/tasks.c    ****                             /* It is known that the task is in its ready list so
4295:os/tasks.c    ****                              * there is no need to check again and the port level
4296:os/tasks.c    ****                              * reset macro can be called directly. */
4297:os/tasks.c    ****                             portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
4298:os/tasks.c    ****                         }
4299:os/tasks.c    ****                         else
4300:os/tasks.c    ****                         {
4301:os/tasks.c    ****                             mtCOVERAGE_TEST_MARKER();
4302:os/tasks.c    ****                         }
4303:os/tasks.c    **** 
4304:os/tasks.c    ****                         prvAddTaskToReadyList( pxTCB );
4305:os/tasks.c    ****                     }
4306:os/tasks.c    ****                     else
4307:os/tasks.c    ****                     {
4308:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
4309:os/tasks.c    ****                     }
4310:os/tasks.c    ****                 }
4311:os/tasks.c    ****                 else
4312:os/tasks.c    ****                 {
4313:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
4314:os/tasks.c    ****                 }
4315:os/tasks.c    ****             }
4316:os/tasks.c    ****             else
4317:os/tasks.c    ****             {
4318:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
4319:os/tasks.c    ****             }
4320:os/tasks.c    ****         }
4321:os/tasks.c    ****         else
4322:os/tasks.c    ****         {
4323:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
4324:os/tasks.c    ****         }
4325:os/tasks.c    ****     }
4326:os/tasks.c    **** 
4327:os/tasks.c    **** #endif /* configUSE_MUTEXES */
4328:os/tasks.c    **** /*-----------------------------------------------------------*/
4329:os/tasks.c    **** 
4330:os/tasks.c    **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4331:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 98


4332:os/tasks.c    ****     void vTaskEnterCritical( void )
4333:os/tasks.c    ****     {
4334:os/tasks.c    ****         portDISABLE_INTERRUPTS();
4335:os/tasks.c    **** 
4336:os/tasks.c    ****         if( xSchedulerRunning != pdFALSE )
4337:os/tasks.c    ****         {
4338:os/tasks.c    ****             ( pxCurrentTCB->uxCriticalNesting )++;
4339:os/tasks.c    **** 
4340:os/tasks.c    ****             /* This is not the interrupt safe version of the enter critical
4341:os/tasks.c    ****              * function so  assert() if it is being called from an interrupt
4342:os/tasks.c    ****              * context.  Only API functions that end in "FromISR" can be used in an
4343:os/tasks.c    ****              * interrupt.  Only assert if the critical nesting count is 1 to
4344:os/tasks.c    ****              * protect against recursive calls if the assert function also uses a
4345:os/tasks.c    ****              * critical section. */
4346:os/tasks.c    ****             if( pxCurrentTCB->uxCriticalNesting == 1 )
4347:os/tasks.c    ****             {
4348:os/tasks.c    ****                 portASSERT_IF_IN_ISR();
4349:os/tasks.c    ****             }
4350:os/tasks.c    ****         }
4351:os/tasks.c    ****         else
4352:os/tasks.c    ****         {
4353:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
4354:os/tasks.c    ****         }
4355:os/tasks.c    ****     }
4356:os/tasks.c    **** 
4357:os/tasks.c    **** #endif /* portCRITICAL_NESTING_IN_TCB */
4358:os/tasks.c    **** /*-----------------------------------------------------------*/
4359:os/tasks.c    **** 
4360:os/tasks.c    **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4361:os/tasks.c    **** 
4362:os/tasks.c    ****     void vTaskExitCritical( void )
4363:os/tasks.c    ****     {
4364:os/tasks.c    ****         if( xSchedulerRunning != pdFALSE )
4365:os/tasks.c    ****         {
4366:os/tasks.c    ****             if( pxCurrentTCB->uxCriticalNesting > 0U )
4367:os/tasks.c    ****             {
4368:os/tasks.c    ****                 ( pxCurrentTCB->uxCriticalNesting )--;
4369:os/tasks.c    **** 
4370:os/tasks.c    ****                 if( pxCurrentTCB->uxCriticalNesting == 0U )
4371:os/tasks.c    ****                 {
4372:os/tasks.c    ****                     portENABLE_INTERRUPTS();
4373:os/tasks.c    ****                 }
4374:os/tasks.c    ****                 else
4375:os/tasks.c    ****                 {
4376:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
4377:os/tasks.c    ****                 }
4378:os/tasks.c    ****             }
4379:os/tasks.c    ****             else
4380:os/tasks.c    ****             {
4381:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
4382:os/tasks.c    ****             }
4383:os/tasks.c    ****         }
4384:os/tasks.c    ****         else
4385:os/tasks.c    ****         {
4386:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
4387:os/tasks.c    ****         }
4388:os/tasks.c    ****     }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 99


4389:os/tasks.c    **** 
4390:os/tasks.c    **** #endif /* portCRITICAL_NESTING_IN_TCB */
4391:os/tasks.c    **** /*-----------------------------------------------------------*/
4392:os/tasks.c    **** 
4393:os/tasks.c    **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4394:os/tasks.c    **** 
4395:os/tasks.c    ****     static char * prvWriteNameToBuffer( char * pcBuffer,
4396:os/tasks.c    ****                                         const char * pcTaskName )
4397:os/tasks.c    ****     {
4398:os/tasks.c    ****         size_t x;
4399:os/tasks.c    **** 
4400:os/tasks.c    ****         /* Start by copying the entire string. */
4401:os/tasks.c    ****         strcpy( pcBuffer, pcTaskName );
4402:os/tasks.c    **** 
4403:os/tasks.c    ****         /* Pad the end of the string with spaces to ensure columns line up when
4404:os/tasks.c    ****          * printed out. */
4405:os/tasks.c    ****         for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4406:os/tasks.c    ****         {
4407:os/tasks.c    ****             pcBuffer[ x ] = ' ';
4408:os/tasks.c    ****         }
4409:os/tasks.c    **** 
4410:os/tasks.c    ****         /* Terminate. */
4411:os/tasks.c    ****         pcBuffer[ x ] = ( char ) 0x00;
4412:os/tasks.c    **** 
4413:os/tasks.c    ****         /* Return the new end of string. */
4414:os/tasks.c    ****         return &( pcBuffer[ x ] );
4415:os/tasks.c    ****     }
4416:os/tasks.c    **** 
4417:os/tasks.c    **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4418:os/tasks.c    **** /*-----------------------------------------------------------*/
4419:os/tasks.c    **** 
4420:os/tasks.c    **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4421:os/tasks.c    **** 
4422:os/tasks.c    ****     void vTaskList( char * pcWriteBuffer )
4423:os/tasks.c    ****     {
4424:os/tasks.c    ****         TaskStatus_t * pxTaskStatusArray;
4425:os/tasks.c    ****         UBaseType_t uxArraySize, x;
4426:os/tasks.c    ****         char cStatus;
4427:os/tasks.c    **** 
4428:os/tasks.c    ****         /*
4429:os/tasks.c    ****          * PLEASE NOTE:
4430:os/tasks.c    ****          *
4431:os/tasks.c    ****          * This function is provided for convenience only, and is used by many
4432:os/tasks.c    ****          * of the demo applications.  Do not consider it to be part of the
4433:os/tasks.c    ****          * scheduler.
4434:os/tasks.c    ****          *
4435:os/tasks.c    ****          * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4436:os/tasks.c    ****          * uxTaskGetSystemState() output into a human readable table that
4437:os/tasks.c    ****          * displays task: names, states, priority, stack usage and task number.
4438:os/tasks.c    ****          * Stack usage specified as the number of unused StackType_t words stack can hold
4439:os/tasks.c    ****          * on top of stack - not the number of bytes.
4440:os/tasks.c    ****          *
4441:os/tasks.c    ****          * vTaskList() has a dependency on the sprintf() C library function that
4442:os/tasks.c    ****          * might bloat the code size, use a lot of stack, and provide different
4443:os/tasks.c    ****          * results on different platforms.  An alternative, tiny, third party,
4444:os/tasks.c    ****          * and limited functionality implementation of sprintf() is provided in
4445:os/tasks.c    ****          * many of the FreeRTOS/Demo sub-directories in a file called
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 100


4446:os/tasks.c    ****          * printf-stdarg.c (note printf-stdarg.c does not provide a full
4447:os/tasks.c    ****          * snprintf() implementation!).
4448:os/tasks.c    ****          *
4449:os/tasks.c    ****          * It is recommended that production systems call uxTaskGetSystemState()
4450:os/tasks.c    ****          * directly to get access to raw stats data, rather than indirectly
4451:os/tasks.c    ****          * through a call to vTaskList().
4452:os/tasks.c    ****          */
4453:os/tasks.c    **** 
4454:os/tasks.c    **** 
4455:os/tasks.c    ****         /* Make sure the write buffer does not contain a string. */
4456:os/tasks.c    ****         *pcWriteBuffer = ( char ) 0x00;
4457:os/tasks.c    **** 
4458:os/tasks.c    ****         /* Take a snapshot of the number of tasks in case it changes while this
4459:os/tasks.c    ****          * function is executing. */
4460:os/tasks.c    ****         uxArraySize = uxCurrentNumberOfTasks;
4461:os/tasks.c    **** 
4462:os/tasks.c    ****         /* Allocate an array index for each task.  NOTE!  if
4463:os/tasks.c    ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4464:os/tasks.c    ****          * equate to NULL. */
4465:os/tasks.c    ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4466:os/tasks.c    **** 
4467:os/tasks.c    ****         if( pxTaskStatusArray != NULL )
4468:os/tasks.c    ****         {
4469:os/tasks.c    ****             /* Generate the (binary) data. */
4470:os/tasks.c    ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4471:os/tasks.c    **** 
4472:os/tasks.c    ****             /* Create a human readable table from the binary data. */
4473:os/tasks.c    ****             for( x = 0; x < uxArraySize; x++ )
4474:os/tasks.c    ****             {
4475:os/tasks.c    ****                 switch( pxTaskStatusArray[ x ].eCurrentState )
4476:os/tasks.c    ****                 {
4477:os/tasks.c    ****                     case eRunning:
4478:os/tasks.c    ****                         cStatus = tskRUNNING_CHAR;
4479:os/tasks.c    ****                         break;
4480:os/tasks.c    **** 
4481:os/tasks.c    ****                     case eReady:
4482:os/tasks.c    ****                         cStatus = tskREADY_CHAR;
4483:os/tasks.c    ****                         break;
4484:os/tasks.c    **** 
4485:os/tasks.c    ****                     case eBlocked:
4486:os/tasks.c    ****                         cStatus = tskBLOCKED_CHAR;
4487:os/tasks.c    ****                         break;
4488:os/tasks.c    **** 
4489:os/tasks.c    ****                     case eSuspended:
4490:os/tasks.c    ****                         cStatus = tskSUSPENDED_CHAR;
4491:os/tasks.c    ****                         break;
4492:os/tasks.c    **** 
4493:os/tasks.c    ****                     case eDeleted:
4494:os/tasks.c    ****                         cStatus = tskDELETED_CHAR;
4495:os/tasks.c    ****                         break;
4496:os/tasks.c    **** 
4497:os/tasks.c    ****                     case eInvalid: /* Fall through. */
4498:os/tasks.c    ****                     default:       /* Should not get here, but it is included
4499:os/tasks.c    ****                                     * to prevent static checking errors. */
4500:os/tasks.c    ****                         cStatus = ( char ) 0x00;
4501:os/tasks.c    ****                         break;
4502:os/tasks.c    ****                 }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 101


4503:os/tasks.c    **** 
4504:os/tasks.c    ****                 /* Write the task name to the string, padding with spaces so it
4505:os/tasks.c    ****                  * can be printed in tabular form more easily. */
4506:os/tasks.c    ****                 pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskN
4507:os/tasks.c    **** 
4508:os/tasks.c    ****                 /* Write the rest of the string. */
4509:os/tasks.c    ****                 sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskSta
4510:os/tasks.c    ****                 pcWriteBuffer += strlen( pcWriteBuffer );                                          
4511:os/tasks.c    ****             }
4512:os/tasks.c    **** 
4513:os/tasks.c    ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4514:os/tasks.c    ****              * is 0 then vPortFree() will be #defined to nothing. */
4515:os/tasks.c    ****             vPortFree( pxTaskStatusArray );
4516:os/tasks.c    ****         }
4517:os/tasks.c    ****         else
4518:os/tasks.c    ****         {
4519:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
4520:os/tasks.c    ****         }
4521:os/tasks.c    ****     }
4522:os/tasks.c    **** 
4523:os/tasks.c    **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4524:os/tasks.c    **** /*----------------------------------------------------------*/
4525:os/tasks.c    **** 
4526:os/tasks.c    **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4527:os/tasks.c    **** 
4528:os/tasks.c    ****     void vTaskGetRunTimeStats( char * pcWriteBuffer )
4529:os/tasks.c    ****     {
4530:os/tasks.c    ****         TaskStatus_t * pxTaskStatusArray;
4531:os/tasks.c    ****         UBaseType_t uxArraySize, x;
4532:os/tasks.c    ****         uint32_t ulTotalTime, ulStatsAsPercentage;
4533:os/tasks.c    **** 
4534:os/tasks.c    ****         #if ( configUSE_TRACE_FACILITY != 1 )
4535:os/tasks.c    ****             {
4536:os/tasks.c    ****                 #error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vT
4537:os/tasks.c    ****             }
4538:os/tasks.c    ****         #endif
4539:os/tasks.c    **** 
4540:os/tasks.c    ****         /*
4541:os/tasks.c    ****          * PLEASE NOTE:
4542:os/tasks.c    ****          *
4543:os/tasks.c    ****          * This function is provided for convenience only, and is used by many
4544:os/tasks.c    ****          * of the demo applications.  Do not consider it to be part of the
4545:os/tasks.c    ****          * scheduler.
4546:os/tasks.c    ****          *
4547:os/tasks.c    ****          * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4548:os/tasks.c    ****          * of the uxTaskGetSystemState() output into a human readable table that
4549:os/tasks.c    ****          * displays the amount of time each task has spent in the Running state
4550:os/tasks.c    ****          * in both absolute and percentage terms.
4551:os/tasks.c    ****          *
4552:os/tasks.c    ****          * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4553:os/tasks.c    ****          * function that might bloat the code size, use a lot of stack, and
4554:os/tasks.c    ****          * provide different results on different platforms.  An alternative,
4555:os/tasks.c    ****          * tiny, third party, and limited functionality implementation of
4556:os/tasks.c    ****          * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4557:os/tasks.c    ****          * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4558:os/tasks.c    ****          * a full snprintf() implementation!).
4559:os/tasks.c    ****          *
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 102


4560:os/tasks.c    ****          * It is recommended that production systems call uxTaskGetSystemState()
4561:os/tasks.c    ****          * directly to get access to raw stats data, rather than indirectly
4562:os/tasks.c    ****          * through a call to vTaskGetRunTimeStats().
4563:os/tasks.c    ****          */
4564:os/tasks.c    **** 
4565:os/tasks.c    ****         /* Make sure the write buffer does not contain a string. */
4566:os/tasks.c    ****         *pcWriteBuffer = ( char ) 0x00;
4567:os/tasks.c    **** 
4568:os/tasks.c    ****         /* Take a snapshot of the number of tasks in case it changes while this
4569:os/tasks.c    ****          * function is executing. */
4570:os/tasks.c    ****         uxArraySize = uxCurrentNumberOfTasks;
4571:os/tasks.c    **** 
4572:os/tasks.c    ****         /* Allocate an array index for each task.  NOTE!  If
4573:os/tasks.c    ****          * configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4574:os/tasks.c    ****          * equate to NULL. */
4575:os/tasks.c    ****         pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint
4576:os/tasks.c    **** 
4577:os/tasks.c    ****         if( pxTaskStatusArray != NULL )
4578:os/tasks.c    ****         {
4579:os/tasks.c    ****             /* Generate the (binary) data. */
4580:os/tasks.c    ****             uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4581:os/tasks.c    **** 
4582:os/tasks.c    ****             /* For percentage calculations. */
4583:os/tasks.c    ****             ulTotalTime /= 100UL;
4584:os/tasks.c    **** 
4585:os/tasks.c    ****             /* Avoid divide by zero errors. */
4586:os/tasks.c    ****             if( ulTotalTime > 0UL )
4587:os/tasks.c    ****             {
4588:os/tasks.c    ****                 /* Create a human readable table from the binary data. */
4589:os/tasks.c    ****                 for( x = 0; x < uxArraySize; x++ )
4590:os/tasks.c    ****                 {
4591:os/tasks.c    ****                     /* What percentage of the total run time has the task used?
4592:os/tasks.c    ****                      * This will always be rounded down to the nearest integer.
4593:os/tasks.c    ****                      * ulTotalRunTimeDiv100 has already been divided by 100. */
4594:os/tasks.c    ****                     ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4595:os/tasks.c    **** 
4596:os/tasks.c    ****                     /* Write the task name to the string, padding with
4597:os/tasks.c    ****                      * spaces so it can be printed in tabular form more
4598:os/tasks.c    ****                      * easily. */
4599:os/tasks.c    ****                     pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcT
4600:os/tasks.c    **** 
4601:os/tasks.c    ****                     if( ulStatsAsPercentage > 0UL )
4602:os/tasks.c    ****                     {
4603:os/tasks.c    ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4604:os/tasks.c    ****                             {
4605:os/tasks.c    ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x 
4606:os/tasks.c    ****                             }
4607:os/tasks.c    ****                         #else
4608:os/tasks.c    ****                             {
4609:os/tasks.c    ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4610:os/tasks.c    ****                                  * printf() library can be used. */
4611:os/tasks.c    ****                                 sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTask
4612:os/tasks.c    ****                             }
4613:os/tasks.c    ****                         #endif
4614:os/tasks.c    ****                     }
4615:os/tasks.c    ****                     else
4616:os/tasks.c    ****                     {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 103


4617:os/tasks.c    ****                         /* If the percentage is zero here then the task has
4618:os/tasks.c    ****                          * consumed less than 1% of the total run time. */
4619:os/tasks.c    ****                         #ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4620:os/tasks.c    ****                             {
4621:os/tasks.c    ****                                 sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ]
4622:os/tasks.c    ****                             }
4623:os/tasks.c    ****                         #else
4624:os/tasks.c    ****                             {
4625:os/tasks.c    ****                                 /* sizeof( int ) == sizeof( long ) so a smaller
4626:os/tasks.c    ****                                  * printf() library can be used. */
4627:os/tasks.c    ****                                 sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTask
4628:os/tasks.c    ****                             }
4629:os/tasks.c    ****                         #endif
4630:os/tasks.c    ****                     }
4631:os/tasks.c    **** 
4632:os/tasks.c    ****                     pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok o
4633:os/tasks.c    ****                 }
4634:os/tasks.c    ****             }
4635:os/tasks.c    ****             else
4636:os/tasks.c    ****             {
4637:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
4638:os/tasks.c    ****             }
4639:os/tasks.c    **** 
4640:os/tasks.c    ****             /* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4641:os/tasks.c    ****              * is 0 then vPortFree() will be #defined to nothing. */
4642:os/tasks.c    ****             vPortFree( pxTaskStatusArray );
4643:os/tasks.c    ****         }
4644:os/tasks.c    ****         else
4645:os/tasks.c    ****         {
4646:os/tasks.c    ****             mtCOVERAGE_TEST_MARKER();
4647:os/tasks.c    ****         }
4648:os/tasks.c    ****     }
4649:os/tasks.c    **** 
4650:os/tasks.c    **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4651:os/tasks.c    **** /*-----------------------------------------------------------*/
4652:os/tasks.c    **** 
4653:os/tasks.c    **** TickType_t uxTaskResetEventItemValue( void )
4654:os/tasks.c    **** {
4655:os/tasks.c    ****     TickType_t uxReturn;
4656:os/tasks.c    **** 
4657:os/tasks.c    ****     uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4658:os/tasks.c    **** 
4659:os/tasks.c    ****     /* Reset the event list item to its normal value - so it can be used with
4660:os/tasks.c    ****      * queues and semaphores. */
4661:os/tasks.c    ****     listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITI
4662:os/tasks.c    **** 
4663:os/tasks.c    ****     return uxReturn;
4664:os/tasks.c    **** }
4665:os/tasks.c    **** /*-----------------------------------------------------------*/
4666:os/tasks.c    **** 
4667:os/tasks.c    **** #if ( configUSE_MUTEXES == 1 )
4668:os/tasks.c    **** 
4669:os/tasks.c    ****     TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4670:os/tasks.c    ****     {
4671:os/tasks.c    ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
4672:os/tasks.c    ****          * then pxCurrentTCB will be NULL. */
4673:os/tasks.c    ****         if( pxCurrentTCB != NULL )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 104


4674:os/tasks.c    ****         {
4675:os/tasks.c    ****             ( pxCurrentTCB->uxMutexesHeld )++;
4676:os/tasks.c    ****         }
4677:os/tasks.c    **** 
4678:os/tasks.c    ****         return pxCurrentTCB;
4679:os/tasks.c    ****     }
4680:os/tasks.c    **** 
4681:os/tasks.c    **** #endif /* configUSE_MUTEXES */
4682:os/tasks.c    **** /*-----------------------------------------------------------*/
4683:os/tasks.c    **** 
4684:os/tasks.c    **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4685:os/tasks.c    **** 
4686:os/tasks.c    ****     uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWait,
4687:os/tasks.c    ****                                       BaseType_t xClearCountOnExit,
4688:os/tasks.c    ****                                       TickType_t xTicksToWait )
4689:os/tasks.c    ****     {
4690:os/tasks.c    ****         uint32_t ulReturn;
4691:os/tasks.c    **** 
4692:os/tasks.c    ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4693:os/tasks.c    **** 
4694:os/tasks.c    ****         taskENTER_CRITICAL();
4695:os/tasks.c    ****         {
4696:os/tasks.c    ****             /* Only block if the notification count is not already non-zero. */
4697:os/tasks.c    ****             if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
4698:os/tasks.c    ****             {
4699:os/tasks.c    ****                 /* Mark this task as waiting for a notification. */
4700:os/tasks.c    ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4701:os/tasks.c    **** 
4702:os/tasks.c    ****                 if( xTicksToWait > ( TickType_t ) 0 )
4703:os/tasks.c    ****                 {
4704:os/tasks.c    ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4705:os/tasks.c    ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
4706:os/tasks.c    **** 
4707:os/tasks.c    ****                     /* All ports are written to allow a yield in a critical
4708:os/tasks.c    ****                      * section (some will yield immediately, others wait until the
4709:os/tasks.c    ****                      * critical section exits) - but it is not something that
4710:os/tasks.c    ****                      * application code should ever do. */
4711:os/tasks.c    ****                     portYIELD_WITHIN_API();
4712:os/tasks.c    ****                 }
4713:os/tasks.c    ****                 else
4714:os/tasks.c    ****                 {
4715:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
4716:os/tasks.c    ****                 }
4717:os/tasks.c    ****             }
4718:os/tasks.c    ****             else
4719:os/tasks.c    ****             {
4720:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
4721:os/tasks.c    ****             }
4722:os/tasks.c    ****         }
4723:os/tasks.c    ****         taskEXIT_CRITICAL();
4724:os/tasks.c    **** 
4725:os/tasks.c    ****         taskENTER_CRITICAL();
4726:os/tasks.c    ****         {
4727:os/tasks.c    ****             traceTASK_NOTIFY_TAKE( uxIndexToWait );
4728:os/tasks.c    ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4729:os/tasks.c    **** 
4730:os/tasks.c    ****             if( ulReturn != 0UL )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 105


4731:os/tasks.c    ****             {
4732:os/tasks.c    ****                 if( xClearCountOnExit != pdFALSE )
4733:os/tasks.c    ****                 {
4734:os/tasks.c    ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
4735:os/tasks.c    ****                 }
4736:os/tasks.c    ****                 else
4737:os/tasks.c    ****                 {
4738:os/tasks.c    ****                     pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
4739:os/tasks.c    ****                 }
4740:os/tasks.c    ****             }
4741:os/tasks.c    ****             else
4742:os/tasks.c    ****             {
4743:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
4744:os/tasks.c    ****             }
4745:os/tasks.c    **** 
4746:os/tasks.c    ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4747:os/tasks.c    ****         }
4748:os/tasks.c    ****         taskEXIT_CRITICAL();
4749:os/tasks.c    **** 
4750:os/tasks.c    ****         return ulReturn;
4751:os/tasks.c    ****     }
4752:os/tasks.c    **** 
4753:os/tasks.c    **** #endif /* configUSE_TASK_NOTIFICATIONS */
4754:os/tasks.c    **** /*-----------------------------------------------------------*/
4755:os/tasks.c    **** 
4756:os/tasks.c    **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4757:os/tasks.c    **** 
4758:os/tasks.c    ****     BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
4759:os/tasks.c    ****                                        uint32_t ulBitsToClearOnEntry,
4760:os/tasks.c    ****                                        uint32_t ulBitsToClearOnExit,
4761:os/tasks.c    ****                                        uint32_t * pulNotificationValue,
4762:os/tasks.c    ****                                        TickType_t xTicksToWait )
4763:os/tasks.c    ****     {
4764:os/tasks.c    ****         BaseType_t xReturn;
4765:os/tasks.c    **** 
4766:os/tasks.c    ****         configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4767:os/tasks.c    **** 
4768:os/tasks.c    ****         taskENTER_CRITICAL();
4769:os/tasks.c    ****         {
4770:os/tasks.c    ****             /* Only block if a notification is not already pending. */
4771:os/tasks.c    ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4772:os/tasks.c    ****             {
4773:os/tasks.c    ****                 /* Clear bits in the task's notification value as bits may get
4774:os/tasks.c    ****                  * set  by the notifying task or interrupt.  This can be used to
4775:os/tasks.c    ****                  * clear the value to zero. */
4776:os/tasks.c    ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
4777:os/tasks.c    **** 
4778:os/tasks.c    ****                 /* Mark this task as waiting for a notification. */
4779:os/tasks.c    ****                 pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
4780:os/tasks.c    **** 
4781:os/tasks.c    ****                 if( xTicksToWait > ( TickType_t ) 0 )
4782:os/tasks.c    ****                 {
4783:os/tasks.c    ****                     prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4784:os/tasks.c    ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
4785:os/tasks.c    **** 
4786:os/tasks.c    ****                     /* All ports are written to allow a yield in a critical
4787:os/tasks.c    ****                      * section (some will yield immediately, others wait until the
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 106


4788:os/tasks.c    ****                      * critical section exits) - but it is not something that
4789:os/tasks.c    ****                      * application code should ever do. */
4790:os/tasks.c    ****                     portYIELD_WITHIN_API();
4791:os/tasks.c    ****                 }
4792:os/tasks.c    ****                 else
4793:os/tasks.c    ****                 {
4794:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
4795:os/tasks.c    ****                 }
4796:os/tasks.c    ****             }
4797:os/tasks.c    ****             else
4798:os/tasks.c    ****             {
4799:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
4800:os/tasks.c    ****             }
4801:os/tasks.c    ****         }
4802:os/tasks.c    ****         taskEXIT_CRITICAL();
4803:os/tasks.c    **** 
4804:os/tasks.c    ****         taskENTER_CRITICAL();
4805:os/tasks.c    ****         {
4806:os/tasks.c    ****             traceTASK_NOTIFY_WAIT( uxIndexToWait );
4807:os/tasks.c    **** 
4808:os/tasks.c    ****             if( pulNotificationValue != NULL )
4809:os/tasks.c    ****             {
4810:os/tasks.c    ****                 /* Output the current notification value, which may or may not
4811:os/tasks.c    ****                  * have changed. */
4812:os/tasks.c    ****                 *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
4813:os/tasks.c    ****             }
4814:os/tasks.c    **** 
4815:os/tasks.c    ****             /* If ucNotifyValue is set then either the task never entered the
4816:os/tasks.c    ****              * blocked state (because a notification was already pending) or the
4817:os/tasks.c    ****              * task unblocked because of a notification.  Otherwise the task
4818:os/tasks.c    ****              * unblocked because of a timeout. */
4819:os/tasks.c    ****             if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
4820:os/tasks.c    ****             {
4821:os/tasks.c    ****                 /* A notification was not received. */
4822:os/tasks.c    ****                 xReturn = pdFALSE;
4823:os/tasks.c    ****             }
4824:os/tasks.c    ****             else
4825:os/tasks.c    ****             {
4826:os/tasks.c    ****                 /* A notification was already pending or a notification was
4827:os/tasks.c    ****                  * received while the task was waiting. */
4828:os/tasks.c    ****                 pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
4829:os/tasks.c    ****                 xReturn = pdTRUE;
4830:os/tasks.c    ****             }
4831:os/tasks.c    **** 
4832:os/tasks.c    ****             pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
4833:os/tasks.c    ****         }
4834:os/tasks.c    ****         taskEXIT_CRITICAL();
4835:os/tasks.c    **** 
4836:os/tasks.c    ****         return xReturn;
4837:os/tasks.c    ****     }
4838:os/tasks.c    **** 
4839:os/tasks.c    **** #endif /* configUSE_TASK_NOTIFICATIONS */
4840:os/tasks.c    **** /*-----------------------------------------------------------*/
4841:os/tasks.c    **** 
4842:os/tasks.c    **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4843:os/tasks.c    **** 
4844:os/tasks.c    ****     BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 107


4845:os/tasks.c    ****                                    UBaseType_t uxIndexToNotify,
4846:os/tasks.c    ****                                    uint32_t ulValue,
4847:os/tasks.c    ****                                    eNotifyAction eAction,
4848:os/tasks.c    ****                                    uint32_t * pulPreviousNotificationValue )
4849:os/tasks.c    ****     {
4850:os/tasks.c    ****         TCB_t * pxTCB;
4851:os/tasks.c    ****         BaseType_t xReturn = pdPASS;
4852:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
4853:os/tasks.c    **** 
4854:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4855:os/tasks.c    ****         configASSERT( xTaskToNotify );
4856:os/tasks.c    ****         pxTCB = xTaskToNotify;
4857:os/tasks.c    **** 
4858:os/tasks.c    ****         taskENTER_CRITICAL();
4859:os/tasks.c    ****         {
4860:os/tasks.c    ****             if( pulPreviousNotificationValue != NULL )
4861:os/tasks.c    ****             {
4862:os/tasks.c    ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
4863:os/tasks.c    ****             }
4864:os/tasks.c    **** 
4865:os/tasks.c    ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
4866:os/tasks.c    **** 
4867:os/tasks.c    ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
4868:os/tasks.c    **** 
4869:os/tasks.c    ****             switch( eAction )
4870:os/tasks.c    ****             {
4871:os/tasks.c    ****                 case eSetBits:
4872:os/tasks.c    ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
4873:os/tasks.c    ****                     break;
4874:os/tasks.c    **** 
4875:os/tasks.c    ****                 case eIncrement:
4876:os/tasks.c    ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
4877:os/tasks.c    ****                     break;
4878:os/tasks.c    **** 
4879:os/tasks.c    ****                 case eSetValueWithOverwrite:
4880:os/tasks.c    ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4881:os/tasks.c    ****                     break;
4882:os/tasks.c    **** 
4883:os/tasks.c    ****                 case eSetValueWithoutOverwrite:
4884:os/tasks.c    **** 
4885:os/tasks.c    ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4886:os/tasks.c    ****                     {
4887:os/tasks.c    ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
4888:os/tasks.c    ****                     }
4889:os/tasks.c    ****                     else
4890:os/tasks.c    ****                     {
4891:os/tasks.c    ****                         /* The value could not be written to the task. */
4892:os/tasks.c    ****                         xReturn = pdFAIL;
4893:os/tasks.c    ****                     }
4894:os/tasks.c    **** 
4895:os/tasks.c    ****                     break;
4896:os/tasks.c    **** 
4897:os/tasks.c    ****                 case eNoAction:
4898:os/tasks.c    **** 
4899:os/tasks.c    ****                     /* The task is being notified without its notify value being
4900:os/tasks.c    ****                      * updated. */
4901:os/tasks.c    ****                     break;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 108


4902:os/tasks.c    **** 
4903:os/tasks.c    ****                 default:
4904:os/tasks.c    **** 
4905:os/tasks.c    ****                     /* Should not get here if all enums are handled.
4906:os/tasks.c    ****                      * Artificially force an assert by testing a value the
4907:os/tasks.c    ****                      * compiler can't assume is const. */
4908:os/tasks.c    ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
4909:os/tasks.c    **** 
4910:os/tasks.c    ****                     break;
4911:os/tasks.c    ****             }
4912:os/tasks.c    **** 
4913:os/tasks.c    ****             traceTASK_NOTIFY( uxIndexToNotify );
4914:os/tasks.c    **** 
4915:os/tasks.c    ****             /* If the task is in the blocked state specifically to wait for a
4916:os/tasks.c    ****              * notification then unblock it now. */
4917:os/tasks.c    ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4918:os/tasks.c    ****             {
4919:os/tasks.c    ****                 ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4920:os/tasks.c    ****                 prvAddTaskToReadyList( pxTCB );
4921:os/tasks.c    **** 
4922:os/tasks.c    ****                 /* The task should not have been on an event list. */
4923:os/tasks.c    ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4924:os/tasks.c    **** 
4925:os/tasks.c    ****                 #if ( configUSE_TICKLESS_IDLE != 0 )
4926:os/tasks.c    ****                     {
4927:os/tasks.c    ****                         /* If a task is blocked waiting for a notification then
4928:os/tasks.c    ****                          * xNextTaskUnblockTime might be set to the blocked task's time
4929:os/tasks.c    ****                          * out time.  If the task is unblocked for a reason other than
4930:os/tasks.c    ****                          * a timeout xNextTaskUnblockTime is normally left unchanged,
4931:os/tasks.c    ****                          * because it will automatically get reset to a new value when
4932:os/tasks.c    ****                          * the tick count equals xNextTaskUnblockTime.  However if
4933:os/tasks.c    ****                          * tickless idling is used it might be more important to enter
4934:os/tasks.c    ****                          * sleep mode at the earliest possible time - so reset
4935:os/tasks.c    ****                          * xNextTaskUnblockTime here to ensure it is updated at the
4936:os/tasks.c    ****                          * earliest possible time. */
4937:os/tasks.c    ****                         prvResetNextTaskUnblockTime();
4938:os/tasks.c    ****                     }
4939:os/tasks.c    ****                 #endif
4940:os/tasks.c    **** 
4941:os/tasks.c    ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4942:os/tasks.c    ****                 {
4943:os/tasks.c    ****                     /* The notified task has a priority above the currently
4944:os/tasks.c    ****                      * executing task so a yield is required. */
4945:os/tasks.c    ****                     taskYIELD_IF_USING_PREEMPTION();
4946:os/tasks.c    ****                 }
4947:os/tasks.c    ****                 else
4948:os/tasks.c    ****                 {
4949:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
4950:os/tasks.c    ****                 }
4951:os/tasks.c    ****             }
4952:os/tasks.c    ****             else
4953:os/tasks.c    ****             {
4954:os/tasks.c    ****                 mtCOVERAGE_TEST_MARKER();
4955:os/tasks.c    ****             }
4956:os/tasks.c    ****         }
4957:os/tasks.c    ****         taskEXIT_CRITICAL();
4958:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 109


4959:os/tasks.c    ****         return xReturn;
4960:os/tasks.c    ****     }
4961:os/tasks.c    **** 
4962:os/tasks.c    **** #endif /* configUSE_TASK_NOTIFICATIONS */
4963:os/tasks.c    **** /*-----------------------------------------------------------*/
4964:os/tasks.c    **** 
4965:os/tasks.c    **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
4966:os/tasks.c    **** 
4967:os/tasks.c    ****     BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify,
4968:os/tasks.c    ****                                           UBaseType_t uxIndexToNotify,
4969:os/tasks.c    ****                                           uint32_t ulValue,
4970:os/tasks.c    ****                                           eNotifyAction eAction,
4971:os/tasks.c    ****                                           uint32_t * pulPreviousNotificationValue,
4972:os/tasks.c    ****                                           BaseType_t * pxHigherPriorityTaskWoken )
4973:os/tasks.c    ****     {
4974:os/tasks.c    ****         TCB_t * pxTCB;
4975:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
4976:os/tasks.c    ****         BaseType_t xReturn = pdPASS;
4977:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
4978:os/tasks.c    **** 
4979:os/tasks.c    ****         configASSERT( xTaskToNotify );
4980:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
4981:os/tasks.c    **** 
4982:os/tasks.c    ****         /* RTOS ports that support interrupt nesting have the concept of a
4983:os/tasks.c    ****          * maximum  system call (or maximum API call) interrupt priority.
4984:os/tasks.c    ****          * Interrupts that are  above the maximum system call priority are keep
4985:os/tasks.c    ****          * permanently enabled, even when the RTOS kernel is in a critical section,
4986:os/tasks.c    ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4987:os/tasks.c    ****          * is defined in FreeRTOSConfig.h then
4988:os/tasks.c    ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4989:os/tasks.c    ****          * failure if a FreeRTOS API function is called from an interrupt that has
4990:os/tasks.c    ****          * been assigned a priority above the configured maximum system call
4991:os/tasks.c    ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
4992:os/tasks.c    ****          * from interrupts  that have been assigned a priority at or (logically)
4993:os/tasks.c    ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
4994:os/tasks.c    ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
4995:os/tasks.c    ****          * simple as possible.  More information (albeit Cortex-M specific) is
4996:os/tasks.c    ****          * provided on the following link:
4997:os/tasks.c    ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
4998:os/tasks.c    ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4999:os/tasks.c    **** 
5000:os/tasks.c    ****         pxTCB = xTaskToNotify;
5001:os/tasks.c    **** 
5002:os/tasks.c    ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5003:os/tasks.c    ****         {
5004:os/tasks.c    ****             if( pulPreviousNotificationValue != NULL )
5005:os/tasks.c    ****             {
5006:os/tasks.c    ****                 *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
5007:os/tasks.c    ****             }
5008:os/tasks.c    **** 
5009:os/tasks.c    ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5010:os/tasks.c    ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5011:os/tasks.c    **** 
5012:os/tasks.c    ****             switch( eAction )
5013:os/tasks.c    ****             {
5014:os/tasks.c    ****                 case eSetBits:
5015:os/tasks.c    ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 110


5016:os/tasks.c    ****                     break;
5017:os/tasks.c    **** 
5018:os/tasks.c    ****                 case eIncrement:
5019:os/tasks.c    ****                     ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5020:os/tasks.c    ****                     break;
5021:os/tasks.c    **** 
5022:os/tasks.c    ****                 case eSetValueWithOverwrite:
5023:os/tasks.c    ****                     pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5024:os/tasks.c    ****                     break;
5025:os/tasks.c    **** 
5026:os/tasks.c    ****                 case eSetValueWithoutOverwrite:
5027:os/tasks.c    **** 
5028:os/tasks.c    ****                     if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
5029:os/tasks.c    ****                     {
5030:os/tasks.c    ****                         pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
5031:os/tasks.c    ****                     }
5032:os/tasks.c    ****                     else
5033:os/tasks.c    ****                     {
5034:os/tasks.c    ****                         /* The value could not be written to the task. */
5035:os/tasks.c    ****                         xReturn = pdFAIL;
5036:os/tasks.c    ****                     }
5037:os/tasks.c    **** 
5038:os/tasks.c    ****                     break;
5039:os/tasks.c    **** 
5040:os/tasks.c    ****                 case eNoAction:
5041:os/tasks.c    **** 
5042:os/tasks.c    ****                     /* The task is being notified without its notify value being
5043:os/tasks.c    ****                      * updated. */
5044:os/tasks.c    ****                     break;
5045:os/tasks.c    **** 
5046:os/tasks.c    ****                 default:
5047:os/tasks.c    **** 
5048:os/tasks.c    ****                     /* Should not get here if all enums are handled.
5049:os/tasks.c    ****                      * Artificially force an assert by testing a value the
5050:os/tasks.c    ****                      * compiler can't assume is const. */
5051:os/tasks.c    ****                     configASSERT( xTickCount == ( TickType_t ) 0 );
5052:os/tasks.c    ****                     break;
5053:os/tasks.c    ****             }
5054:os/tasks.c    **** 
5055:os/tasks.c    ****             traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );
5056:os/tasks.c    **** 
5057:os/tasks.c    ****             /* If the task is in the blocked state specifically to wait for a
5058:os/tasks.c    ****              * notification then unblock it now. */
5059:os/tasks.c    ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5060:os/tasks.c    ****             {
5061:os/tasks.c    ****                 /* The task should not have been on an event list. */
5062:os/tasks.c    ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5063:os/tasks.c    **** 
5064:os/tasks.c    ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5065:os/tasks.c    ****                 {
5066:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5067:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
5068:os/tasks.c    ****                 }
5069:os/tasks.c    ****                 else
5070:os/tasks.c    ****                 {
5071:os/tasks.c    ****                     /* The delayed and ready lists cannot be accessed, so hold
5072:os/tasks.c    ****                      * this task pending until the scheduler is resumed. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 111


5073:os/tasks.c    ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5074:os/tasks.c    ****                 }
5075:os/tasks.c    **** 
5076:os/tasks.c    ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5077:os/tasks.c    ****                 {
5078:os/tasks.c    ****                     /* The notified task has a priority above the currently
5079:os/tasks.c    ****                      * executing task so a yield is required. */
5080:os/tasks.c    ****                     if( pxHigherPriorityTaskWoken != NULL )
5081:os/tasks.c    ****                     {
5082:os/tasks.c    ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5083:os/tasks.c    ****                     }
5084:os/tasks.c    **** 
5085:os/tasks.c    ****                     /* Mark that a yield is pending in case the user is not
5086:os/tasks.c    ****                      * using the "xHigherPriorityTaskWoken" parameter to an ISR
5087:os/tasks.c    ****                      * safe FreeRTOS function. */
5088:os/tasks.c    ****                     xYieldPending = pdTRUE;
5089:os/tasks.c    ****                 }
5090:os/tasks.c    ****                 else
5091:os/tasks.c    ****                 {
5092:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
5093:os/tasks.c    ****                 }
5094:os/tasks.c    ****             }
5095:os/tasks.c    ****         }
5096:os/tasks.c    ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5097:os/tasks.c    **** 
5098:os/tasks.c    ****         return xReturn;
5099:os/tasks.c    ****     }
5100:os/tasks.c    **** 
5101:os/tasks.c    **** #endif /* configUSE_TASK_NOTIFICATIONS */
5102:os/tasks.c    **** /*-----------------------------------------------------------*/
5103:os/tasks.c    **** 
5104:os/tasks.c    **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5105:os/tasks.c    **** 
5106:os/tasks.c    ****     void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
5107:os/tasks.c    ****                                         UBaseType_t uxIndexToNotify,
5108:os/tasks.c    ****                                         BaseType_t * pxHigherPriorityTaskWoken )
5109:os/tasks.c    ****     {
5110:os/tasks.c    ****         TCB_t * pxTCB;
5111:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
5112:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
5113:os/tasks.c    **** 
5114:os/tasks.c    ****         configASSERT( xTaskToNotify );
5115:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5116:os/tasks.c    **** 
5117:os/tasks.c    ****         /* RTOS ports that support interrupt nesting have the concept of a
5118:os/tasks.c    ****          * maximum  system call (or maximum API call) interrupt priority.
5119:os/tasks.c    ****          * Interrupts that are  above the maximum system call priority are keep
5120:os/tasks.c    ****          * permanently enabled, even when the RTOS kernel is in a critical section,
5121:os/tasks.c    ****          * but cannot make any calls to FreeRTOS API functions.  If configASSERT()
5122:os/tasks.c    ****          * is defined in FreeRTOSConfig.h then
5123:os/tasks.c    ****          * portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
5124:os/tasks.c    ****          * failure if a FreeRTOS API function is called from an interrupt that has
5125:os/tasks.c    ****          * been assigned a priority above the configured maximum system call
5126:os/tasks.c    ****          * priority.  Only FreeRTOS functions that end in FromISR can be called
5127:os/tasks.c    ****          * from interrupts  that have been assigned a priority at or (logically)
5128:os/tasks.c    ****          * below the maximum system call interrupt priority.  FreeRTOS maintains a
5129:os/tasks.c    ****          * separate interrupt safe API to ensure interrupt entry is as fast and as
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 112


5130:os/tasks.c    ****          * simple as possible.  More information (albeit Cortex-M specific) is
5131:os/tasks.c    ****          * provided on the following link:
5132:os/tasks.c    ****          * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
5133:os/tasks.c    ****         portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
5134:os/tasks.c    **** 
5135:os/tasks.c    ****         pxTCB = xTaskToNotify;
5136:os/tasks.c    **** 
5137:os/tasks.c    ****         uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
5138:os/tasks.c    ****         {
5139:os/tasks.c    ****             ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
5140:os/tasks.c    ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
5141:os/tasks.c    **** 
5142:os/tasks.c    ****             /* 'Giving' is equivalent to incrementing a count in a counting
5143:os/tasks.c    ****              * semaphore. */
5144:os/tasks.c    ****             ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
5145:os/tasks.c    **** 
5146:os/tasks.c    ****             traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );
5147:os/tasks.c    **** 
5148:os/tasks.c    ****             /* If the task is in the blocked state specifically to wait for a
5149:os/tasks.c    ****              * notification then unblock it now. */
5150:os/tasks.c    ****             if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
5151:os/tasks.c    ****             {
5152:os/tasks.c    ****                 /* The task should not have been on an event list. */
5153:os/tasks.c    ****                 configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
5154:os/tasks.c    **** 
5155:os/tasks.c    ****                 if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
5156:os/tasks.c    ****                 {
5157:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
5158:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
5159:os/tasks.c    ****                 }
5160:os/tasks.c    ****                 else
5161:os/tasks.c    ****                 {
5162:os/tasks.c    ****                     /* The delayed and ready lists cannot be accessed, so hold
5163:os/tasks.c    ****                      * this task pending until the scheduler is resumed. */
5164:os/tasks.c    ****                     vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
5165:os/tasks.c    ****                 }
5166:os/tasks.c    **** 
5167:os/tasks.c    ****                 if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
5168:os/tasks.c    ****                 {
5169:os/tasks.c    ****                     /* The notified task has a priority above the currently
5170:os/tasks.c    ****                      * executing task so a yield is required. */
5171:os/tasks.c    ****                     if( pxHigherPriorityTaskWoken != NULL )
5172:os/tasks.c    ****                     {
5173:os/tasks.c    ****                         *pxHigherPriorityTaskWoken = pdTRUE;
5174:os/tasks.c    ****                     }
5175:os/tasks.c    **** 
5176:os/tasks.c    ****                     /* Mark that a yield is pending in case the user is not
5177:os/tasks.c    ****                      * using the "xHigherPriorityTaskWoken" parameter in an ISR
5178:os/tasks.c    ****                      * safe FreeRTOS function. */
5179:os/tasks.c    ****                     xYieldPending = pdTRUE;
5180:os/tasks.c    ****                 }
5181:os/tasks.c    ****                 else
5182:os/tasks.c    ****                 {
5183:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
5184:os/tasks.c    ****                 }
5185:os/tasks.c    ****             }
5186:os/tasks.c    ****         }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 113


5187:os/tasks.c    ****         portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5188:os/tasks.c    ****     }
5189:os/tasks.c    **** 
5190:os/tasks.c    **** #endif /* configUSE_TASK_NOTIFICATIONS */
5191:os/tasks.c    **** /*-----------------------------------------------------------*/
5192:os/tasks.c    **** 
5193:os/tasks.c    **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5194:os/tasks.c    **** 
5195:os/tasks.c    ****     BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
5196:os/tasks.c    ****                                              UBaseType_t uxIndexToClear )
5197:os/tasks.c    ****     {
5198:os/tasks.c    ****         TCB_t * pxTCB;
5199:os/tasks.c    ****         BaseType_t xReturn;
5200:os/tasks.c    **** 
5201:os/tasks.c    ****         configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
5202:os/tasks.c    **** 
5203:os/tasks.c    ****         /* If null is passed in here then it is the calling task that is having
5204:os/tasks.c    ****          * its notification state cleared. */
5205:os/tasks.c    ****         pxTCB = prvGetTCBFromHandle( xTask );
5206:os/tasks.c    **** 
5207:os/tasks.c    ****         taskENTER_CRITICAL();
5208:os/tasks.c    ****         {
5209:os/tasks.c    ****             if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
5210:os/tasks.c    ****             {
5211:os/tasks.c    ****                 pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
5212:os/tasks.c    ****                 xReturn = pdPASS;
5213:os/tasks.c    ****             }
5214:os/tasks.c    ****             else
5215:os/tasks.c    ****             {
5216:os/tasks.c    ****                 xReturn = pdFAIL;
5217:os/tasks.c    ****             }
5218:os/tasks.c    ****         }
5219:os/tasks.c    ****         taskEXIT_CRITICAL();
5220:os/tasks.c    **** 
5221:os/tasks.c    ****         return xReturn;
5222:os/tasks.c    ****     }
5223:os/tasks.c    **** 
5224:os/tasks.c    **** #endif /* configUSE_TASK_NOTIFICATIONS */
5225:os/tasks.c    **** /*-----------------------------------------------------------*/
5226:os/tasks.c    **** 
5227:os/tasks.c    **** #if ( configUSE_TASK_NOTIFICATIONS == 1 )
5228:os/tasks.c    **** 
5229:os/tasks.c    ****     uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
5230:os/tasks.c    ****                                             UBaseType_t uxIndexToClear,
5231:os/tasks.c    ****                                             uint32_t ulBitsToClear )
5232:os/tasks.c    ****     {
5233:os/tasks.c    ****         TCB_t * pxTCB;
5234:os/tasks.c    ****         uint32_t ulReturn;
5235:os/tasks.c    **** 
5236:os/tasks.c    ****         /* If null is passed in here then it is the calling task that is having
5237:os/tasks.c    ****          * its notification state cleared. */
5238:os/tasks.c    ****         pxTCB = prvGetTCBFromHandle( xTask );
5239:os/tasks.c    **** 
5240:os/tasks.c    ****         taskENTER_CRITICAL();
5241:os/tasks.c    ****         {
5242:os/tasks.c    ****             /* Return the notification as it was before the bits were cleared,
5243:os/tasks.c    ****              * then clear the bit mask. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 114


5244:os/tasks.c    ****             ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
5245:os/tasks.c    ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
5246:os/tasks.c    ****         }
5247:os/tasks.c    ****         taskEXIT_CRITICAL();
5248:os/tasks.c    **** 
5249:os/tasks.c    ****         return ulReturn;
5250:os/tasks.c    ****     }
5251:os/tasks.c    **** 
5252:os/tasks.c    **** #endif /* configUSE_TASK_NOTIFICATIONS */
5253:os/tasks.c    **** /*-----------------------------------------------------------*/
5254:os/tasks.c    **** 
5255:os/tasks.c    **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5256:os/tasks.c    **** 
5257:os/tasks.c    ****     uint32_t ulTaskGetIdleRunTimeCounter( void )
5258:os/tasks.c    ****     {
5259:os/tasks.c    ****         return xIdleTaskHandle->ulRunTimeCounter;
5260:os/tasks.c    ****     }
5261:os/tasks.c    **** 
5262:os/tasks.c    **** #endif
5263:os/tasks.c    **** /*-----------------------------------------------------------*/
5264:os/tasks.c    **** 
5265:os/tasks.c    **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
5266:os/tasks.c    ****                                             const BaseType_t xCanBlockIndefinitely )
5267:os/tasks.c    **** {
 829              		.loc 1 5267 1 is_stmt 1 view -0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 0
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 833              		.loc 1 5267 1 is_stmt 0 view .LVU239
 834 0000 70B5     		push	{r4, r5, r6, lr}
 835              	.LCFI6:
 836              		.cfi_def_cfa_offset 16
 837              		.cfi_offset 4, -16
 838              		.cfi_offset 5, -12
 839              		.cfi_offset 6, -8
 840              		.cfi_offset 14, -4
 841 0002 0446     		mov	r4, r0
 842 0004 0D46     		mov	r5, r1
5268:os/tasks.c    ****     TickType_t xTimeToWake;
 843              		.loc 1 5268 5 is_stmt 1 view .LVU240
5269:os/tasks.c    ****     const TickType_t xConstTickCount = xTickCount;
 844              		.loc 1 5269 5 view .LVU241
 845              		.loc 1 5269 22 is_stmt 0 view .LVU242
 846 0006 194B     		ldr	r3, .L73
 847 0008 1E68     		ldr	r6, [r3]
 848              	.LVL62:
5270:os/tasks.c    **** 
5271:os/tasks.c    ****     #if ( INCLUDE_xTaskAbortDelay == 1 )
5272:os/tasks.c    ****         {
5273:os/tasks.c    ****             /* About to enter a delayed list, so ensure the ucDelayAborted flag is
5274:os/tasks.c    ****              * reset to pdFALSE so it can be detected as having been set to pdTRUE
5275:os/tasks.c    ****              * when the task leaves the Blocked state. */
5276:os/tasks.c    ****             pxCurrentTCB->ucDelayAborted = pdFALSE;
5277:os/tasks.c    ****         }
5278:os/tasks.c    ****     #endif
5279:os/tasks.c    **** 
5280:os/tasks.c    ****     /* Remove the task from the ready list before adding it to the blocked list
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 115


5281:os/tasks.c    ****      * as the same list item is used for both lists. */
5282:os/tasks.c    ****     if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 849              		.loc 1 5282 5 is_stmt 1 view .LVU243
 850              		.loc 1 5282 38 is_stmt 0 view .LVU244
 851 000a 194B     		ldr	r3, .L73+4
 852 000c 1868     		ldr	r0, [r3]
 853              	.LVL63:
 854              		.loc 1 5282 9 view .LVU245
 855 000e 0430     		adds	r0, r0, #4
 856 0010 FFF7FEFF 		bl	uxListRemove
 857              	.LVL64:
5283:os/tasks.c    ****     {
5284:os/tasks.c    ****         /* The current task must be in a ready list, so there is no need to
5285:os/tasks.c    ****          * check, and the port reset macro can be called directly. */
5286:os/tasks.c    ****         portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCu
5287:os/tasks.c    ****     }
5288:os/tasks.c    ****     else
5289:os/tasks.c    ****     {
5290:os/tasks.c    ****         mtCOVERAGE_TEST_MARKER();
 858              		.loc 1 5290 33 is_stmt 1 view .LVU246
5291:os/tasks.c    ****     }
5292:os/tasks.c    **** 
5293:os/tasks.c    ****     #if ( INCLUDE_vTaskSuspend == 1 )
5294:os/tasks.c    ****         {
5295:os/tasks.c    ****             if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 859              		.loc 1 5295 13 view .LVU247
 860              		.loc 1 5295 51 is_stmt 0 view .LVU248
 861 0014 B4F1FF3F 		cmp	r4, #-1
 862 0018 14BF     		ite	ne
 863 001a 0023     		movne	r3, #0
 864 001c 0123     		moveq	r3, #1
 865 001e 002D     		cmp	r5, #0
 866 0020 08BF     		it	eq
 867 0022 0023     		moveq	r3, #0
 868              		.loc 1 5295 15 view .LVU249
 869 0024 6BB9     		cbnz	r3, .L72
5296:os/tasks.c    ****             {
5297:os/tasks.c    ****                 /* Add the task to the suspended task list instead of a delayed task
5298:os/tasks.c    ****                  * list to ensure it is not woken by a timing event.  It will block
5299:os/tasks.c    ****                  * indefinitely. */
5300:os/tasks.c    ****                 vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
5301:os/tasks.c    ****             }
5302:os/tasks.c    ****             else
5303:os/tasks.c    ****             {
5304:os/tasks.c    ****                 /* Calculate the time at which the task should be woken if the event
5305:os/tasks.c    ****                  * does not occur.  This may overflow but this doesn't matter, the
5306:os/tasks.c    ****                  * kernel will manage it correctly. */
5307:os/tasks.c    ****                 xTimeToWake = xConstTickCount + xTicksToWait;
 870              		.loc 1 5307 17 is_stmt 1 view .LVU250
 871              		.loc 1 5307 29 is_stmt 0 view .LVU251
 872 0026 3444     		add	r4, r4, r6
 873              	.LVL65:
5308:os/tasks.c    **** 
5309:os/tasks.c    ****                 /* The list item will be inserted in wake time order. */
5310:os/tasks.c    ****                 listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 874              		.loc 1 5310 17 is_stmt 1 view .LVU252
 875 0028 114B     		ldr	r3, .L73+4
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 116


 876 002a 1B68     		ldr	r3, [r3]
 877 002c 5C60     		str	r4, [r3, #4]
5311:os/tasks.c    **** 
5312:os/tasks.c    ****                 if( xTimeToWake < xConstTickCount )
 878              		.loc 1 5312 17 view .LVU253
 879              		.loc 1 5312 19 is_stmt 0 view .LVU254
 880 002e A642     		cmp	r6, r4
 881 0030 0ED9     		bls	.L70
5313:os/tasks.c    ****                 {
5314:os/tasks.c    ****                     /* Wake time has overflowed.  Place this item in the overflow
5315:os/tasks.c    ****                      * list. */
5316:os/tasks.c    ****                     vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 882              		.loc 1 5316 21 is_stmt 1 view .LVU255
 883 0032 104B     		ldr	r3, .L73+8
 884 0034 1868     		ldr	r0, [r3]
 885              		.loc 1 5316 76 is_stmt 0 view .LVU256
 886 0036 0E4B     		ldr	r3, .L73+4
 887 0038 1968     		ldr	r1, [r3]
 888              		.loc 1 5316 21 view .LVU257
 889 003a 0431     		adds	r1, r1, #4
 890 003c FFF7FEFF 		bl	vListInsert
 891              	.LVL66:
 892              	.L67:
5317:os/tasks.c    ****                 }
5318:os/tasks.c    ****                 else
5319:os/tasks.c    ****                 {
5320:os/tasks.c    ****                     /* The wake time has not overflowed, so the current block list
5321:os/tasks.c    ****                      * is used. */
5322:os/tasks.c    ****                     vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5323:os/tasks.c    **** 
5324:os/tasks.c    ****                     /* If the task entering the blocked state was placed at the
5325:os/tasks.c    ****                      * head of the list of blocked tasks then xNextTaskUnblockTime
5326:os/tasks.c    ****                      * needs to be updated too. */
5327:os/tasks.c    ****                     if( xTimeToWake < xNextTaskUnblockTime )
5328:os/tasks.c    ****                     {
5329:os/tasks.c    ****                         xNextTaskUnblockTime = xTimeToWake;
5330:os/tasks.c    ****                     }
5331:os/tasks.c    ****                     else
5332:os/tasks.c    ****                     {
5333:os/tasks.c    ****                         mtCOVERAGE_TEST_MARKER();
5334:os/tasks.c    ****                     }
5335:os/tasks.c    ****                 }
5336:os/tasks.c    ****             }
5337:os/tasks.c    ****         }
5338:os/tasks.c    ****     #else /* INCLUDE_vTaskSuspend */
5339:os/tasks.c    ****         {
5340:os/tasks.c    ****             /* Calculate the time at which the task should be woken if the event
5341:os/tasks.c    ****              * does not occur.  This may overflow but this doesn't matter, the kernel
5342:os/tasks.c    ****              * will manage it correctly. */
5343:os/tasks.c    ****             xTimeToWake = xConstTickCount + xTicksToWait;
5344:os/tasks.c    **** 
5345:os/tasks.c    ****             /* The list item will be inserted in wake time order. */
5346:os/tasks.c    ****             listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5347:os/tasks.c    **** 
5348:os/tasks.c    ****             if( xTimeToWake < xConstTickCount )
5349:os/tasks.c    ****             {
5350:os/tasks.c    ****                 /* Wake time has overflowed.  Place this item in the overflow list. */
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 117


5351:os/tasks.c    ****                 vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5352:os/tasks.c    ****             }
5353:os/tasks.c    ****             else
5354:os/tasks.c    ****             {
5355:os/tasks.c    ****                 /* The wake time has not overflowed, so the current block list is used. */
5356:os/tasks.c    ****                 vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5357:os/tasks.c    **** 
5358:os/tasks.c    ****                 /* If the task entering the blocked state was placed at the head of the
5359:os/tasks.c    ****                  * list of blocked tasks then xNextTaskUnblockTime needs to be updated
5360:os/tasks.c    ****                  * too. */
5361:os/tasks.c    ****                 if( xTimeToWake < xNextTaskUnblockTime )
5362:os/tasks.c    ****                 {
5363:os/tasks.c    ****                     xNextTaskUnblockTime = xTimeToWake;
5364:os/tasks.c    ****                 }
5365:os/tasks.c    ****                 else
5366:os/tasks.c    ****                 {
5367:os/tasks.c    ****                     mtCOVERAGE_TEST_MARKER();
5368:os/tasks.c    ****                 }
5369:os/tasks.c    ****             }
5370:os/tasks.c    **** 
5371:os/tasks.c    ****             /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5372:os/tasks.c    ****             ( void ) xCanBlockIndefinitely;
5373:os/tasks.c    ****         }
5374:os/tasks.c    ****     #endif /* INCLUDE_vTaskSuspend */
5375:os/tasks.c    **** }
 893              		.loc 1 5375 1 view .LVU258
 894 0040 70BD     		pop	{r4, r5, r6, pc}
 895              	.LVL67:
 896              	.L72:
5300:os/tasks.c    ****             }
 897              		.loc 1 5300 17 is_stmt 1 view .LVU259
5300:os/tasks.c    ****             }
 898              		.loc 1 5300 69 is_stmt 0 view .LVU260
 899 0042 0B4B     		ldr	r3, .L73+4
 900 0044 1968     		ldr	r1, [r3]
5300:os/tasks.c    ****             }
 901              		.loc 1 5300 17 view .LVU261
 902 0046 0431     		adds	r1, r1, #4
 903 0048 0B48     		ldr	r0, .L73+12
 904 004a FFF7FEFF 		bl	vListInsertEnd
 905              	.LVL68:
 906 004e F7E7     		b	.L67
 907              	.LVL69:
 908              	.L70:
5322:os/tasks.c    **** 
 909              		.loc 1 5322 21 is_stmt 1 view .LVU262
 910 0050 0A4B     		ldr	r3, .L73+16
 911 0052 1868     		ldr	r0, [r3]
5322:os/tasks.c    **** 
 912              		.loc 1 5322 68 is_stmt 0 view .LVU263
 913 0054 064B     		ldr	r3, .L73+4
 914 0056 1968     		ldr	r1, [r3]
5322:os/tasks.c    **** 
 915              		.loc 1 5322 21 view .LVU264
 916 0058 0431     		adds	r1, r1, #4
 917 005a FFF7FEFF 		bl	vListInsert
 918              	.LVL70:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 118


5327:os/tasks.c    ****                     {
 919              		.loc 1 5327 21 is_stmt 1 view .LVU265
5327:os/tasks.c    ****                     {
 920              		.loc 1 5327 37 is_stmt 0 view .LVU266
 921 005e 084B     		ldr	r3, .L73+20
 922 0060 1B68     		ldr	r3, [r3]
5327:os/tasks.c    ****                     {
 923              		.loc 1 5327 23 view .LVU267
 924 0062 A342     		cmp	r3, r4
 925 0064 ECD9     		bls	.L67
5329:os/tasks.c    ****                     }
 926              		.loc 1 5329 25 is_stmt 1 view .LVU268
5329:os/tasks.c    ****                     }
 927              		.loc 1 5329 46 is_stmt 0 view .LVU269
 928 0066 064B     		ldr	r3, .L73+20
 929 0068 1C60     		str	r4, [r3]
5333:os/tasks.c    ****                     }
 930              		.loc 1 5333 49 is_stmt 1 view .LVU270
 931              		.loc 1 5375 1 is_stmt 0 view .LVU271
 932 006a E9E7     		b	.L67
 933              	.L74:
 934              		.align	2
 935              	.L73:
 936 006c 00000000 		.word	.LANCHOR15
 937 0070 00000000 		.word	.LANCHOR10
 938 0074 00000000 		.word	.LANCHOR8
 939 0078 00000000 		.word	.LANCHOR0
 940 007c 00000000 		.word	.LANCHOR2
 941 0080 00000000 		.word	.LANCHOR3
 942              		.cfi_endproc
 943              	.LFE65:
 945              		.section	.text.prvIdleTask,"ax",%progbits
 946              		.align	1
 947              		.syntax unified
 948              		.thumb
 949              		.thumb_func
 950              		.fpu fpv5-d16
 952              	prvIdleTask:
 953              	.LFB42:
3424:os/tasks.c    ****     /* Stop warnings. */
 954              		.loc 1 3424 1 is_stmt 1 view -0
 955              		.cfi_startproc
 956              		@ Volatile: function does not return.
 957              		@ args = 0, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 959              	.LVL71:
3424:os/tasks.c    ****     /* Stop warnings. */
 960              		.loc 1 3424 1 is_stmt 0 view .LVU273
 961 0000 08B5     		push	{r3, lr}
 962              	.LCFI7:
 963              		.cfi_def_cfa_offset 8
 964              		.cfi_offset 3, -8
 965              		.cfi_offset 14, -4
 966 0002 09E0     		b	.L77
 967              	.LVL72:
 968              	.L79:
3465:os/tasks.c    ****                 }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 119


 969              		.loc 1 3465 21 is_stmt 1 view .LVU274
 970 0004 084B     		ldr	r3, .L80
 971 0006 4FF08052 		mov	r2, #268435456
 972 000a 1A60     		str	r2, [r3]
3465:os/tasks.c    ****                 }
 973              		.loc 1 3465 21 view .LVU275
 974              		.syntax unified
 975              	@ 3465 "os/tasks.c" 1
 976 000c BFF34F8F 		dsb
 977              	@ 0 "" 2
3465:os/tasks.c    ****                 }
 978              		.loc 1 3465 21 view .LVU276
 979              	@ 3465 "os/tasks.c" 1
 980 0010 BFF36F8F 		isb
 981              	@ 0 "" 2
3465:os/tasks.c    ****                 }
 982              		.loc 1 3465 32 view .LVU277
 983              		.thumb
 984              		.syntax unified
 985              	.L76:
3469:os/tasks.c    ****                 }
 986              		.loc 1 3469 45 view .LVU278
 987              	.LBB139:
3476:os/tasks.c    **** 
 988              		.loc 1 3476 17 view .LVU279
3483:os/tasks.c    ****             }
 989              		.loc 1 3483 17 view .LVU280
 990 0014 FFF7FEFF 		bl	vApplicationIdleHook
 991              	.LVL73:
 992              	.LBE139:
3436:os/tasks.c    ****     {
 993              		.loc 1 3436 12 view .LVU281
 994              	.L77:
3426:os/tasks.c    **** 
 995              		.loc 1 3426 5 view .LVU282
3434:os/tasks.c    **** 
 996              		.loc 1 3434 67 view .LVU283
3436:os/tasks.c    ****     {
 997              		.loc 1 3436 5 view .LVU284
3440:os/tasks.c    **** 
 998              		.loc 1 3440 9 view .LVU285
 999 0018 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 1000              	.LVL74:
3463:os/tasks.c    ****                 {
 1001              		.loc 1 3463 17 view .LVU286
3463:os/tasks.c    ****                 {
 1002              		.loc 1 3463 21 is_stmt 0 view .LVU287
 1003 001c 034B     		ldr	r3, .L80+4
 1004 001e 1B68     		ldr	r3, [r3]
3463:os/tasks.c    ****                 {
 1005              		.loc 1 3463 19 view .LVU288
 1006 0020 012B     		cmp	r3, #1
 1007 0022 EFD8     		bhi	.L79
 1008 0024 F6E7     		b	.L76
 1009              	.L81:
 1010 0026 00BF     		.align	2
 1011              	.L80:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 120


 1012 0028 04ED00E0 		.word	-536810236
 1013 002c 00000000 		.word	.LANCHOR4
 1014              		.cfi_endproc
 1015              	.LFE42:
 1017              		.section	.text.xTaskCreateStatic,"ax",%progbits
 1018              		.align	1
 1019              		.global	xTaskCreateStatic
 1020              		.syntax unified
 1021              		.thumb
 1022              		.thumb_func
 1023              		.fpu fpv5-d16
 1025              	xTaskCreateStatic:
 1026              	.LVL75:
 1027              	.LFB4:
 580:os/tasks.c    ****         TCB_t * pxNewTCB;
 1028              		.loc 1 580 5 is_stmt 1 view -0
 1029              		.cfi_startproc
 1030              		@ args = 12, pretend = 0, frame = 8
 1031              		@ frame_needed = 0, uses_anonymous_args = 0
 580:os/tasks.c    ****         TCB_t * pxNewTCB;
 1032              		.loc 1 580 5 is_stmt 0 view .LVU290
 1033 0000 70B5     		push	{r4, r5, r6, lr}
 1034              	.LCFI8:
 1035              		.cfi_def_cfa_offset 16
 1036              		.cfi_offset 4, -16
 1037              		.cfi_offset 5, -12
 1038              		.cfi_offset 6, -8
 1039              		.cfi_offset 14, -4
 1040 0002 86B0     		sub	sp, sp, #24
 1041              	.LCFI9:
 1042              		.cfi_def_cfa_offset 40
 1043 0004 0B9D     		ldr	r5, [sp, #44]
 1044 0006 0C9C     		ldr	r4, [sp, #48]
 581:os/tasks.c    ****         TaskHandle_t xReturn;
 1045              		.loc 1 581 9 is_stmt 1 view .LVU291
 582:os/tasks.c    **** 
 1046              		.loc 1 582 9 view .LVU292
 584:os/tasks.c    ****         configASSERT( pxTaskBuffer != NULL );
 1047              		.loc 1 584 9 view .LVU293
 1048 0008 85B1     		cbz	r5, .L90
 584:os/tasks.c    ****         configASSERT( pxTaskBuffer != NULL );
 1049              		.loc 1 584 47 discriminator 2 view .LVU294
 585:os/tasks.c    **** 
 1050              		.loc 1 585 9 discriminator 2 view .LVU295
 1051 000a D4B1     		cbz	r4, .L91
 585:os/tasks.c    **** 
 1052              		.loc 1 585 45 discriminator 2 view .LVU296
 1053              	.LBB140:
 592:os/tasks.c    ****                 configASSERT( xSize == sizeof( TCB_t ) );
 1054              		.loc 1 592 17 discriminator 2 view .LVU297
 592:os/tasks.c    ****                 configASSERT( xSize == sizeof( TCB_t ) );
 1055              		.loc 1 592 33 is_stmt 0 discriminator 2 view .LVU298
 1056 000c 5C26     		movs	r6, #92
 1057 000e 0496     		str	r6, [sp, #16]
 593:os/tasks.c    ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1058              		.loc 1 593 17 is_stmt 1 discriminator 2 view .LVU299
 1059 0010 049E     		ldr	r6, [sp, #16]
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 121


 1060 0012 5C2E     		cmp	r6, #92
 1061 0014 20D0     		beq	.L87
 593:os/tasks.c    ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1062              		.loc 1 593 17 view .LVU300
 1063              	.LBB141:
 1064              	.LBI141:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 1065              		.loc 2 193 34 view .LVU301
 1066              	.LBB142:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1067              		.loc 2 195 9 view .LVU302
 1068              		.loc 2 197 9 view .LVU303
 1069              		.syntax unified
 1070              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1071 0016 4FF05003 			mov r3, #80												
 1072 001a 72B6     		cpsid i													
 1073 001c 83F31188 		msr basepri, r3											
 1074 0020 BFF36F8F 		isb														
 1075 0024 BFF34F8F 		dsb														
 1076 0028 62B6     		cpsie i													
 1077              	
 1078              	@ 0 "" 2
 1079              	.LVL76:
 1080              		.thumb
 1081              		.syntax unified
 1082              	.L88:
 1083              		.loc 2 197 9 is_stmt 0 view .LVU304
 1084              	.LBE142:
 1085              	.LBE141:
 593:os/tasks.c    ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1086              		.loc 1 593 17 is_stmt 1 discriminator 3 view .LVU305
 593:os/tasks.c    ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1087              		.loc 1 593 17 discriminator 3 view .LVU306
 593:os/tasks.c    ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1088              		.loc 1 593 17 discriminator 3 view .LVU307
 1089 002a FEE7     		b	.L88
 1090              	.LVL77:
 1091              	.L90:
 593:os/tasks.c    ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1092              		.loc 1 593 17 is_stmt 0 discriminator 3 view .LVU308
 1093              	.LBE140:
 584:os/tasks.c    ****         configASSERT( pxTaskBuffer != NULL );
 1094              		.loc 1 584 9 is_stmt 1 view .LVU309
 1095              	.LBB143:
 1096              	.LBI143:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 1097              		.loc 2 193 34 view .LVU310
 1098              	.LBB144:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1099              		.loc 2 195 9 view .LVU311
 1100              		.loc 2 197 9 view .LVU312
 1101              		.syntax unified
 1102              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1103 002c 4FF05003 			mov r3, #80												
 1104 0030 72B6     		cpsid i													
 1105 0032 83F31188 		msr basepri, r3											
 1106 0036 BFF36F8F 		isb														
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 122


 1107 003a BFF34F8F 		dsb														
 1108 003e 62B6     		cpsie i													
 1109              	
 1110              	@ 0 "" 2
 1111              	.LVL78:
 1112              		.thumb
 1113              		.syntax unified
 1114              	.L84:
 1115              		.loc 2 197 9 is_stmt 0 view .LVU313
 1116              	.LBE144:
 1117              	.LBE143:
 584:os/tasks.c    ****         configASSERT( pxTaskBuffer != NULL );
 1118              		.loc 1 584 9 is_stmt 1 discriminator 1 view .LVU314
 584:os/tasks.c    ****         configASSERT( pxTaskBuffer != NULL );
 1119              		.loc 1 584 9 discriminator 1 view .LVU315
 584:os/tasks.c    ****         configASSERT( pxTaskBuffer != NULL );
 1120              		.loc 1 584 9 discriminator 1 view .LVU316
 1121 0040 FEE7     		b	.L84
 1122              	.LVL79:
 1123              	.L91:
 585:os/tasks.c    **** 
 1124              		.loc 1 585 9 view .LVU317
 1125              	.LBB145:
 1126              	.LBI145:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 1127              		.loc 2 193 34 view .LVU318
 1128              	.LBB146:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1129              		.loc 2 195 9 view .LVU319
 1130              		.loc 2 197 9 view .LVU320
 1131              		.syntax unified
 1132              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1133 0042 4FF05003 			mov r3, #80												
 1134 0046 72B6     		cpsid i													
 1135 0048 83F31188 		msr basepri, r3											
 1136 004c BFF36F8F 		isb														
 1137 0050 BFF34F8F 		dsb														
 1138 0054 62B6     		cpsie i													
 1139              	
 1140              	@ 0 "" 2
 1141              	.LVL80:
 1142              		.thumb
 1143              		.syntax unified
 1144              	.L86:
 1145              		.loc 2 197 9 is_stmt 0 view .LVU321
 1146              	.LBE146:
 1147              	.LBE145:
 585:os/tasks.c    **** 
 1148              		.loc 1 585 9 is_stmt 1 discriminator 2 view .LVU322
 585:os/tasks.c    **** 
 1149              		.loc 1 585 9 discriminator 2 view .LVU323
 585:os/tasks.c    **** 
 1150              		.loc 1 585 9 discriminator 2 view .LVU324
 1151 0056 FEE7     		b	.L86
 1152              	.LVL81:
 1153              	.L87:
 1154              	.LBB147:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 123


 593:os/tasks.c    ****                 ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 1155              		.loc 1 593 57 discriminator 2 view .LVU325
 594:os/tasks.c    ****             }
 1156              		.loc 1 594 17 discriminator 2 view .LVU326
 1157 0058 049E     		ldr	r6, [sp, #16]
 1158              	.LBE147:
 598:os/tasks.c    ****         {
 1159              		.loc 1 598 9 discriminator 2 view .LVU327
 602:os/tasks.c    ****             pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 1160              		.loc 1 602 13 discriminator 2 view .LVU328
 1161              	.LVL82:
 603:os/tasks.c    **** 
 1162              		.loc 1 603 13 discriminator 2 view .LVU329
 603:os/tasks.c    **** 
 1163              		.loc 1 603 31 is_stmt 0 discriminator 2 view .LVU330
 1164 005a 2563     		str	r5, [r4, #48]
 609:os/tasks.c    ****                 }
 1165              		.loc 1 609 21 is_stmt 1 discriminator 2 view .LVU331
 609:os/tasks.c    ****                 }
 1166              		.loc 1 609 53 is_stmt 0 discriminator 2 view .LVU332
 1167 005c 0225     		movs	r5, #2
 1168 005e 84F85950 		strb	r5, [r4, #89]
 613:os/tasks.c    ****             prvAddNewTaskToReadyList( pxNewTCB );
 1169              		.loc 1 613 13 is_stmt 1 discriminator 2 view .LVU333
 1170 0062 0025     		movs	r5, #0
 1171 0064 0395     		str	r5, [sp, #12]
 1172 0066 0294     		str	r4, [sp, #8]
 1173 0068 05AD     		add	r5, sp, #20
 1174 006a 0195     		str	r5, [sp, #4]
 1175 006c 0A9D     		ldr	r5, [sp, #40]
 1176 006e 0095     		str	r5, [sp]
 1177 0070 FFF7FEFF 		bl	prvInitialiseNewTask
 1178              	.LVL83:
 614:os/tasks.c    ****         }
 1179              		.loc 1 614 13 discriminator 2 view .LVU334
 1180 0074 2046     		mov	r0, r4
 1181 0076 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1182              	.LVL84:
 621:os/tasks.c    ****     }
 1183              		.loc 1 621 9 discriminator 2 view .LVU335
 622:os/tasks.c    **** 
 1184              		.loc 1 622 5 is_stmt 0 discriminator 2 view .LVU336
 1185 007a 0598     		ldr	r0, [sp, #20]
 1186 007c 06B0     		add	sp, sp, #24
 1187              	.LCFI10:
 1188              		.cfi_def_cfa_offset 16
 1189              		@ sp needed
 1190 007e 70BD     		pop	{r4, r5, r6, pc}
 622:os/tasks.c    **** 
 1191              		.loc 1 622 5 discriminator 2 view .LVU337
 1192              		.cfi_endproc
 1193              	.LFE4:
 1195              		.section	.text.xTaskCreate,"ax",%progbits
 1196              		.align	1
 1197              		.global	xTaskCreate
 1198              		.syntax unified
 1199              		.thumb
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 124


 1200              		.thumb_func
 1201              		.fpu fpv5-d16
 1203              	xTaskCreate:
 1204              	.LVL85:
 1205              	.LFB5:
 732:os/tasks.c    ****         TCB_t * pxNewTCB;
 1206              		.loc 1 732 5 is_stmt 1 view -0
 1207              		.cfi_startproc
 1208              		@ args = 8, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 732:os/tasks.c    ****         TCB_t * pxNewTCB;
 1210              		.loc 1 732 5 is_stmt 0 view .LVU339
 1211 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 1212              	.LCFI11:
 1213              		.cfi_def_cfa_offset 28
 1214              		.cfi_offset 4, -28
 1215              		.cfi_offset 5, -24
 1216              		.cfi_offset 6, -20
 1217              		.cfi_offset 7, -16
 1218              		.cfi_offset 8, -12
 1219              		.cfi_offset 9, -8
 1220              		.cfi_offset 14, -4
 1221 0004 85B0     		sub	sp, sp, #20
 1222              	.LCFI12:
 1223              		.cfi_def_cfa_offset 48
 1224 0006 0746     		mov	r7, r0
 1225 0008 8846     		mov	r8, r1
 1226 000a 1446     		mov	r4, r2
 1227 000c 1E46     		mov	r6, r3
 733:os/tasks.c    ****         BaseType_t xReturn;
 1228              		.loc 1 733 9 is_stmt 1 view .LVU340
 734:os/tasks.c    **** 
 1229              		.loc 1 734 9 view .LVU341
 1230              	.LBB148:
 763:os/tasks.c    **** 
 1231              		.loc 1 763 17 view .LVU342
 766:os/tasks.c    **** 
 1232              		.loc 1 766 17 view .LVU343
 766:os/tasks.c    **** 
 1233              		.loc 1 766 27 is_stmt 0 view .LVU344
 1234 000e 9000     		lsls	r0, r2, #2
 1235              	.LVL86:
 766:os/tasks.c    **** 
 1236              		.loc 1 766 27 view .LVU345
 1237 0010 FFF7FEFF 		bl	pvPortMalloc
 1238              	.LVL87:
 768:os/tasks.c    ****                 {
 1239              		.loc 1 768 17 is_stmt 1 view .LVU346
 768:os/tasks.c    ****                 {
 1240              		.loc 1 768 19 is_stmt 0 view .LVU347
 1241 0014 00B3     		cbz	r0, .L96
 1242 0016 8146     		mov	r9, r0
 771:os/tasks.c    **** 
 1243              		.loc 1 771 21 is_stmt 1 view .LVU348
 771:os/tasks.c    **** 
 1244              		.loc 1 771 44 is_stmt 0 view .LVU349
 1245 0018 5C20     		movs	r0, #92
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 125


 1246              	.LVL88:
 771:os/tasks.c    **** 
 1247              		.loc 1 771 44 view .LVU350
 1248 001a FFF7FEFF 		bl	pvPortMalloc
 1249              	.LVL89:
 773:os/tasks.c    ****                     {
 1250              		.loc 1 773 21 is_stmt 1 view .LVU351
 773:os/tasks.c    ****                     {
 1251              		.loc 1 773 23 is_stmt 0 view .LVU352
 1252 001e 0546     		mov	r5, r0
 1253 0020 B0B1     		cbz	r0, .L94
 776:os/tasks.c    ****                     }
 1254              		.loc 1 776 25 is_stmt 1 view .LVU353
 776:os/tasks.c    ****                     }
 1255              		.loc 1 776 43 is_stmt 0 view .LVU354
 1256 0022 C0F83090 		str	r9, [r0, #48]
 1257              	.LVL90:
 1258              	.L95:
 776:os/tasks.c    ****                     }
 1259              		.loc 1 776 43 view .LVU355
 1260              	.LBE148:
 792:os/tasks.c    ****         {
 1261              		.loc 1 792 9 is_stmt 1 view .LVU356
 792:os/tasks.c    ****         {
 1262              		.loc 1 792 11 is_stmt 0 view .LVU357
 1263 0026 E5B1     		cbz	r5, .L97
 798:os/tasks.c    ****                 }
 1264              		.loc 1 798 21 is_stmt 1 view .LVU358
 798:os/tasks.c    ****                 }
 1265              		.loc 1 798 53 is_stmt 0 view .LVU359
 1266 0028 0023     		movs	r3, #0
 1267 002a 85F85930 		strb	r3, [r5, #89]
 802:os/tasks.c    ****             prvAddNewTaskToReadyList( pxNewTCB );
 1268              		.loc 1 802 13 is_stmt 1 view .LVU360
 1269 002e 0393     		str	r3, [sp, #12]
 1270 0030 0295     		str	r5, [sp, #8]
 1271 0032 0D9B     		ldr	r3, [sp, #52]
 1272 0034 0193     		str	r3, [sp, #4]
 1273 0036 0C9B     		ldr	r3, [sp, #48]
 1274 0038 0093     		str	r3, [sp]
 1275 003a 3346     		mov	r3, r6
 1276 003c 2246     		mov	r2, r4
 1277 003e 4146     		mov	r1, r8
 1278 0040 3846     		mov	r0, r7
 1279 0042 FFF7FEFF 		bl	prvInitialiseNewTask
 1280              	.LVL91:
 803:os/tasks.c    ****             xReturn = pdPASS;
 1281              		.loc 1 803 13 view .LVU361
 1282 0046 2846     		mov	r0, r5
 1283 0048 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1284              	.LVL92:
 804:os/tasks.c    ****         }
 1285              		.loc 1 804 13 view .LVU362
 804:os/tasks.c    ****         }
 1286              		.loc 1 804 21 is_stmt 0 view .LVU363
 1287 004c 0120     		movs	r0, #1
 1288 004e 05E0     		b	.L92
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 126


 1289              	.LVL93:
 1290              	.L94:
 1291              	.LBB149:
 782:os/tasks.c    ****                     }
 1292              		.loc 1 782 25 is_stmt 1 view .LVU364
 1293 0050 4846     		mov	r0, r9
 1294              	.LVL94:
 782:os/tasks.c    ****                     }
 1295              		.loc 1 782 25 is_stmt 0 view .LVU365
 1296 0052 FFF7FEFF 		bl	vPortFree
 1297              	.LVL95:
 1298 0056 E6E7     		b	.L95
 1299              	.LVL96:
 1300              	.L96:
 782:os/tasks.c    ****                     }
 1301              		.loc 1 782 25 view .LVU366
 1302              	.LBE149:
 808:os/tasks.c    ****         }
 1303              		.loc 1 808 21 view .LVU367
 1304 0058 4FF0FF30 		mov	r0, #-1
 1305              	.LVL97:
 1306              	.L92:
 812:os/tasks.c    **** 
 1307              		.loc 1 812 5 view .LVU368
 1308 005c 05B0     		add	sp, sp, #20
 1309              	.LCFI13:
 1310              		.cfi_remember_state
 1311              		.cfi_def_cfa_offset 28
 1312              		@ sp needed
 1313 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1314              	.LVL98:
 1315              	.L97:
 1316              	.LCFI14:
 1317              		.cfi_restore_state
 808:os/tasks.c    ****         }
 1318              		.loc 1 808 21 view .LVU369
 1319 0062 4FF0FF30 		mov	r0, #-1
 1320              	.LVL99:
 811:os/tasks.c    ****     }
 1321              		.loc 1 811 9 is_stmt 1 view .LVU370
 811:os/tasks.c    ****     }
 1322              		.loc 1 811 16 is_stmt 0 view .LVU371
 1323 0066 F9E7     		b	.L92
 1324              		.cfi_endproc
 1325              	.LFE5:
 1327              		.section	.text.vTaskDelete,"ax",%progbits
 1328              		.align	1
 1329              		.global	vTaskDelete
 1330              		.syntax unified
 1331              		.thumb
 1332              		.thumb_func
 1333              		.fpu fpv5-d16
 1335              	vTaskDelete:
 1336              	.LVL100:
 1337              	.LFB8:
1155:os/tasks.c    ****         TCB_t * pxTCB;
 1338              		.loc 1 1155 5 is_stmt 1 view -0
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 127


 1339              		.cfi_startproc
 1340              		@ args = 0, pretend = 0, frame = 0
 1341              		@ frame_needed = 0, uses_anonymous_args = 0
1155:os/tasks.c    ****         TCB_t * pxTCB;
 1342              		.loc 1 1155 5 is_stmt 0 view .LVU373
 1343 0000 38B5     		push	{r3, r4, r5, lr}
 1344              	.LCFI15:
 1345              		.cfi_def_cfa_offset 16
 1346              		.cfi_offset 3, -16
 1347              		.cfi_offset 4, -12
 1348              		.cfi_offset 5, -8
 1349              		.cfi_offset 14, -4
 1350 0002 0446     		mov	r4, r0
1156:os/tasks.c    **** 
 1351              		.loc 1 1156 9 is_stmt 1 view .LVU374
1158:os/tasks.c    ****         {
 1352              		.loc 1 1158 9 view .LVU375
 1353 0004 FFF7FEFF 		bl	vPortEnterCritical
 1354              	.LVL101:
1162:os/tasks.c    **** 
 1355              		.loc 1 1162 13 view .LVU376
1162:os/tasks.c    **** 
 1356              		.loc 1 1162 21 is_stmt 0 view .LVU377
 1357 0008 24B3     		cbz	r4, .L108
 1358              	.LVL102:
 1359              	.L100:
1165:os/tasks.c    ****             {
 1360              		.loc 1 1165 13 is_stmt 1 discriminator 4 view .LVU378
1165:os/tasks.c    ****             {
 1361              		.loc 1 1165 17 is_stmt 0 discriminator 4 view .LVU379
 1362 000a 251D     		adds	r5, r4, #4
 1363 000c 2846     		mov	r0, r5
 1364 000e FFF7FEFF 		bl	uxListRemove
 1365              	.LVL103:
1171:os/tasks.c    ****             }
 1366              		.loc 1 1171 41 is_stmt 1 discriminator 4 view .LVU380
1175:os/tasks.c    ****             {
 1367              		.loc 1 1175 13 discriminator 4 view .LVU381
1175:os/tasks.c    ****             {
 1368              		.loc 1 1175 17 is_stmt 0 discriminator 4 view .LVU382
 1369 0012 A36A     		ldr	r3, [r4, #40]
1175:os/tasks.c    ****             {
 1370              		.loc 1 1175 15 discriminator 4 view .LVU383
 1371 0014 1BB1     		cbz	r3, .L101
1177:os/tasks.c    ****             }
 1372              		.loc 1 1177 17 is_stmt 1 view .LVU384
1177:os/tasks.c    ****             }
 1373              		.loc 1 1177 26 is_stmt 0 view .LVU385
 1374 0016 04F11800 		add	r0, r4, #24
 1375 001a FFF7FEFF 		bl	uxListRemove
 1376              	.LVL104:
 1377              	.L101:
1181:os/tasks.c    ****             }
 1378              		.loc 1 1181 41 is_stmt 1 view .LVU386
1188:os/tasks.c    **** 
 1379              		.loc 1 1188 13 view .LVU387
1188:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 128


 1380              		.loc 1 1188 25 is_stmt 0 view .LVU388
 1381 001e 1F4A     		ldr	r2, .L111
 1382 0020 1368     		ldr	r3, [r2]
 1383 0022 0133     		adds	r3, r3, #1
 1384 0024 1360     		str	r3, [r2]
1190:os/tasks.c    ****             {
 1385              		.loc 1 1190 13 is_stmt 1 view .LVU389
1190:os/tasks.c    ****             {
 1386              		.loc 1 1190 23 is_stmt 0 view .LVU390
 1387 0026 1E4B     		ldr	r3, .L111+4
 1388 0028 1B68     		ldr	r3, [r3]
1190:os/tasks.c    ****             {
 1389              		.loc 1 1190 15 view .LVU391
 1390 002a A342     		cmp	r3, r4
 1391 002c 15D0     		beq	.L109
1217:os/tasks.c    ****                 traceTASK_DELETE( pxTCB );
 1392              		.loc 1 1217 17 is_stmt 1 view .LVU392
 1393 002e 1D4A     		ldr	r2, .L111+8
 1394 0030 1368     		ldr	r3, [r2]
 1395 0032 013B     		subs	r3, r3, #1
 1396 0034 1360     		str	r3, [r2]
1218:os/tasks.c    ****                 prvDeleteTCB( pxTCB );
 1397              		.loc 1 1218 42 view .LVU393
1219:os/tasks.c    **** 
 1398              		.loc 1 1219 17 view .LVU394
 1399 0036 2046     		mov	r0, r4
 1400 0038 FFF7FEFF 		bl	prvDeleteTCB
 1401              	.LVL105:
1223:os/tasks.c    ****             }
 1402              		.loc 1 1223 17 view .LVU395
 1403 003c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1404              	.LVL106:
 1405              	.L103:
1226:os/tasks.c    **** 
 1406              		.loc 1 1226 9 view .LVU396
 1407 0040 FFF7FEFF 		bl	vPortExitCritical
 1408              	.LVL107:
1230:os/tasks.c    ****         {
 1409              		.loc 1 1230 9 view .LVU397
1230:os/tasks.c    ****         {
 1410              		.loc 1 1230 31 is_stmt 0 view .LVU398
 1411 0044 184B     		ldr	r3, .L111+12
 1412 0046 1B68     		ldr	r3, [r3]
1230:os/tasks.c    ****         {
 1413              		.loc 1 1230 11 view .LVU399
 1414 0048 1BB1     		cbz	r3, .L99
1232:os/tasks.c    ****             {
 1415              		.loc 1 1232 13 is_stmt 1 view .LVU400
1232:os/tasks.c    ****             {
 1416              		.loc 1 1232 23 is_stmt 0 view .LVU401
 1417 004a 154B     		ldr	r3, .L111+4
 1418 004c 1B68     		ldr	r3, [r3]
1232:os/tasks.c    ****             {
 1419              		.loc 1 1232 15 view .LVU402
 1420 004e A342     		cmp	r3, r4
 1421 0050 0CD0     		beq	.L110
 1422              	.L99:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 129


1242:os/tasks.c    **** 
 1423              		.loc 1 1242 5 view .LVU403
 1424 0052 38BD     		pop	{r3, r4, r5, pc}
 1425              	.LVL108:
 1426              	.L108:
1162:os/tasks.c    **** 
 1427              		.loc 1 1162 21 discriminator 1 view .LVU404
 1428 0054 124B     		ldr	r3, .L111+4
 1429 0056 1C68     		ldr	r4, [r3]
 1430              	.LVL109:
1162:os/tasks.c    **** 
 1431              		.loc 1 1162 21 discriminator 1 view .LVU405
 1432 0058 D7E7     		b	.L100
 1433              	.LVL110:
 1434              	.L109:
1197:os/tasks.c    **** 
 1435              		.loc 1 1197 17 is_stmt 1 view .LVU406
 1436 005a 2946     		mov	r1, r5
 1437 005c 1348     		ldr	r0, .L111+16
 1438 005e FFF7FEFF 		bl	vListInsertEnd
 1439              	.LVL111:
1202:os/tasks.c    **** 
 1440              		.loc 1 1202 17 view .LVU407
 1441 0062 134A     		ldr	r2, .L111+20
 1442 0064 1368     		ldr	r3, [r2]
 1443 0066 0133     		adds	r3, r3, #1
 1444 0068 1360     		str	r3, [r2]
1206:os/tasks.c    **** 
 1445              		.loc 1 1206 42 view .LVU408
1213:os/tasks.c    ****             }
 1446              		.loc 1 1213 66 view .LVU409
 1447 006a E9E7     		b	.L103
 1448              	.L110:
1234:os/tasks.c    ****                 portYIELD_WITHIN_API();
 1449              		.loc 1 1234 17 view .LVU410
 1450 006c 114B     		ldr	r3, .L111+24
 1451 006e 1B68     		ldr	r3, [r3]
 1452 0070 53B1     		cbz	r3, .L105
1234:os/tasks.c    ****                 portYIELD_WITHIN_API();
 1453              		.loc 1 1234 17 view .LVU411
 1454              	.LBB150:
 1455              	.LBI150:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 1456              		.loc 2 193 34 view .LVU412
 1457              	.LBB151:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1458              		.loc 2 195 9 view .LVU413
 1459              		.loc 2 197 9 view .LVU414
 1460              		.syntax unified
 1461              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1462 0072 4FF05003 			mov r3, #80												
 1463 0076 72B6     		cpsid i													
 1464 0078 83F31188 		msr basepri, r3											
 1465 007c BFF36F8F 		isb														
 1466 0080 BFF34F8F 		dsb														
 1467 0084 62B6     		cpsie i													
 1468              	
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 130


 1469              	@ 0 "" 2
 1470              	.LVL112:
 1471              		.thumb
 1472              		.syntax unified
 1473              	.L106:
 1474              		.loc 2 197 9 is_stmt 0 view .LVU415
 1475              	.LBE151:
 1476              	.LBE150:
1234:os/tasks.c    ****                 portYIELD_WITHIN_API();
 1477              		.loc 1 1234 17 is_stmt 1 discriminator 1 view .LVU416
1234:os/tasks.c    ****                 portYIELD_WITHIN_API();
 1478              		.loc 1 1234 17 discriminator 1 view .LVU417
1234:os/tasks.c    ****                 portYIELD_WITHIN_API();
 1479              		.loc 1 1234 17 discriminator 1 view .LVU418
 1480 0086 FEE7     		b	.L106
 1481              	.L105:
1234:os/tasks.c    ****                 portYIELD_WITHIN_API();
 1482              		.loc 1 1234 58 discriminator 2 view .LVU419
1235:os/tasks.c    ****             }
 1483              		.loc 1 1235 17 discriminator 2 view .LVU420
 1484 0088 0B4B     		ldr	r3, .L111+28
 1485 008a 4FF08052 		mov	r2, #268435456
 1486 008e 1A60     		str	r2, [r3]
1235:os/tasks.c    ****             }
 1487              		.loc 1 1235 17 discriminator 2 view .LVU421
 1488              		.syntax unified
 1489              	@ 1235 "os/tasks.c" 1
 1490 0090 BFF34F8F 		dsb
 1491              	@ 0 "" 2
1235:os/tasks.c    ****             }
 1492              		.loc 1 1235 17 discriminator 2 view .LVU422
 1493              	@ 1235 "os/tasks.c" 1
 1494 0094 BFF36F8F 		isb
 1495              	@ 0 "" 2
1235:os/tasks.c    ****             }
 1496              		.loc 1 1235 39 discriminator 2 view .LVU423
1239:os/tasks.c    ****             }
 1497              		.loc 1 1239 41 discriminator 2 view .LVU424
1242:os/tasks.c    **** 
 1498              		.loc 1 1242 5 is_stmt 0 discriminator 2 view .LVU425
 1499              		.thumb
 1500              		.syntax unified
 1501 0098 DBE7     		b	.L99
 1502              	.L112:
 1503 009a 00BF     		.align	2
 1504              	.L111:
 1505 009c 00000000 		.word	.LANCHOR12
 1506 00a0 00000000 		.word	.LANCHOR10
 1507 00a4 00000000 		.word	.LANCHOR9
 1508 00a8 00000000 		.word	.LANCHOR11
 1509 00ac 00000000 		.word	.LANCHOR7
 1510 00b0 00000000 		.word	.LANCHOR14
 1511 00b4 00000000 		.word	.LANCHOR16
 1512 00b8 04ED00E0 		.word	-536810236
 1513              		.cfi_endproc
 1514              	.LFE8:
 1516              		.section	.text.eTaskGetState,"ax",%progbits
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 131


 1517              		.align	1
 1518              		.global	eTaskGetState
 1519              		.syntax unified
 1520              		.thumb
 1521              		.thumb_func
 1522              		.fpu fpv5-d16
 1524              	eTaskGetState:
 1525              	.LVL113:
 1526              	.LFB11:
1382:os/tasks.c    ****         eTaskState eReturn;
 1527              		.loc 1 1382 5 is_stmt 1 view -0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 0
 1530              		@ frame_needed = 0, uses_anonymous_args = 0
1382:os/tasks.c    ****         eTaskState eReturn;
 1531              		.loc 1 1382 5 is_stmt 0 view .LVU427
 1532 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1533              	.LCFI16:
 1534              		.cfi_def_cfa_offset 24
 1535              		.cfi_offset 3, -24
 1536              		.cfi_offset 4, -20
 1537              		.cfi_offset 5, -16
 1538              		.cfi_offset 6, -12
 1539              		.cfi_offset 7, -8
 1540              		.cfi_offset 14, -4
1383:os/tasks.c    ****         List_t const * pxStateList, * pxDelayedList, * pxOverflowedDelayedList;
 1541              		.loc 1 1383 9 is_stmt 1 view .LVU428
1384:os/tasks.c    ****         const TCB_t * const pxTCB = xTask;
 1542              		.loc 1 1384 9 view .LVU429
1385:os/tasks.c    **** 
 1543              		.loc 1 1385 9 view .LVU430
 1544              	.LVL114:
1387:os/tasks.c    **** 
 1545              		.loc 1 1387 9 view .LVU431
 1546 0002 D0B1     		cbz	r0, .L127
 1547 0004 0546     		mov	r5, r0
1387:os/tasks.c    **** 
 1548              		.loc 1 1387 30 discriminator 2 view .LVU432
1389:os/tasks.c    ****         {
 1549              		.loc 1 1389 9 discriminator 2 view .LVU433
1389:os/tasks.c    ****         {
 1550              		.loc 1 1389 19 is_stmt 0 discriminator 2 view .LVU434
 1551 0006 204B     		ldr	r3, .L130
 1552 0008 1B68     		ldr	r3, [r3]
1389:os/tasks.c    ****         {
 1553              		.loc 1 1389 11 discriminator 2 view .LVU435
 1554 000a 8342     		cmp	r3, r0
 1555 000c 33D0     		beq	.L120
1396:os/tasks.c    ****             {
 1556              		.loc 1 1396 13 is_stmt 1 view .LVU436
 1557 000e FFF7FEFF 		bl	vPortEnterCritical
 1558              	.LVL115:
1398:os/tasks.c    ****                 pxDelayedList = pxDelayedTaskList;
 1559              		.loc 1 1398 17 view .LVU437
1398:os/tasks.c    ****                 pxDelayedList = pxDelayedTaskList;
 1560              		.loc 1 1398 29 is_stmt 0 view .LVU438
 1561 0012 6C69     		ldr	r4, [r5, #20]
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 132


 1562              	.LVL116:
1399:os/tasks.c    ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1563              		.loc 1 1399 17 is_stmt 1 view .LVU439
1399:os/tasks.c    ****                 pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1564              		.loc 1 1399 31 is_stmt 0 view .LVU440
 1565 0014 1D4B     		ldr	r3, .L130+4
 1566 0016 1F68     		ldr	r7, [r3]
 1567              	.LVL117:
1400:os/tasks.c    ****             }
 1568              		.loc 1 1400 17 is_stmt 1 view .LVU441
1400:os/tasks.c    ****             }
 1569              		.loc 1 1400 41 is_stmt 0 view .LVU442
 1570 0018 1D4B     		ldr	r3, .L130+8
 1571 001a 1E68     		ldr	r6, [r3]
 1572              	.LVL118:
1402:os/tasks.c    **** 
 1573              		.loc 1 1402 13 is_stmt 1 view .LVU443
 1574 001c FFF7FEFF 		bl	vPortExitCritical
 1575              	.LVL119:
1404:os/tasks.c    ****             {
 1576              		.loc 1 1404 13 view .LVU444
1404:os/tasks.c    ****             {
 1577              		.loc 1 1404 15 is_stmt 0 view .LVU445
 1578 0020 B442     		cmp	r4, r6
 1579 0022 18BF     		it	ne
 1580 0024 BC42     		cmpne	r4, r7
 1581 0026 28D0     		beq	.L121
1412:os/tasks.c    ****                 {
 1582              		.loc 1 1412 22 is_stmt 1 view .LVU446
1412:os/tasks.c    ****                 {
 1583              		.loc 1 1412 24 is_stmt 0 view .LVU447
 1584 0028 1A4B     		ldr	r3, .L130+12
 1585 002a 9C42     		cmp	r4, r3
 1586 002c 10D0     		beq	.L128
1453:os/tasks.c    ****                 {
 1587              		.loc 1 1453 22 is_stmt 1 view .LVU448
1453:os/tasks.c    ****                 {
 1588              		.loc 1 1453 24 is_stmt 0 view .LVU449
 1589 002e 1A4B     		ldr	r3, .L130+16
 1590 0030 9C42     		cmp	r4, r3
 1591 0032 26D0     		beq	.L124
1453:os/tasks.c    ****                 {
 1592              		.loc 1 1453 71 discriminator 1 view .LVU450
 1593 0034 ECB1     		cbz	r4, .L129
1466:os/tasks.c    ****             }
 1594              		.loc 1 1466 25 view .LVU451
 1595 0036 0120     		movs	r0, #1
 1596 0038 1EE0     		b	.L116
 1597              	.LVL120:
 1598              	.L127:
1387:os/tasks.c    **** 
 1599              		.loc 1 1387 9 is_stmt 1 view .LVU452
 1600              	.LBB152:
 1601              	.LBI152:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 1602              		.loc 2 193 34 view .LVU453
 1603              	.LBB153:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 133


 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1604              		.loc 2 195 9 view .LVU454
 1605              		.loc 2 197 9 view .LVU455
 1606              		.syntax unified
 1607              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1608 003a 4FF05003 			mov r3, #80												
 1609 003e 72B6     		cpsid i													
 1610 0040 83F31188 		msr basepri, r3											
 1611 0044 BFF36F8F 		isb														
 1612 0048 BFF34F8F 		dsb														
 1613 004c 62B6     		cpsie i													
 1614              	
 1615              	@ 0 "" 2
 1616              	.LVL121:
 1617              		.thumb
 1618              		.syntax unified
 1619              	.L115:
 1620              		.loc 2 197 9 is_stmt 0 view .LVU456
 1621              	.LBE153:
 1622              	.LBE152:
1387:os/tasks.c    **** 
 1623              		.loc 1 1387 9 is_stmt 1 discriminator 1 view .LVU457
1387:os/tasks.c    **** 
 1624              		.loc 1 1387 9 discriminator 1 view .LVU458
1387:os/tasks.c    **** 
 1625              		.loc 1 1387 9 discriminator 1 view .LVU459
 1626 004e FEE7     		b	.L115
 1627              	.LVL122:
 1628              	.L128:
1417:os/tasks.c    ****                     {
 1629              		.loc 1 1417 21 view .LVU460
1417:os/tasks.c    ****                     {
 1630              		.loc 1 1417 25 is_stmt 0 view .LVU461
 1631 0050 AB6A     		ldr	r3, [r5, #40]
1417:os/tasks.c    ****                     {
 1632              		.loc 1 1417 23 view .LVU462
 1633 0052 4BB1     		cbz	r3, .L122
1447:os/tasks.c    ****                     }
 1634              		.loc 1 1447 33 view .LVU463
 1635 0054 0220     		movs	r0, #2
 1636 0056 0FE0     		b	.L116
 1637              	.LVL123:
 1638              	.L119:
 1639              	.LBB154:
1432:os/tasks.c    ****                                     {
 1640              		.loc 1 1432 37 is_stmt 1 view .LVU464
1432:os/tasks.c    ****                                     {
 1641              		.loc 1 1432 61 is_stmt 0 view .LVU465
 1642 0058 EA18     		adds	r2, r5, r3
 1643 005a 92F85820 		ldrb	r2, [r2, #88]	@ zero_extendqisi2
 1644 005e D2B2     		uxtb	r2, r2
1432:os/tasks.c    ****                                     {
 1645              		.loc 1 1432 39 view .LVU466
 1646 0060 012A     		cmp	r2, #1
 1647 0062 0CD0     		beq	.L123
1430:os/tasks.c    ****                                 {
 1648              		.loc 1 1430 88 is_stmt 1 discriminator 2 view .LVU467
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 134


1430:os/tasks.c    ****                                 {
 1649              		.loc 1 1430 89 is_stmt 0 discriminator 2 view .LVU468
 1650 0064 0133     		adds	r3, r3, #1
 1651              	.LVL124:
1430:os/tasks.c    ****                                 {
 1652              		.loc 1 1430 89 discriminator 2 view .LVU469
 1653 0066 00E0     		b	.L118
 1654              	.LVL125:
 1655              	.L122:
1430:os/tasks.c    ****                                 {
 1656              		.loc 1 1430 40 view .LVU470
 1657 0068 0023     		movs	r3, #0
 1658              	.L118:
 1659              	.LVL126:
1430:os/tasks.c    ****                                 {
 1660              		.loc 1 1430 45 is_stmt 1 discriminator 1 view .LVU471
1430:os/tasks.c    ****                                 {
 1661              		.loc 1 1430 33 is_stmt 0 discriminator 1 view .LVU472
 1662 006a 002B     		cmp	r3, #0
 1663 006c F4DD     		ble	.L119
1428:os/tasks.c    **** 
 1664              		.loc 1 1428 41 view .LVU473
 1665 006e 0320     		movs	r0, #3
 1666 0070 02E0     		b	.L116
 1667              	.LVL127:
 1668              	.L129:
1428:os/tasks.c    **** 
 1669              		.loc 1 1428 41 view .LVU474
 1670              	.LBE154:
1458:os/tasks.c    ****                 }
 1671              		.loc 1 1458 29 view .LVU475
 1672 0072 0420     		movs	r0, #4
 1673 0074 00E0     		b	.L116
 1674              	.LVL128:
 1675              	.L120:
1392:os/tasks.c    ****         }
 1676              		.loc 1 1392 21 view .LVU476
 1677 0076 0020     		movs	r0, #0
 1678              	.LVL129:
 1679              	.L116:
1470:os/tasks.c    ****     } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1680              		.loc 1 1470 9 is_stmt 1 view .LVU477
1471:os/tasks.c    **** 
 1681              		.loc 1 1471 5 is_stmt 0 view .LVU478
 1682 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1683              	.LVL130:
 1684              	.L121:
1408:os/tasks.c    ****             }
 1685              		.loc 1 1408 25 view .LVU479
 1686 007a 0220     		movs	r0, #2
 1687 007c FCE7     		b	.L116
 1688              	.LVL131:
 1689              	.L123:
 1690              	.LBB155:
1434:os/tasks.c    ****                                         break;
 1691              		.loc 1 1434 49 view .LVU480
 1692 007e 0220     		movs	r0, #2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 135


 1693 0080 FAE7     		b	.L116
 1694              	.LVL132:
 1695              	.L124:
1434:os/tasks.c    ****                                         break;
 1696              		.loc 1 1434 49 view .LVU481
 1697              	.LBE155:
1458:os/tasks.c    ****                 }
 1698              		.loc 1 1458 29 view .LVU482
 1699 0082 0420     		movs	r0, #4
 1700 0084 F8E7     		b	.L116
 1701              	.L131:
 1702 0086 00BF     		.align	2
 1703              	.L130:
 1704 0088 00000000 		.word	.LANCHOR10
 1705 008c 00000000 		.word	.LANCHOR2
 1706 0090 00000000 		.word	.LANCHOR8
 1707 0094 00000000 		.word	.LANCHOR0
 1708 0098 00000000 		.word	.LANCHOR7
 1709              		.cfi_endproc
 1710              	.LFE11:
 1712              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1713              		.align	1
 1714              		.global	uxTaskPriorityGet
 1715              		.syntax unified
 1716              		.thumb
 1717              		.thumb_func
 1718              		.fpu fpv5-d16
 1720              	uxTaskPriorityGet:
 1721              	.LVL133:
 1722              	.LFB12:
1479:os/tasks.c    ****         TCB_t const * pxTCB;
 1723              		.loc 1 1479 5 is_stmt 1 view -0
 1724              		.cfi_startproc
 1725              		@ args = 0, pretend = 0, frame = 0
 1726              		@ frame_needed = 0, uses_anonymous_args = 0
1479:os/tasks.c    ****         TCB_t const * pxTCB;
 1727              		.loc 1 1479 5 is_stmt 0 view .LVU484
 1728 0000 10B5     		push	{r4, lr}
 1729              	.LCFI17:
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 4, -8
 1732              		.cfi_offset 14, -4
 1733 0002 0446     		mov	r4, r0
1480:os/tasks.c    ****         UBaseType_t uxReturn;
 1734              		.loc 1 1480 9 is_stmt 1 view .LVU485
1481:os/tasks.c    **** 
 1735              		.loc 1 1481 9 view .LVU486
1483:os/tasks.c    ****         {
 1736              		.loc 1 1483 9 view .LVU487
 1737 0004 FFF7FEFF 		bl	vPortEnterCritical
 1738              	.LVL134:
1487:os/tasks.c    ****             uxReturn = pxTCB->uxPriority;
 1739              		.loc 1 1487 13 view .LVU488
1487:os/tasks.c    ****             uxReturn = pxTCB->uxPriority;
 1740              		.loc 1 1487 21 is_stmt 0 view .LVU489
 1741 0008 24B1     		cbz	r4, .L135
 1742              	.LVL135:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 136


 1743              	.L133:
1488:os/tasks.c    ****         }
 1744              		.loc 1 1488 13 is_stmt 1 discriminator 4 view .LVU490
1488:os/tasks.c    ****         }
 1745              		.loc 1 1488 22 is_stmt 0 discriminator 4 view .LVU491
 1746 000a E46A     		ldr	r4, [r4, #44]
 1747              	.LVL136:
1490:os/tasks.c    **** 
 1748              		.loc 1 1490 9 is_stmt 1 discriminator 4 view .LVU492
 1749 000c FFF7FEFF 		bl	vPortExitCritical
 1750              	.LVL137:
1492:os/tasks.c    ****     }
 1751              		.loc 1 1492 9 discriminator 4 view .LVU493
1493:os/tasks.c    **** 
 1752              		.loc 1 1493 5 is_stmt 0 discriminator 4 view .LVU494
 1753 0010 2046     		mov	r0, r4
 1754 0012 10BD     		pop	{r4, pc}
 1755              	.LVL138:
 1756              	.L135:
1487:os/tasks.c    ****             uxReturn = pxTCB->uxPriority;
 1757              		.loc 1 1487 21 discriminator 1 view .LVU495
 1758 0014 014B     		ldr	r3, .L136
 1759 0016 1C68     		ldr	r4, [r3]
 1760              	.LVL139:
1487:os/tasks.c    ****             uxReturn = pxTCB->uxPriority;
 1761              		.loc 1 1487 21 discriminator 1 view .LVU496
 1762 0018 F7E7     		b	.L133
 1763              	.L137:
 1764 001a 00BF     		.align	2
 1765              	.L136:
 1766 001c 00000000 		.word	.LANCHOR10
 1767              		.cfi_endproc
 1768              	.LFE12:
 1770              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1771              		.align	1
 1772              		.global	uxTaskPriorityGetFromISR
 1773              		.syntax unified
 1774              		.thumb
 1775              		.thumb_func
 1776              		.fpu fpv5-d16
 1778              	uxTaskPriorityGetFromISR:
 1779              	.LVL140:
 1780              	.LFB13:
1501:os/tasks.c    ****         TCB_t const * pxTCB;
 1781              		.loc 1 1501 5 is_stmt 1 view -0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
1501:os/tasks.c    ****         TCB_t const * pxTCB;
 1785              		.loc 1 1501 5 is_stmt 0 view .LVU498
 1786 0000 10B5     		push	{r4, lr}
 1787              	.LCFI18:
 1788              		.cfi_def_cfa_offset 8
 1789              		.cfi_offset 4, -8
 1790              		.cfi_offset 14, -4
 1791 0002 0446     		mov	r4, r0
1502:os/tasks.c    ****         UBaseType_t uxReturn, uxSavedInterruptState;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 137


 1792              		.loc 1 1502 9 is_stmt 1 view .LVU499
1503:os/tasks.c    **** 
 1793              		.loc 1 1503 9 view .LVU500
1521:os/tasks.c    **** 
 1794              		.loc 1 1521 9 view .LVU501
 1795 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1796              	.LVL141:
1523:os/tasks.c    ****         {
 1797              		.loc 1 1523 9 view .LVU502
 1798              	.LBB156:
 1799              	.LBI156:
 198:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 199:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	mov %0, %1												\n"\
 200:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	cpsid i													\n"\
 201:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	msr basepri, %0											\n"\
 202:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	isb														\n"\
 203:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	dsb														\n"\
 204:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	cpsie i													\n"\
 205:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 206:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         );
 207:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 208:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 209:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 210:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 211:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 1800              		.loc 2 211 38 view .LVU503
 1801              	.LBB157:
 212:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 213:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 1802              		.loc 2 213 9 view .LVU504
 214:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 215:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile
 1803              		.loc 2 215 9 view .LVU505
 1804              		.syntax unified
 1805              	@ 215 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1806 0008 EFF31183 			mrs r3, basepri											
 1807 000c 4FF05002 		mov r2, #80												
 1808 0010 72B6     		cpsid i													
 1809 0012 82F31188 		msr basepri, r2											
 1810 0016 BFF36F8F 		isb														
 1811 001a BFF34F8F 		dsb														
 1812 001e 62B6     		cpsie i													
 1813              	
 1814              	@ 0 "" 2
 1815              	.LVL142:
 216:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 217:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	mrs %0, basepri											\n"\
 218:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	mov %1, %2												\n"\
 219:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	cpsid i													\n"\
 220:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	msr basepri, %1											\n"\
 221:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	isb														\n"\
 222:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	dsb														\n"\
 223:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             "	cpsie i													\n"\
 224:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****             : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT
 225:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         );
 226:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 227:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         /* This return will not be reached but is necessary to prevent compiler
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 138


 228:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****          * warnings. */
 229:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         return ulOriginalBASEPRI;
 1816              		.loc 2 229 9 view .LVU506
 1817              		.loc 2 229 9 is_stmt 0 view .LVU507
 1818              		.thumb
 1819              		.syntax unified
 1820              	.LBE157:
 1821              	.LBE156:
1527:os/tasks.c    ****             uxReturn = pxTCB->uxPriority;
 1822              		.loc 1 1527 13 is_stmt 1 view .LVU508
1527:os/tasks.c    ****             uxReturn = pxTCB->uxPriority;
 1823              		.loc 1 1527 21 is_stmt 0 view .LVU509
 1824 0020 1CB1     		cbz	r4, .L141
 1825              	.LVL143:
 1826              	.L139:
1528:os/tasks.c    ****         }
 1827              		.loc 1 1528 13 is_stmt 1 discriminator 4 view .LVU510
1528:os/tasks.c    ****         }
 1828              		.loc 1 1528 22 is_stmt 0 discriminator 4 view .LVU511
 1829 0022 E06A     		ldr	r0, [r4, #44]
 1830              	.LVL144:
1530:os/tasks.c    **** 
 1831              		.loc 1 1530 9 is_stmt 1 discriminator 4 view .LVU512
 1832              	.LBB158:
 1833              	.LBI158:
 230:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 231:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** /*-----------------------------------------------------------*/
 232:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 233:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 1834              		.loc 2 233 34 discriminator 4 view .LVU513
 1835              	.LBB159:
 234:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 235:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         __asm volatile
 1836              		.loc 2 235 9 discriminator 4 view .LVU514
 1837              		.syntax unified
 1838              	@ 235 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1839 0024 83F31188 			msr basepri, r3	
 1840              	@ 0 "" 2
 1841              	.LVL145:
 1842              		.loc 2 235 9 is_stmt 0 discriminator 4 view .LVU515
 1843              		.thumb
 1844              		.syntax unified
 1845              	.LBE159:
 1846              	.LBE158:
1532:os/tasks.c    ****     }
 1847              		.loc 1 1532 9 is_stmt 1 discriminator 4 view .LVU516
1533:os/tasks.c    **** 
 1848              		.loc 1 1533 5 is_stmt 0 discriminator 4 view .LVU517
 1849 0028 10BD     		pop	{r4, pc}
 1850              	.LVL146:
 1851              	.L141:
1527:os/tasks.c    ****             uxReturn = pxTCB->uxPriority;
 1852              		.loc 1 1527 21 discriminator 1 view .LVU518
 1853 002a 014A     		ldr	r2, .L142
 1854 002c 1468     		ldr	r4, [r2]
 1855              	.LVL147:
1527:os/tasks.c    ****             uxReturn = pxTCB->uxPriority;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 139


 1856              		.loc 1 1527 21 discriminator 1 view .LVU519
 1857 002e F8E7     		b	.L139
 1858              	.L143:
 1859              		.align	2
 1860              	.L142:
 1861 0030 00000000 		.word	.LANCHOR10
 1862              		.cfi_endproc
 1863              	.LFE13:
 1865              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1866              		.align	1
 1867              		.global	vTaskPrioritySet
 1868              		.syntax unified
 1869              		.thumb
 1870              		.thumb_func
 1871              		.fpu fpv5-d16
 1873              	vTaskPrioritySet:
 1874              	.LVL148:
 1875              	.LFB14:
1542:os/tasks.c    ****         TCB_t * pxTCB;
 1876              		.loc 1 1542 5 is_stmt 1 view -0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 0
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
1543:os/tasks.c    ****         UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
 1880              		.loc 1 1543 9 view .LVU521
1544:os/tasks.c    ****         BaseType_t xYieldRequired = pdFALSE;
 1881              		.loc 1 1544 9 view .LVU522
1545:os/tasks.c    **** 
 1882              		.loc 1 1545 9 view .LVU523
1547:os/tasks.c    **** 
 1883              		.loc 1 1547 9 view .LVU524
 1884 0000 0329     		cmp	r1, #3
 1885 0002 0AD9     		bls	.L145
1547:os/tasks.c    **** 
 1886              		.loc 1 1547 9 view .LVU525
 1887              	.LBB160:
 1888              	.LBI160:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 1889              		.loc 2 193 34 view .LVU526
 1890              	.LBB161:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 1891              		.loc 2 195 9 view .LVU527
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 1892              		.loc 2 197 9 view .LVU528
 1893              		.syntax unified
 1894              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 1895 0004 4FF05003 			mov r3, #80												
 1896 0008 72B6     		cpsid i													
 1897 000a 83F31188 		msr basepri, r3											
 1898 000e BFF36F8F 		isb														
 1899 0012 BFF34F8F 		dsb														
 1900 0016 62B6     		cpsie i													
 1901              	
 1902              	@ 0 "" 2
 1903              	.LVL149:
 1904              		.thumb
 1905              		.syntax unified
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 140


 1906              	.L146:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 1907              		.loc 2 197 9 is_stmt 0 view .LVU529
 1908              	.LBE161:
 1909              	.LBE160:
1547:os/tasks.c    **** 
 1910              		.loc 1 1547 9 is_stmt 1 discriminator 1 view .LVU530
1547:os/tasks.c    **** 
 1911              		.loc 1 1547 9 discriminator 1 view .LVU531
1547:os/tasks.c    **** 
 1912              		.loc 1 1547 9 discriminator 1 view .LVU532
 1913 0018 FEE7     		b	.L146
 1914              	.L145:
1542:os/tasks.c    ****         TCB_t * pxTCB;
 1915              		.loc 1 1542 5 is_stmt 0 view .LVU533
 1916 001a 70B5     		push	{r4, r5, r6, lr}
 1917              	.LCFI19:
 1918              		.cfi_def_cfa_offset 16
 1919              		.cfi_offset 4, -16
 1920              		.cfi_offset 5, -12
 1921              		.cfi_offset 6, -8
 1922              		.cfi_offset 14, -4
 1923 001c 0446     		mov	r4, r0
 1924 001e 0D46     		mov	r5, r1
1547:os/tasks.c    **** 
 1925              		.loc 1 1547 65 is_stmt 1 view .LVU534
1550:os/tasks.c    ****         {
 1926              		.loc 1 1550 9 view .LVU535
 1927              	.LVL150:
1556:os/tasks.c    ****         }
 1928              		.loc 1 1556 37 view .LVU536
1559:os/tasks.c    ****         {
 1929              		.loc 1 1559 9 view .LVU537
 1930 0020 FFF7FEFF 		bl	vPortEnterCritical
 1931              	.LVL151:
1563:os/tasks.c    **** 
 1932              		.loc 1 1563 13 view .LVU538
1563:os/tasks.c    **** 
 1933              		.loc 1 1563 21 is_stmt 0 view .LVU539
 1934 0024 74B1     		cbz	r4, .L160
 1935              	.LVL152:
 1936              	.L147:
1565:os/tasks.c    **** 
 1937              		.loc 1 1565 59 is_stmt 1 discriminator 4 view .LVU540
1569:os/tasks.c    ****                 }
 1938              		.loc 1 1569 21 discriminator 4 view .LVU541
1569:os/tasks.c    ****                 }
 1939              		.loc 1 1569 43 is_stmt 0 discriminator 4 view .LVU542
 1940 0026 E26C     		ldr	r2, [r4, #76]
 1941              	.LVL153:
1577:os/tasks.c    ****             {
 1942              		.loc 1 1577 13 is_stmt 1 discriminator 4 view .LVU543
1577:os/tasks.c    ****             {
 1943              		.loc 1 1577 15 is_stmt 0 discriminator 4 view .LVU544
 1944 0028 9542     		cmp	r5, r2
 1945 002a 2ED0     		beq	.L148
1581:os/tasks.c    ****                 {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 141


 1946              		.loc 1 1581 17 is_stmt 1 view .LVU545
1581:os/tasks.c    ****                 {
 1947              		.loc 1 1581 19 is_stmt 0 view .LVU546
 1948 002c 0DD9     		bls	.L149
1583:os/tasks.c    ****                     {
 1949              		.loc 1 1583 21 is_stmt 1 view .LVU547
1583:os/tasks.c    ****                     {
 1950              		.loc 1 1583 31 is_stmt 0 view .LVU548
 1951 002e 264B     		ldr	r3, .L163
 1952 0030 1B68     		ldr	r3, [r3]
1583:os/tasks.c    ****                     {
 1953              		.loc 1 1583 23 view .LVU549
 1954 0032 A342     		cmp	r3, r4
 1955 0034 2CD0     		beq	.L155
1588:os/tasks.c    ****                         {
 1956              		.loc 1 1588 25 is_stmt 1 view .LVU550
1588:os/tasks.c    ****                         {
 1957              		.loc 1 1588 58 is_stmt 0 view .LVU551
 1958 0036 244B     		ldr	r3, .L163
 1959 0038 1B68     		ldr	r3, [r3]
 1960 003a DB6A     		ldr	r3, [r3, #44]
1588:os/tasks.c    ****                         {
 1961              		.loc 1 1588 27 view .LVU552
 1962 003c AB42     		cmp	r3, r5
 1963 003e 29D9     		bls	.L156
1545:os/tasks.c    **** 
 1964              		.loc 1 1545 20 view .LVU553
 1965 0040 0026     		movs	r6, #0
 1966 0042 07E0     		b	.L150
 1967              	.LVL154:
 1968              	.L160:
1563:os/tasks.c    **** 
 1969              		.loc 1 1563 21 discriminator 1 view .LVU554
 1970 0044 204B     		ldr	r3, .L163
 1971 0046 1C68     		ldr	r4, [r3]
 1972              	.LVL155:
1563:os/tasks.c    **** 
 1973              		.loc 1 1563 21 discriminator 1 view .LVU555
 1974 0048 EDE7     		b	.L147
 1975              	.LVL156:
 1976              	.L149:
1604:os/tasks.c    ****                 {
 1977              		.loc 1 1604 22 is_stmt 1 view .LVU556
1604:os/tasks.c    ****                 {
 1978              		.loc 1 1604 32 is_stmt 0 view .LVU557
 1979 004a 1F4B     		ldr	r3, .L163
 1980 004c 1B68     		ldr	r3, [r3]
1604:os/tasks.c    ****                 {
 1981              		.loc 1 1604 24 view .LVU558
 1982 004e A342     		cmp	r3, r4
 1983 0050 22D0     		beq	.L157
1545:os/tasks.c    **** 
 1984              		.loc 1 1545 20 view .LVU559
 1985 0052 0026     		movs	r6, #0
 1986              	.L150:
 1987              	.LVL157:
1616:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 142


 1988              		.loc 1 1616 17 is_stmt 1 view .LVU560
1621:os/tasks.c    **** 
 1989              		.loc 1 1621 17 view .LVU561
1621:os/tasks.c    **** 
 1990              		.loc 1 1621 39 is_stmt 0 view .LVU562
 1991 0054 E36A     		ldr	r3, [r4, #44]
 1992              	.LVL158:
1627:os/tasks.c    ****                         {
 1993              		.loc 1 1627 25 is_stmt 1 view .LVU563
1627:os/tasks.c    ****                         {
 1994              		.loc 1 1627 27 is_stmt 0 view .LVU564
 1995 0056 9A42     		cmp	r2, r3
 1996 0058 20D0     		beq	.L161
 1997              	.L151:
1633:os/tasks.c    ****                         }
 1998              		.loc 1 1633 53 is_stmt 1 view .LVU565
1637:os/tasks.c    ****                     }
 1999              		.loc 1 1637 25 view .LVU566
1637:os/tasks.c    ****                     }
 2000              		.loc 1 1637 47 is_stmt 0 view .LVU567
 2001 005a E564     		str	r5, [r4, #76]
1647:os/tasks.c    ****                 {
 2002              		.loc 1 1647 17 is_stmt 1 view .LVU568
1647:os/tasks.c    ****                 {
 2003              		.loc 1 1647 23 is_stmt 0 view .LVU569
 2004 005c A269     		ldr	r2, [r4, #24]
 2005              	.LVL159:
1647:os/tasks.c    ****                 {
 2006              		.loc 1 1647 19 view .LVU570
 2007 005e 002A     		cmp	r2, #0
 2008 0060 02DB     		blt	.L152
1649:os/tasks.c    ****                 }
 2009              		.loc 1 1649 21 is_stmt 1 view .LVU571
 2010 0062 C5F10405 		rsb	r5, r5, #4
 2011              	.LVL160:
1649:os/tasks.c    ****                 }
 2012              		.loc 1 1649 21 is_stmt 0 view .LVU572
 2013 0066 A561     		str	r5, [r4, #24]
 2014              	.L152:
1653:os/tasks.c    ****                 }
 2015              		.loc 1 1653 45 is_stmt 1 view .LVU573
1660:os/tasks.c    ****                 {
 2016              		.loc 1 1660 17 view .LVU574
1660:os/tasks.c    ****                 {
 2017              		.loc 1 1660 21 is_stmt 0 view .LVU575
 2018 0068 6169     		ldr	r1, [r4, #20]
 2019 006a 03EB8303 		add	r3, r3, r3, lsl #2
 2020              	.LVL161:
1660:os/tasks.c    ****                 {
 2021              		.loc 1 1660 21 view .LVU576
 2022 006e 174A     		ldr	r2, .L163+4
 2023 0070 02EB8303 		add	r3, r2, r3, lsl #2
1660:os/tasks.c    ****                 {
 2024              		.loc 1 1660 19 view .LVU577
 2025 0074 9942     		cmp	r1, r3
 2026 0076 13D0     		beq	.L162
 2027              	.LVL162:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 143


 2028              	.L153:
1681:os/tasks.c    ****                 }
 2029              		.loc 1 1681 45 is_stmt 1 view .LVU578
1684:os/tasks.c    ****                 {
 2030              		.loc 1 1684 17 view .LVU579
1684:os/tasks.c    ****                 {
 2031              		.loc 1 1684 19 is_stmt 0 view .LVU580
 2032 0078 3EB1     		cbz	r6, .L148
1686:os/tasks.c    ****                 }
 2033              		.loc 1 1686 21 is_stmt 1 view .LVU581
 2034 007a 154B     		ldr	r3, .L163+8
 2035 007c 4FF08052 		mov	r2, #268435456
 2036 0080 1A60     		str	r2, [r3]
1686:os/tasks.c    ****                 }
 2037              		.loc 1 1686 21 view .LVU582
 2038              		.syntax unified
 2039              	@ 1686 "os/tasks.c" 1
 2040 0082 BFF34F8F 		dsb
 2041              	@ 0 "" 2
1686:os/tasks.c    ****                 }
 2042              		.loc 1 1686 21 view .LVU583
 2043              	@ 1686 "os/tasks.c" 1
 2044 0086 BFF36F8F 		isb
 2045              	@ 0 "" 2
1686:os/tasks.c    ****                 }
 2046              		.loc 1 1686 52 view .LVU584
 2047              	.LVL163:
 2048              		.thumb
 2049              		.syntax unified
 2050              	.L148:
1690:os/tasks.c    ****                 }
 2051              		.loc 1 1690 45 view .LVU585
1695:os/tasks.c    ****             }
 2052              		.loc 1 1695 17 view .LVU586
1698:os/tasks.c    ****     }
 2053              		.loc 1 1698 9 view .LVU587
 2054 008a FFF7FEFF 		bl	vPortExitCritical
 2055              	.LVL164:
1699:os/tasks.c    **** 
 2056              		.loc 1 1699 5 is_stmt 0 view .LVU588
 2057 008e 70BD     		pop	{r4, r5, r6, pc}
 2058              	.LVL165:
 2059              	.L155:
1545:os/tasks.c    **** 
 2060              		.loc 1 1545 20 view .LVU589
 2061 0090 0026     		movs	r6, #0
 2062 0092 DFE7     		b	.L150
 2063              	.L156:
1590:os/tasks.c    ****                         }
 2064              		.loc 1 1590 44 view .LVU590
 2065 0094 0126     		movs	r6, #1
 2066 0096 DDE7     		b	.L150
 2067              	.L157:
1609:os/tasks.c    ****                 }
 2068              		.loc 1 1609 36 view .LVU591
 2069 0098 0126     		movs	r6, #1
 2070 009a DBE7     		b	.L150
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 144


 2071              	.LVL166:
 2072              	.L161:
1629:os/tasks.c    ****                         }
 2073              		.loc 1 1629 29 is_stmt 1 view .LVU592
1629:os/tasks.c    ****                         }
 2074              		.loc 1 1629 47 is_stmt 0 view .LVU593
 2075 009c E562     		str	r5, [r4, #44]
 2076 009e DCE7     		b	.L151
 2077              	.LVL167:
 2078              	.L162:
1665:os/tasks.c    ****                     {
 2079              		.loc 1 1665 21 is_stmt 1 view .LVU594
1665:os/tasks.c    ****                     {
 2080              		.loc 1 1665 25 is_stmt 0 view .LVU595
 2081 00a0 251D     		adds	r5, r4, #4
 2082 00a2 2846     		mov	r0, r5
 2083 00a4 FFF7FEFF 		bl	uxListRemove
 2084              	.LVL168:
1674:os/tasks.c    ****                     }
 2085              		.loc 1 1674 49 is_stmt 1 view .LVU596
1677:os/tasks.c    ****                 }
 2086              		.loc 1 1677 21 view .LVU597
1677:os/tasks.c    ****                 }
 2087              		.loc 1 1677 21 view .LVU598
 2088 00a8 E06A     		ldr	r0, [r4, #44]
 2089 00aa 0A4B     		ldr	r3, .L163+12
 2090 00ac 1B68     		ldr	r3, [r3]
 2091 00ae 9842     		cmp	r0, r3
 2092 00b0 01D9     		bls	.L154
1677:os/tasks.c    ****                 }
 2093              		.loc 1 1677 21 discriminator 1 view .LVU599
 2094 00b2 084B     		ldr	r3, .L163+12
 2095 00b4 1860     		str	r0, [r3]
 2096              	.L154:
1677:os/tasks.c    ****                 }
 2097              		.loc 1 1677 21 discriminator 3 view .LVU600
1677:os/tasks.c    ****                 }
 2098              		.loc 1 1677 21 discriminator 3 view .LVU601
 2099 00b6 00EB8000 		add	r0, r0, r0, lsl #2
 2100 00ba 2946     		mov	r1, r5
 2101 00bc 034B     		ldr	r3, .L163+4
 2102 00be 03EB8000 		add	r0, r3, r0, lsl #2
 2103 00c2 FFF7FEFF 		bl	vListInsertEnd
 2104              	.LVL169:
1677:os/tasks.c    ****                 }
 2105              		.loc 1 1677 51 discriminator 3 view .LVU602
 2106 00c6 D7E7     		b	.L153
 2107              	.L164:
 2108              		.align	2
 2109              	.L163:
 2110 00c8 00000000 		.word	.LANCHOR10
 2111 00cc 00000000 		.word	.LANCHOR4
 2112 00d0 04ED00E0 		.word	-536810236
 2113 00d4 00000000 		.word	.LANCHOR13
 2114              		.cfi_endproc
 2115              	.LFE14:
 2117              		.section	.text.vTaskResume,"ax",%progbits
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 145


 2118              		.align	1
 2119              		.global	vTaskResume
 2120              		.syntax unified
 2121              		.thumb
 2122              		.thumb_func
 2123              		.fpu fpv5-d16
 2125              	vTaskResume:
 2126              	.LVL170:
 2127              	.LFB17:
1859:os/tasks.c    ****         TCB_t * const pxTCB = xTaskToResume;
 2128              		.loc 1 1859 5 view -0
 2129              		.cfi_startproc
 2130              		@ args = 0, pretend = 0, frame = 0
 2131              		@ frame_needed = 0, uses_anonymous_args = 0
1859:os/tasks.c    ****         TCB_t * const pxTCB = xTaskToResume;
 2132              		.loc 1 1859 5 is_stmt 0 view .LVU604
 2133 0000 38B5     		push	{r3, r4, r5, lr}
 2134              	.LCFI20:
 2135              		.cfi_def_cfa_offset 16
 2136              		.cfi_offset 3, -16
 2137              		.cfi_offset 4, -12
 2138              		.cfi_offset 5, -8
 2139              		.cfi_offset 14, -4
1860:os/tasks.c    **** 
 2140              		.loc 1 1860 9 is_stmt 1 view .LVU605
 2141              	.LVL171:
1863:os/tasks.c    **** 
 2142              		.loc 1 1863 9 view .LVU606
 2143 0002 68B1     		cbz	r0, .L172
 2144 0004 0446     		mov	r4, r0
1863:os/tasks.c    **** 
 2145              		.loc 1 1863 38 discriminator 2 view .LVU607
1867:os/tasks.c    ****         {
 2146              		.loc 1 1867 9 discriminator 2 view .LVU608
1867:os/tasks.c    ****         {
 2147              		.loc 1 1867 21 is_stmt 0 discriminator 2 view .LVU609
 2148 0006 1D4B     		ldr	r3, .L174
 2149 0008 1B68     		ldr	r3, [r3]
1867:os/tasks.c    ****         {
 2150              		.loc 1 1867 11 discriminator 2 view .LVU610
 2151 000a 8342     		cmp	r3, r0
 2152 000c 07D0     		beq	.L165
1869:os/tasks.c    ****             {
 2153              		.loc 1 1869 13 is_stmt 1 view .LVU611
 2154 000e FFF7FEFF 		bl	vPortEnterCritical
 2155              	.LVL172:
1871:os/tasks.c    ****                 {
 2156              		.loc 1 1871 17 view .LVU612
1871:os/tasks.c    ****                 {
 2157              		.loc 1 1871 21 is_stmt 0 view .LVU613
 2158 0012 2046     		mov	r0, r4
 2159 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2160              	.LVL173:
1871:os/tasks.c    ****                 {
 2161              		.loc 1 1871 19 view .LVU614
 2162 0018 68B9     		cbnz	r0, .L173
 2163              	.L169:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 146


1895:os/tasks.c    ****                 }
 2164              		.loc 1 1895 45 is_stmt 1 view .LVU615
1898:os/tasks.c    ****         }
 2165              		.loc 1 1898 13 view .LVU616
 2166 001a FFF7FEFF 		bl	vPortExitCritical
 2167              	.LVL174:
1902:os/tasks.c    ****         }
 2168              		.loc 1 1902 37 view .LVU617
 2169              	.L165:
1904:os/tasks.c    **** 
 2170              		.loc 1 1904 5 is_stmt 0 view .LVU618
 2171 001e 38BD     		pop	{r3, r4, r5, pc}
 2172              	.LVL175:
 2173              	.L172:
1863:os/tasks.c    **** 
 2174              		.loc 1 1863 9 is_stmt 1 view .LVU619
 2175              	.LBB162:
 2176              	.LBI162:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 2177              		.loc 2 193 34 view .LVU620
 2178              	.LBB163:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2179              		.loc 2 195 9 view .LVU621
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2180              		.loc 2 197 9 view .LVU622
 2181              		.syntax unified
 2182              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2183 0020 4FF05003 			mov r3, #80												
 2184 0024 72B6     		cpsid i													
 2185 0026 83F31188 		msr basepri, r3											
 2186 002a BFF36F8F 		isb														
 2187 002e BFF34F8F 		dsb														
 2188 0032 62B6     		cpsie i													
 2189              	
 2190              	@ 0 "" 2
 2191              	.LVL176:
 2192              		.thumb
 2193              		.syntax unified
 2194              	.L167:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2195              		.loc 2 197 9 is_stmt 0 view .LVU623
 2196              	.LBE163:
 2197              	.LBE162:
1863:os/tasks.c    **** 
 2198              		.loc 1 1863 9 is_stmt 1 discriminator 1 view .LVU624
1863:os/tasks.c    **** 
 2199              		.loc 1 1863 9 discriminator 1 view .LVU625
1863:os/tasks.c    **** 
 2200              		.loc 1 1863 9 discriminator 1 view .LVU626
 2201 0034 FEE7     		b	.L167
 2202              	.LVL177:
 2203              	.L173:
1873:os/tasks.c    **** 
 2204              		.loc 1 1873 46 view .LVU627
1877:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 2205              		.loc 1 1877 21 view .LVU628
1877:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 147


 2206              		.loc 1 1877 30 is_stmt 0 view .LVU629
 2207 0036 251D     		adds	r5, r4, #4
 2208 0038 2846     		mov	r0, r5
 2209 003a FFF7FEFF 		bl	uxListRemove
 2210              	.LVL178:
1878:os/tasks.c    **** 
 2211              		.loc 1 1878 21 is_stmt 1 view .LVU630
1878:os/tasks.c    **** 
 2212              		.loc 1 1878 21 view .LVU631
 2213 003e E06A     		ldr	r0, [r4, #44]
 2214 0040 0F4B     		ldr	r3, .L174+4
 2215 0042 1B68     		ldr	r3, [r3]
 2216 0044 9842     		cmp	r0, r3
 2217 0046 01D9     		bls	.L170
1878:os/tasks.c    **** 
 2218              		.loc 1 1878 21 discriminator 1 view .LVU632
 2219 0048 0D4B     		ldr	r3, .L174+4
 2220 004a 1860     		str	r0, [r3]
 2221              	.L170:
1878:os/tasks.c    **** 
 2222              		.loc 1 1878 21 discriminator 3 view .LVU633
1878:os/tasks.c    **** 
 2223              		.loc 1 1878 21 discriminator 3 view .LVU634
 2224 004c 00EB8000 		add	r0, r0, r0, lsl #2
 2225 0050 2946     		mov	r1, r5
 2226 0052 0C4B     		ldr	r3, .L174+8
 2227 0054 03EB8000 		add	r0, r3, r0, lsl #2
 2228 0058 FFF7FEFF 		bl	vListInsertEnd
 2229              	.LVL179:
1878:os/tasks.c    **** 
 2230              		.loc 1 1878 51 discriminator 3 view .LVU635
1881:os/tasks.c    ****                     {
 2231              		.loc 1 1881 21 discriminator 3 view .LVU636
1881:os/tasks.c    ****                     {
 2232              		.loc 1 1881 30 is_stmt 0 discriminator 3 view .LVU637
 2233 005c E26A     		ldr	r2, [r4, #44]
1881:os/tasks.c    ****                     {
 2234              		.loc 1 1881 58 discriminator 3 view .LVU638
 2235 005e 074B     		ldr	r3, .L174
 2236 0060 1B68     		ldr	r3, [r3]
 2237 0062 DB6A     		ldr	r3, [r3, #44]
1881:os/tasks.c    ****                     {
 2238              		.loc 1 1881 23 discriminator 3 view .LVU639
 2239 0064 9A42     		cmp	r2, r3
 2240 0066 D8D3     		bcc	.L169
1886:os/tasks.c    ****                     }
 2241              		.loc 1 1886 25 is_stmt 1 view .LVU640
 2242 0068 074B     		ldr	r3, .L174+12
 2243 006a 4FF08052 		mov	r2, #268435456
 2244 006e 1A60     		str	r2, [r3]
1886:os/tasks.c    ****                     }
 2245              		.loc 1 1886 25 view .LVU641
 2246              		.syntax unified
 2247              	@ 1886 "os/tasks.c" 1
 2248 0070 BFF34F8F 		dsb
 2249              	@ 0 "" 2
1886:os/tasks.c    ****                     }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 148


 2250              		.loc 1 1886 25 view .LVU642
 2251              	@ 1886 "os/tasks.c" 1
 2252 0074 BFF36F8F 		isb
 2253              	@ 0 "" 2
1886:os/tasks.c    ****                     }
 2254              		.loc 1 1886 56 view .LVU643
 2255              		.thumb
 2256              		.syntax unified
 2257 0078 CFE7     		b	.L169
 2258              	.L175:
 2259 007a 00BF     		.align	2
 2260              	.L174:
 2261 007c 00000000 		.word	.LANCHOR10
 2262 0080 00000000 		.word	.LANCHOR13
 2263 0084 00000000 		.word	.LANCHOR4
 2264 0088 04ED00E0 		.word	-536810236
 2265              		.cfi_endproc
 2266              	.LFE17:
 2268              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2269              		.align	1
 2270              		.global	xTaskResumeFromISR
 2271              		.syntax unified
 2272              		.thumb
 2273              		.thumb_func
 2274              		.fpu fpv5-d16
 2276              	xTaskResumeFromISR:
 2277              	.LVL180:
 2278              	.LFB18:
1913:os/tasks.c    ****         BaseType_t xYieldRequired = pdFALSE;
 2279              		.loc 1 1913 5 view -0
 2280              		.cfi_startproc
 2281              		@ args = 0, pretend = 0, frame = 0
 2282              		@ frame_needed = 0, uses_anonymous_args = 0
1913:os/tasks.c    ****         BaseType_t xYieldRequired = pdFALSE;
 2283              		.loc 1 1913 5 is_stmt 0 view .LVU645
 2284 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2285              	.LCFI21:
 2286              		.cfi_def_cfa_offset 24
 2287              		.cfi_offset 3, -24
 2288              		.cfi_offset 4, -20
 2289              		.cfi_offset 5, -16
 2290              		.cfi_offset 6, -12
 2291              		.cfi_offset 7, -8
 2292              		.cfi_offset 14, -4
1914:os/tasks.c    ****         TCB_t * const pxTCB = xTaskToResume;
 2293              		.loc 1 1914 9 is_stmt 1 view .LVU646
 2294              	.LVL181:
1915:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
 2295              		.loc 1 1915 9 view .LVU647
1916:os/tasks.c    **** 
 2296              		.loc 1 1916 9 view .LVU648
1918:os/tasks.c    **** 
 2297              		.loc 1 1918 9 view .LVU649
 2298 0002 0028     		cmp	r0, #0
 2299 0004 36D0     		beq	.L185
 2300 0006 0546     		mov	r5, r0
1918:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 149


 2301              		.loc 1 1918 38 discriminator 2 view .LVU650
1936:os/tasks.c    **** 
 2302              		.loc 1 1936 9 discriminator 2 view .LVU651
 2303 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2304              	.LVL182:
1938:os/tasks.c    ****         {
 2305              		.loc 1 1938 9 discriminator 2 view .LVU652
 2306              	.LBB164:
 2307              	.LBI164:
 211:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 2308              		.loc 2 211 38 discriminator 2 view .LVU653
 2309              	.LBB165:
 213:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2310              		.loc 2 213 9 discriminator 2 view .LVU654
 215:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2311              		.loc 2 215 9 discriminator 2 view .LVU655
 2312              		.syntax unified
 2313              	@ 215 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2314 000c EFF31187 			mrs r7, basepri											
 2315 0010 4FF05003 		mov r3, #80												
 2316 0014 72B6     		cpsid i													
 2317 0016 83F31188 		msr basepri, r3											
 2318 001a BFF36F8F 		isb														
 2319 001e BFF34F8F 		dsb														
 2320 0022 62B6     		cpsie i													
 2321              	
 2322              	@ 0 "" 2
 2323              	.LVL183:
 229:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 2324              		.loc 2 229 9 discriminator 2 view .LVU656
 229:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 2325              		.loc 2 229 9 is_stmt 0 discriminator 2 view .LVU657
 2326              		.thumb
 2327              		.syntax unified
 2328              	.LBE165:
 2329              	.LBE164:
1940:os/tasks.c    ****             {
 2330              		.loc 1 1940 13 is_stmt 1 discriminator 2 view .LVU658
1940:os/tasks.c    ****             {
 2331              		.loc 1 1940 17 is_stmt 0 discriminator 2 view .LVU659
 2332 0024 2846     		mov	r0, r5
 2333 0026 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2334              	.LVL184:
1940:os/tasks.c    ****             {
 2335              		.loc 1 1940 15 discriminator 2 view .LVU660
 2336 002a 0446     		mov	r4, r0
 2337 002c F0B1     		cbz	r0, .L179
1942:os/tasks.c    **** 
 2338              		.loc 1 1942 51 is_stmt 1 view .LVU661
1945:os/tasks.c    ****                 {
 2339              		.loc 1 1945 17 view .LVU662
1945:os/tasks.c    ****                 {
 2340              		.loc 1 1945 42 is_stmt 0 view .LVU663
 2341 002e 1B4B     		ldr	r3, .L186
 2342 0030 1B68     		ldr	r3, [r3]
1945:os/tasks.c    ****                 {
 2343              		.loc 1 1945 19 view .LVU664
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 150


 2344 0032 63BB     		cbnz	r3, .L180
1949:os/tasks.c    ****                     {
 2345              		.loc 1 1949 21 is_stmt 1 view .LVU665
1949:os/tasks.c    ****                     {
 2346              		.loc 1 1949 30 is_stmt 0 view .LVU666
 2347 0034 EA6A     		ldr	r2, [r5, #44]
1949:os/tasks.c    ****                     {
 2348              		.loc 1 1949 58 view .LVU667
 2349 0036 1A4B     		ldr	r3, .L186+4
 2350 0038 1B68     		ldr	r3, [r3]
 2351 003a DB6A     		ldr	r3, [r3, #44]
1949:os/tasks.c    ****                     {
 2352              		.loc 1 1949 23 view .LVU668
 2353 003c 9A42     		cmp	r2, r3
 2354 003e 24D3     		bcc	.L183
1951:os/tasks.c    **** 
 2355              		.loc 1 1951 25 is_stmt 1 view .LVU669
 2356              	.LVL185:
1956:os/tasks.c    ****                     }
 2357              		.loc 1 1956 25 view .LVU670
1956:os/tasks.c    ****                     }
 2358              		.loc 1 1956 39 is_stmt 0 view .LVU671
 2359 0040 0124     		movs	r4, #1
 2360 0042 184B     		ldr	r3, .L186+8
 2361 0044 1C60     		str	r4, [r3]
 2362              	.LVL186:
 2363              	.L181:
1960:os/tasks.c    ****                     }
 2364              		.loc 1 1960 49 is_stmt 1 view .LVU672
1963:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 2365              		.loc 1 1963 21 view .LVU673
1963:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 2366              		.loc 1 1963 30 is_stmt 0 view .LVU674
 2367 0046 2E1D     		adds	r6, r5, #4
 2368 0048 3046     		mov	r0, r6
 2369 004a FFF7FEFF 		bl	uxListRemove
 2370              	.LVL187:
1964:os/tasks.c    ****                 }
 2371              		.loc 1 1964 21 is_stmt 1 view .LVU675
1964:os/tasks.c    ****                 }
 2372              		.loc 1 1964 21 view .LVU676
 2373 004e E86A     		ldr	r0, [r5, #44]
 2374 0050 154B     		ldr	r3, .L186+12
 2375 0052 1B68     		ldr	r3, [r3]
 2376 0054 9842     		cmp	r0, r3
 2377 0056 01D9     		bls	.L182
1964:os/tasks.c    ****                 }
 2378              		.loc 1 1964 21 discriminator 1 view .LVU677
 2379 0058 134B     		ldr	r3, .L186+12
 2380 005a 1860     		str	r0, [r3]
 2381              	.L182:
1964:os/tasks.c    ****                 }
 2382              		.loc 1 1964 21 discriminator 3 view .LVU678
1964:os/tasks.c    ****                 }
 2383              		.loc 1 1964 21 discriminator 3 view .LVU679
 2384 005c 00EB8000 		add	r0, r0, r0, lsl #2
 2385 0060 3146     		mov	r1, r6
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 151


 2386 0062 124B     		ldr	r3, .L186+16
 2387 0064 03EB8000 		add	r0, r3, r0, lsl #2
 2388 0068 FFF7FEFF 		bl	vListInsertEnd
 2389              	.LVL188:
1964:os/tasks.c    ****                 }
 2390              		.loc 1 1964 51 discriminator 3 view .LVU680
 2391              	.L179:
1976:os/tasks.c    ****             }
 2392              		.loc 1 1976 41 view .LVU681
1979:os/tasks.c    **** 
 2393              		.loc 1 1979 9 view .LVU682
 2394              	.LBB166:
 2395              	.LBI166:
 233:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 2396              		.loc 2 233 34 view .LVU683
 2397              	.LBB167:
 2398              		.loc 2 235 9 view .LVU684
 2399              		.syntax unified
 2400              	@ 235 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2401 006c 87F31188 			msr basepri, r7	
 2402              	@ 0 "" 2
 2403              	.LVL189:
 2404              		.loc 2 235 9 is_stmt 0 view .LVU685
 2405              		.thumb
 2406              		.syntax unified
 2407              	.LBE167:
 2408              	.LBE166:
1981:os/tasks.c    ****     }
 2409              		.loc 1 1981 9 is_stmt 1 view .LVU686
1982:os/tasks.c    **** 
 2410              		.loc 1 1982 5 is_stmt 0 view .LVU687
 2411 0070 2046     		mov	r0, r4
 2412 0072 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2413              	.LVL190:
 2414              	.L185:
1918:os/tasks.c    **** 
 2415              		.loc 1 1918 9 is_stmt 1 view .LVU688
 2416              	.LBB168:
 2417              	.LBI168:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 2418              		.loc 2 193 34 view .LVU689
 2419              	.LBB169:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2420              		.loc 2 195 9 view .LVU690
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2421              		.loc 2 197 9 view .LVU691
 2422              		.syntax unified
 2423              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2424 0074 4FF05003 			mov r3, #80												
 2425 0078 72B6     		cpsid i													
 2426 007a 83F31188 		msr basepri, r3											
 2427 007e BFF36F8F 		isb														
 2428 0082 BFF34F8F 		dsb														
 2429 0086 62B6     		cpsie i													
 2430              	
 2431              	@ 0 "" 2
 2432              	.LVL191:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 152


 2433              		.thumb
 2434              		.syntax unified
 2435              	.L178:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2436              		.loc 2 197 9 is_stmt 0 view .LVU692
 2437              	.LBE169:
 2438              	.LBE168:
1918:os/tasks.c    **** 
 2439              		.loc 1 1918 9 is_stmt 1 discriminator 1 view .LVU693
1918:os/tasks.c    **** 
 2440              		.loc 1 1918 9 discriminator 1 view .LVU694
1918:os/tasks.c    **** 
 2441              		.loc 1 1918 9 discriminator 1 view .LVU695
 2442 0088 FEE7     		b	.L178
 2443              	.LVL192:
 2444              	.L183:
1914:os/tasks.c    ****         TCB_t * const pxTCB = xTaskToResume;
 2445              		.loc 1 1914 20 is_stmt 0 view .LVU696
 2446 008a 0024     		movs	r4, #0
 2447 008c DBE7     		b	.L181
 2448              	.L180:
1971:os/tasks.c    ****                 }
 2449              		.loc 1 1971 21 is_stmt 1 view .LVU697
 2450 008e 05F11801 		add	r1, r5, #24
 2451 0092 0748     		ldr	r0, .L186+20
 2452 0094 FFF7FEFF 		bl	vListInsertEnd
 2453              	.LVL193:
1914:os/tasks.c    ****         TCB_t * const pxTCB = xTaskToResume;
 2454              		.loc 1 1914 20 is_stmt 0 view .LVU698
 2455 0098 0024     		movs	r4, #0
 2456 009a E7E7     		b	.L179
 2457              	.L187:
 2458              		.align	2
 2459              	.L186:
 2460 009c 00000000 		.word	.LANCHOR16
 2461 00a0 00000000 		.word	.LANCHOR10
 2462 00a4 00000000 		.word	.LANCHOR17
 2463 00a8 00000000 		.word	.LANCHOR13
 2464 00ac 00000000 		.word	.LANCHOR4
 2465 00b0 00000000 		.word	.LANCHOR1
 2466              		.cfi_endproc
 2467              	.LFE18:
 2469              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 2470              		.align	2
 2471              	.LC0:
 2472 0000 49444C45 		.ascii	"IDLE\000"
 2472      00
 2473              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2474              		.align	1
 2475              		.global	vTaskStartScheduler
 2476              		.syntax unified
 2477              		.thumb
 2478              		.thumb_func
 2479              		.fpu fpv5-d16
 2481              	vTaskStartScheduler:
 2482              	.LFB19:
1988:os/tasks.c    ****     BaseType_t xReturn;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 153


 2483              		.loc 1 1988 1 is_stmt 1 view -0
 2484              		.cfi_startproc
 2485              		@ args = 0, pretend = 0, frame = 16
 2486              		@ frame_needed = 0, uses_anonymous_args = 0
 2487 0000 10B5     		push	{r4, lr}
 2488              	.LCFI22:
 2489              		.cfi_def_cfa_offset 8
 2490              		.cfi_offset 4, -8
 2491              		.cfi_offset 14, -4
 2492 0002 88B0     		sub	sp, sp, #32
 2493              	.LCFI23:
 2494              		.cfi_def_cfa_offset 40
1989:os/tasks.c    **** 
 2495              		.loc 1 1989 5 view .LVU700
 2496              	.LBB170:
1994:os/tasks.c    ****             StackType_t * pxIdleTaskStackBuffer = NULL;
 2497              		.loc 1 1994 13 view .LVU701
1994:os/tasks.c    ****             StackType_t * pxIdleTaskStackBuffer = NULL;
 2498              		.loc 1 1994 28 is_stmt 0 view .LVU702
 2499 0004 0024     		movs	r4, #0
 2500 0006 0594     		str	r4, [sp, #20]
1995:os/tasks.c    ****             uint32_t ulIdleTaskStackSize;
 2501              		.loc 1 1995 13 is_stmt 1 view .LVU703
1995:os/tasks.c    ****             uint32_t ulIdleTaskStackSize;
 2502              		.loc 1 1995 27 is_stmt 0 view .LVU704
 2503 0008 0694     		str	r4, [sp, #24]
1996:os/tasks.c    **** 
 2504              		.loc 1 1996 13 is_stmt 1 view .LVU705
2000:os/tasks.c    ****             xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 2505              		.loc 1 2000 13 view .LVU706
 2506 000a 07AA     		add	r2, sp, #28
 2507 000c 06A9     		add	r1, sp, #24
 2508 000e 05A8     		add	r0, sp, #20
 2509 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 2510              	.LVL194:
2001:os/tasks.c    ****                                                  configIDLE_TASK_NAME,
 2511              		.loc 1 2001 13 view .LVU707
2001:os/tasks.c    ****                                                  configIDLE_TASK_NAME,
 2512              		.loc 1 2001 31 is_stmt 0 view .LVU708
 2513 0014 059B     		ldr	r3, [sp, #20]
 2514 0016 0293     		str	r3, [sp, #8]
 2515 0018 069B     		ldr	r3, [sp, #24]
 2516 001a 0193     		str	r3, [sp, #4]
 2517 001c 0094     		str	r4, [sp]
 2518 001e 2346     		mov	r3, r4
 2519 0020 079A     		ldr	r2, [sp, #28]
 2520 0022 1A49     		ldr	r1, .L197
 2521 0024 1A48     		ldr	r0, .L197+4
 2522 0026 FFF7FEFF 		bl	xTaskCreateStatic
 2523              	.LVL195:
2009:os/tasks.c    ****             {
 2524              		.loc 1 2009 13 is_stmt 1 view .LVU709
2009:os/tasks.c    ****             {
 2525              		.loc 1 2009 15 is_stmt 0 view .LVU710
 2526 002a 58B1     		cbz	r0, .L189
 2527              	.LVL196:
2009:os/tasks.c    ****             {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 154


 2528              		.loc 1 2009 15 view .LVU711
 2529              	.LBE170:
2032:os/tasks.c    ****             {
 2530              		.loc 1 2032 13 is_stmt 1 view .LVU712
2034:os/tasks.c    ****             }
 2531              		.loc 1 2034 17 view .LVU713
2034:os/tasks.c    ****             }
 2532              		.loc 1 2034 27 is_stmt 0 view .LVU714
 2533 002c FFF7FEFF 		bl	xTimerCreateTimerTask
 2534              	.LVL197:
 2535 0030 0346     		mov	r3, r0
 2536              	.LVL198:
 2537              	.L190:
2038:os/tasks.c    ****             }
 2538              		.loc 1 2038 41 is_stmt 1 view .LVU715
2043:os/tasks.c    ****     {
 2539              		.loc 1 2043 5 view .LVU716
2043:os/tasks.c    ****     {
 2540              		.loc 1 2043 7 is_stmt 0 view .LVU717
 2541 0032 012B     		cmp	r3, #1
 2542 0034 08D0     		beq	.L195
2102:os/tasks.c    ****     }
 2543              		.loc 1 2102 9 is_stmt 1 view .LVU718
 2544 0036 B3F1FF3F 		cmp	r3, #-1
 2545 003a 1CD0     		beq	.L196
 2546              	.LVL199:
 2547              	.L192:
2102:os/tasks.c    ****     }
 2548              		.loc 1 2102 73 discriminator 2 view .LVU719
2107:os/tasks.c    **** 
 2549              		.loc 1 2107 5 discriminator 2 view .LVU720
2111:os/tasks.c    **** }
 2550              		.loc 1 2111 5 discriminator 2 view .LVU721
 2551 003c 154B     		ldr	r3, .L197+8
 2552 003e 1B68     		ldr	r3, [r3]
2112:os/tasks.c    **** /*-----------------------------------------------------------*/
 2553              		.loc 1 2112 1 is_stmt 0 discriminator 2 view .LVU722
 2554 0040 08B0     		add	sp, sp, #32
 2555              	.LCFI24:
 2556              		.cfi_remember_state
 2557              		.cfi_def_cfa_offset 8
 2558              		@ sp needed
 2559 0042 10BD     		pop	{r4, pc}
 2560              	.L189:
 2561              	.LCFI25:
 2562              		.cfi_restore_state
 2563              	.LBB171:
2015:os/tasks.c    ****             }
 2564              		.loc 1 2015 17 is_stmt 1 view .LVU723
 2565              	.LVL200:
2015:os/tasks.c    ****             }
 2566              		.loc 1 2015 17 is_stmt 0 view .LVU724
 2567              	.LBE171:
2032:os/tasks.c    ****             {
 2568              		.loc 1 2032 13 is_stmt 1 view .LVU725
 2569              	.LBB172:
2015:os/tasks.c    ****             }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 155


 2570              		.loc 1 2015 25 is_stmt 0 view .LVU726
 2571 0044 0023     		movs	r3, #0
 2572 0046 F4E7     		b	.L190
 2573              	.LVL201:
 2574              	.L195:
2015:os/tasks.c    ****             }
 2575              		.loc 1 2015 25 view .LVU727
 2576              	.LBE172:
2059:os/tasks.c    **** 
 2577              		.loc 1 2059 9 is_stmt 1 view .LVU728
 2578              	.LBB173:
 2579              	.LBI173:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 2580              		.loc 2 193 34 view .LVU729
 2581              	.LBB174:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2582              		.loc 2 195 9 view .LVU730
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2583              		.loc 2 197 9 view .LVU731
 2584              		.syntax unified
 2585              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2586 0048 4FF05003 			mov r3, #80												
 2587 004c 72B6     		cpsid i													
 2588 004e 83F31188 		msr basepri, r3											
 2589 0052 BFF36F8F 		isb														
 2590 0056 BFF34F8F 		dsb														
 2591 005a 62B6     		cpsie i													
 2592              	
 2593              	@ 0 "" 2
 2594              	.LVL202:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2595              		.loc 2 197 9 is_stmt 0 view .LVU732
 2596              		.thumb
 2597              		.syntax unified
 2598              	.LBE174:
 2599              	.LBE173:
2071:os/tasks.c    ****         xSchedulerRunning = pdTRUE;
 2600              		.loc 1 2071 9 is_stmt 1 view .LVU733
2071:os/tasks.c    ****         xSchedulerRunning = pdTRUE;
 2601              		.loc 1 2071 30 is_stmt 0 view .LVU734
 2602 005c 0E4B     		ldr	r3, .L197+12
 2603 005e 4FF0FF32 		mov	r2, #-1
 2604 0062 1A60     		str	r2, [r3]
2072:os/tasks.c    ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2605              		.loc 1 2072 9 is_stmt 1 view .LVU735
2072:os/tasks.c    ****         xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2606              		.loc 1 2072 27 is_stmt 0 view .LVU736
 2607 0064 0D4B     		ldr	r3, .L197+16
 2608 0066 0122     		movs	r2, #1
 2609 0068 1A60     		str	r2, [r3]
2073:os/tasks.c    **** 
 2610              		.loc 1 2073 9 is_stmt 1 view .LVU737
2073:os/tasks.c    **** 
 2611              		.loc 1 2073 20 is_stmt 0 view .LVU738
 2612 006a 0D4B     		ldr	r3, .L197+20
 2613 006c 0022     		movs	r2, #0
 2614 006e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 156


2081:os/tasks.c    **** 
 2615              		.loc 1 2081 49 is_stmt 1 view .LVU739
2083:os/tasks.c    **** 
 2616              		.loc 1 2083 32 view .LVU740
2087:os/tasks.c    ****         {
 2617              		.loc 1 2087 9 view .LVU741
2087:os/tasks.c    ****         {
 2618              		.loc 1 2087 13 is_stmt 0 view .LVU742
 2619 0070 FFF7FEFF 		bl	xPortStartScheduler
 2620              	.LVL203:
 2621 0074 E2E7     		b	.L192
 2622              	.LVL204:
 2623              	.L196:
2102:os/tasks.c    ****     }
 2624              		.loc 1 2102 9 is_stmt 1 view .LVU743
 2625              	.LBB175:
 2626              	.LBI175:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 2627              		.loc 2 193 34 view .LVU744
 2628              	.LBB176:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2629              		.loc 2 195 9 view .LVU745
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2630              		.loc 2 197 9 view .LVU746
 2631              		.syntax unified
 2632              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2633 0076 4FF05003 			mov r3, #80												
 2634 007a 72B6     		cpsid i													
 2635 007c 83F31188 		msr basepri, r3											
 2636 0080 BFF36F8F 		isb														
 2637 0084 BFF34F8F 		dsb														
 2638 0088 62B6     		cpsie i													
 2639              	
 2640              	@ 0 "" 2
 2641              	.LVL205:
 2642              		.thumb
 2643              		.syntax unified
 2644              	.L193:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2645              		.loc 2 197 9 is_stmt 0 view .LVU747
 2646              	.LBE176:
 2647              	.LBE175:
2102:os/tasks.c    ****     }
 2648              		.loc 1 2102 9 is_stmt 1 discriminator 2 view .LVU748
2102:os/tasks.c    ****     }
 2649              		.loc 1 2102 9 discriminator 2 view .LVU749
2102:os/tasks.c    ****     }
 2650              		.loc 1 2102 9 discriminator 2 view .LVU750
 2651 008a FEE7     		b	.L193
 2652              	.L198:
 2653              		.align	2
 2654              	.L197:
 2655 008c 00000000 		.word	.LC0
 2656 0090 00000000 		.word	prvIdleTask
 2657 0094 00000000 		.word	.LANCHOR18
 2658 0098 00000000 		.word	.LANCHOR3
 2659 009c 00000000 		.word	.LANCHOR11
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 157


 2660 00a0 00000000 		.word	.LANCHOR15
 2661              		.cfi_endproc
 2662              	.LFE19:
 2664              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2665              		.align	1
 2666              		.global	vTaskEndScheduler
 2667              		.syntax unified
 2668              		.thumb
 2669              		.thumb_func
 2670              		.fpu fpv5-d16
 2672              	vTaskEndScheduler:
 2673              	.LFB20:
2116:os/tasks.c    ****     /* Stop the scheduler interrupts and call the portable scheduler end
 2674              		.loc 1 2116 1 view -0
 2675              		.cfi_startproc
 2676              		@ args = 0, pretend = 0, frame = 0
 2677              		@ frame_needed = 0, uses_anonymous_args = 0
 2678 0000 08B5     		push	{r3, lr}
 2679              	.LCFI26:
 2680              		.cfi_def_cfa_offset 8
 2681              		.cfi_offset 3, -8
 2682              		.cfi_offset 14, -4
2120:os/tasks.c    ****     xSchedulerRunning = pdFALSE;
 2683              		.loc 1 2120 5 view .LVU752
 2684              	.LBB177:
 2685              	.LBI177:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 2686              		.loc 2 193 34 view .LVU753
 2687              	.LBB178:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2688              		.loc 2 195 9 view .LVU754
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2689              		.loc 2 197 9 view .LVU755
 2690              		.syntax unified
 2691              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2692 0002 4FF05003 			mov r3, #80												
 2693 0006 72B6     		cpsid i													
 2694 0008 83F31188 		msr basepri, r3											
 2695 000c BFF36F8F 		isb														
 2696 0010 BFF34F8F 		dsb														
 2697 0014 62B6     		cpsie i													
 2698              	
 2699              	@ 0 "" 2
 2700              		.thumb
 2701              		.syntax unified
 2702              	.LBE178:
 2703              	.LBE177:
2121:os/tasks.c    ****     vPortEndScheduler();
 2704              		.loc 1 2121 5 view .LVU756
2121:os/tasks.c    ****     vPortEndScheduler();
 2705              		.loc 1 2121 23 is_stmt 0 view .LVU757
 2706 0016 034B     		ldr	r3, .L201
 2707 0018 0022     		movs	r2, #0
 2708 001a 1A60     		str	r2, [r3]
2122:os/tasks.c    **** }
 2709              		.loc 1 2122 5 is_stmt 1 view .LVU758
 2710 001c FFF7FEFF 		bl	vPortEndScheduler
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 158


 2711              	.LVL206:
2123:os/tasks.c    **** /*----------------------------------------------------------*/
 2712              		.loc 1 2123 1 is_stmt 0 view .LVU759
 2713 0020 08BD     		pop	{r3, pc}
 2714              	.L202:
 2715 0022 00BF     		.align	2
 2716              	.L201:
 2717 0024 00000000 		.word	.LANCHOR11
 2718              		.cfi_endproc
 2719              	.LFE20:
 2721              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2722              		.align	1
 2723              		.global	vTaskSuspendAll
 2724              		.syntax unified
 2725              		.thumb
 2726              		.thumb_func
 2727              		.fpu fpv5-d16
 2729              	vTaskSuspendAll:
 2730              	.LFB21:
2127:os/tasks.c    ****     /* A critical section is not required as the variable is of type
 2731              		.loc 1 2127 1 is_stmt 1 view -0
 2732              		.cfi_startproc
 2733              		@ args = 0, pretend = 0, frame = 0
 2734              		@ frame_needed = 0, uses_anonymous_args = 0
 2735              		@ link register save eliminated.
2135:os/tasks.c    **** 
 2736              		.loc 1 2135 27 view .LVU761
2139:os/tasks.c    **** 
 2737              		.loc 1 2139 5 view .LVU762
 2738 0000 024A     		ldr	r2, .L204
 2739 0002 1368     		ldr	r3, [r2]
 2740 0004 0133     		adds	r3, r3, #1
 2741 0006 1360     		str	r3, [r2]
2143:os/tasks.c    **** }
 2742              		.loc 1 2143 5 view .LVU763
2144:os/tasks.c    **** /*----------------------------------------------------------*/
 2743              		.loc 1 2144 1 is_stmt 0 view .LVU764
 2744 0008 7047     		bx	lr
 2745              	.L205:
 2746 000a 00BF     		.align	2
 2747              	.L204:
 2748 000c 00000000 		.word	.LANCHOR16
 2749              		.cfi_endproc
 2750              	.LFE21:
 2752              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2753              		.align	1
 2754              		.global	xTaskGetTickCount
 2755              		.syntax unified
 2756              		.thumb
 2757              		.thumb_func
 2758              		.fpu fpv5-d16
 2760              	xTaskGetTickCount:
 2761              	.LFB23:
2322:os/tasks.c    ****     TickType_t xTicks;
 2762              		.loc 1 2322 1 is_stmt 1 view -0
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 159


 2765              		@ frame_needed = 0, uses_anonymous_args = 0
 2766              		@ link register save eliminated.
2323:os/tasks.c    **** 
 2767              		.loc 1 2323 5 view .LVU766
2326:os/tasks.c    ****     {
 2768              		.loc 1 2326 35 view .LVU767
2328:os/tasks.c    ****     }
 2769              		.loc 1 2328 9 view .LVU768
2328:os/tasks.c    ****     }
 2770              		.loc 1 2328 16 is_stmt 0 view .LVU769
 2771 0000 014B     		ldr	r3, .L207
 2772 0002 1868     		ldr	r0, [r3]
 2773              	.LVL207:
2330:os/tasks.c    **** 
 2774              		.loc 1 2330 34 is_stmt 1 view .LVU770
2332:os/tasks.c    **** }
 2775              		.loc 1 2332 5 view .LVU771
2333:os/tasks.c    **** /*-----------------------------------------------------------*/
 2776              		.loc 1 2333 1 is_stmt 0 view .LVU772
 2777 0004 7047     		bx	lr
 2778              	.L208:
 2779 0006 00BF     		.align	2
 2780              	.L207:
 2781 0008 00000000 		.word	.LANCHOR15
 2782              		.cfi_endproc
 2783              	.LFE23:
 2785              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2786              		.align	1
 2787              		.global	xTaskGetTickCountFromISR
 2788              		.syntax unified
 2789              		.thumb
 2790              		.thumb_func
 2791              		.fpu fpv5-d16
 2793              	xTaskGetTickCountFromISR:
 2794              	.LFB24:
2337:os/tasks.c    ****     TickType_t xReturn;
 2795              		.loc 1 2337 1 is_stmt 1 view -0
 2796              		.cfi_startproc
 2797              		@ args = 0, pretend = 0, frame = 0
 2798              		@ frame_needed = 0, uses_anonymous_args = 0
 2799 0000 08B5     		push	{r3, lr}
 2800              	.LCFI27:
 2801              		.cfi_def_cfa_offset 8
 2802              		.cfi_offset 3, -8
 2803              		.cfi_offset 14, -4
2338:os/tasks.c    ****     UBaseType_t uxSavedInterruptStatus;
 2804              		.loc 1 2338 5 view .LVU774
2339:os/tasks.c    **** 
 2805              		.loc 1 2339 5 view .LVU775
2355:os/tasks.c    **** 
 2806              		.loc 1 2355 5 view .LVU776
 2807 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2808              	.LVL208:
2357:os/tasks.c    ****     {
 2809              		.loc 1 2357 5 view .LVU777
2359:os/tasks.c    ****     }
 2810              		.loc 1 2359 9 view .LVU778
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 160


2359:os/tasks.c    ****     }
 2811              		.loc 1 2359 17 is_stmt 0 view .LVU779
 2812 0006 014B     		ldr	r3, .L211
 2813 0008 1868     		ldr	r0, [r3]
 2814              	.LVL209:
2361:os/tasks.c    **** 
 2815              		.loc 1 2361 5 is_stmt 1 view .LVU780
2363:os/tasks.c    **** }
 2816              		.loc 1 2363 5 view .LVU781
2364:os/tasks.c    **** /*-----------------------------------------------------------*/
 2817              		.loc 1 2364 1 is_stmt 0 view .LVU782
 2818 000a 08BD     		pop	{r3, pc}
 2819              	.L212:
 2820              		.align	2
 2821              	.L211:
 2822 000c 00000000 		.word	.LANCHOR15
 2823              		.cfi_endproc
 2824              	.LFE24:
 2826              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2827              		.align	1
 2828              		.global	uxTaskGetNumberOfTasks
 2829              		.syntax unified
 2830              		.thumb
 2831              		.thumb_func
 2832              		.fpu fpv5-d16
 2834              	uxTaskGetNumberOfTasks:
 2835              	.LFB25:
2368:os/tasks.c    ****     /* A critical section is not required because the variables are of type
 2836              		.loc 1 2368 1 is_stmt 1 view -0
 2837              		.cfi_startproc
 2838              		@ args = 0, pretend = 0, frame = 0
 2839              		@ frame_needed = 0, uses_anonymous_args = 0
 2840              		@ link register save eliminated.
2371:os/tasks.c    **** }
 2841              		.loc 1 2371 5 view .LVU784
2371:os/tasks.c    **** }
 2842              		.loc 1 2371 12 is_stmt 0 view .LVU785
 2843 0000 014B     		ldr	r3, .L214
 2844 0002 1868     		ldr	r0, [r3]
2372:os/tasks.c    **** /*-----------------------------------------------------------*/
 2845              		.loc 1 2372 1 view .LVU786
 2846 0004 7047     		bx	lr
 2847              	.L215:
 2848 0006 00BF     		.align	2
 2849              	.L214:
 2850 0008 00000000 		.word	.LANCHOR9
 2851              		.cfi_endproc
 2852              	.LFE25:
 2854              		.section	.text.pcTaskGetName,"ax",%progbits
 2855              		.align	1
 2856              		.global	pcTaskGetName
 2857              		.syntax unified
 2858              		.thumb
 2859              		.thumb_func
 2860              		.fpu fpv5-d16
 2862              	pcTaskGetName:
 2863              	.LVL210:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 161


 2864              	.LFB26:
2376:os/tasks.c    ****     TCB_t * pxTCB;
 2865              		.loc 1 2376 1 is_stmt 1 view -0
 2866              		.cfi_startproc
 2867              		@ args = 0, pretend = 0, frame = 0
 2868              		@ frame_needed = 0, uses_anonymous_args = 0
 2869              		@ link register save eliminated.
2377:os/tasks.c    **** 
 2870              		.loc 1 2377 5 view .LVU788
2381:os/tasks.c    ****     configASSERT( pxTCB );
 2871              		.loc 1 2381 5 view .LVU789
2381:os/tasks.c    ****     configASSERT( pxTCB );
 2872              		.loc 1 2381 13 is_stmt 0 view .LVU790
 2873 0000 0346     		mov	r3, r0
 2874 0002 18B1     		cbz	r0, .L220
 2875              	.LVL211:
 2876              	.L217:
2382:os/tasks.c    ****     return &( pxTCB->pcTaskName[ 0 ] );
 2877              		.loc 1 2382 5 is_stmt 1 discriminator 4 view .LVU791
 2878 0004 2BB1     		cbz	r3, .L221
2382:os/tasks.c    ****     return &( pxTCB->pcTaskName[ 0 ] );
 2879              		.loc 1 2382 26 discriminator 2 view .LVU792
2383:os/tasks.c    **** }
 2880              		.loc 1 2383 5 discriminator 2 view .LVU793
2384:os/tasks.c    **** /*-----------------------------------------------------------*/
 2881              		.loc 1 2384 1 is_stmt 0 discriminator 2 view .LVU794
 2882 0006 03F13400 		add	r0, r3, #52
 2883 000a 7047     		bx	lr
 2884              	.LVL212:
 2885              	.L220:
2381:os/tasks.c    ****     configASSERT( pxTCB );
 2886              		.loc 1 2381 13 discriminator 1 view .LVU795
 2887 000c 064B     		ldr	r3, .L222
 2888 000e 1B68     		ldr	r3, [r3]
 2889              	.LVL213:
2381:os/tasks.c    ****     configASSERT( pxTCB );
 2890              		.loc 1 2381 13 discriminator 1 view .LVU796
 2891 0010 F8E7     		b	.L217
 2892              	.LVL214:
 2893              	.L221:
2382:os/tasks.c    ****     return &( pxTCB->pcTaskName[ 0 ] );
 2894              		.loc 1 2382 5 is_stmt 1 view .LVU797
 2895              	.LBB179:
 2896              	.LBI179:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 2897              		.loc 2 193 34 view .LVU798
 2898              	.LBB180:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2899              		.loc 2 195 9 view .LVU799
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2900              		.loc 2 197 9 view .LVU800
 2901              		.syntax unified
 2902              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2903 0012 4FF05003 			mov r3, #80												
 2904 0016 72B6     		cpsid i													
 2905 0018 83F31188 		msr basepri, r3											
 2906 001c BFF36F8F 		isb														
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 162


 2907 0020 BFF34F8F 		dsb														
 2908 0024 62B6     		cpsie i													
 2909              	
 2910              	@ 0 "" 2
 2911              	.LVL215:
 2912              		.thumb
 2913              		.syntax unified
 2914              	.L219:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2915              		.loc 2 197 9 is_stmt 0 view .LVU801
 2916              	.LBE180:
 2917              	.LBE179:
2382:os/tasks.c    ****     return &( pxTCB->pcTaskName[ 0 ] );
 2918              		.loc 1 2382 5 is_stmt 1 discriminator 1 view .LVU802
2382:os/tasks.c    ****     return &( pxTCB->pcTaskName[ 0 ] );
 2919              		.loc 1 2382 5 discriminator 1 view .LVU803
2382:os/tasks.c    ****     return &( pxTCB->pcTaskName[ 0 ] );
 2920              		.loc 1 2382 5 discriminator 1 view .LVU804
 2921 0026 FEE7     		b	.L219
 2922              	.L223:
 2923              		.align	2
 2924              	.L222:
 2925 0028 00000000 		.word	.LANCHOR10
 2926              		.cfi_endproc
 2927              	.LFE26:
 2929              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2930              		.align	1
 2931              		.global	xTaskIncrementTick
 2932              		.syntax unified
 2933              		.thumb
 2934              		.thumb_func
 2935              		.fpu fpv5-d16
 2937              	xTaskIncrementTick:
 2938              	.LFB29:
2726:os/tasks.c    ****     TCB_t * pxTCB;
 2939              		.loc 1 2726 1 view -0
 2940              		.cfi_startproc
 2941              		@ args = 0, pretend = 0, frame = 0
 2942              		@ frame_needed = 0, uses_anonymous_args = 0
 2943 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2944              	.LCFI28:
 2945              		.cfi_def_cfa_offset 24
 2946              		.cfi_offset 3, -24
 2947              		.cfi_offset 4, -20
 2948              		.cfi_offset 5, -16
 2949              		.cfi_offset 6, -12
 2950              		.cfi_offset 7, -8
 2951              		.cfi_offset 14, -4
2727:os/tasks.c    ****     TickType_t xItemValue;
 2952              		.loc 1 2727 5 view .LVU806
2728:os/tasks.c    ****     BaseType_t xSwitchRequired = pdFALSE;
 2953              		.loc 1 2728 5 view .LVU807
2729:os/tasks.c    **** 
 2954              		.loc 1 2729 5 view .LVU808
 2955              	.LVL216:
2734:os/tasks.c    **** 
 2956              		.loc 1 2734 43 view .LVU809
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 163


2736:os/tasks.c    ****     {
 2957              		.loc 1 2736 5 view .LVU810
2736:os/tasks.c    ****     {
 2958              		.loc 1 2736 30 is_stmt 0 view .LVU811
 2959 0002 3C4B     		ldr	r3, .L246
 2960 0004 1B68     		ldr	r3, [r3]
2736:os/tasks.c    ****     {
 2961              		.loc 1 2736 7 view .LVU812
 2962 0006 002B     		cmp	r3, #0
 2963 0008 6CD1     		bne	.L225
 2964              	.LBB181:
2740:os/tasks.c    **** 
 2965              		.loc 1 2740 9 is_stmt 1 view .LVU813
2740:os/tasks.c    **** 
 2966              		.loc 1 2740 55 is_stmt 0 view .LVU814
 2967 000a 3B4B     		ldr	r3, .L246+4
 2968 000c 1D68     		ldr	r5, [r3]
2740:os/tasks.c    **** 
 2969              		.loc 1 2740 26 view .LVU815
 2970 000e 0135     		adds	r5, r5, #1
 2971              	.LVL217:
2744:os/tasks.c    **** 
 2972              		.loc 1 2744 9 is_stmt 1 view .LVU816
2744:os/tasks.c    **** 
 2973              		.loc 1 2744 20 is_stmt 0 view .LVU817
 2974 0010 1D60     		str	r5, [r3]
2746:os/tasks.c    ****         {
 2975              		.loc 1 2746 9 is_stmt 1 view .LVU818
2746:os/tasks.c    ****         {
 2976              		.loc 1 2746 11 is_stmt 0 view .LVU819
 2977 0012 D5B9     		cbnz	r5, .L226
 2978              	.LBB182:
2748:os/tasks.c    ****         }
 2979              		.loc 1 2748 13 is_stmt 1 view .LVU820
2748:os/tasks.c    ****         }
 2980              		.loc 1 2748 13 view .LVU821
 2981 0014 394B     		ldr	r3, .L246+8
 2982 0016 1B68     		ldr	r3, [r3]
 2983 0018 1B68     		ldr	r3, [r3]
 2984 001a 53B1     		cbz	r3, .L227
2748:os/tasks.c    ****         }
 2985              		.loc 1 2748 13 view .LVU822
 2986              	.LBB183:
 2987              	.LBI183:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 2988              		.loc 2 193 34 view .LVU823
 2989              	.LBB184:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 2990              		.loc 2 195 9 view .LVU824
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 2991              		.loc 2 197 9 view .LVU825
 2992              		.syntax unified
 2993              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 2994 001c 4FF05003 			mov r3, #80												
 2995 0020 72B6     		cpsid i													
 2996 0022 83F31188 		msr basepri, r3											
 2997 0026 BFF36F8F 		isb														
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 164


 2998 002a BFF34F8F 		dsb														
 2999 002e 62B6     		cpsie i													
 3000              	
 3001              	@ 0 "" 2
 3002              	.LVL218:
 3003              		.thumb
 3004              		.syntax unified
 3005              	.L228:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3006              		.loc 2 197 9 is_stmt 0 view .LVU826
 3007              	.LBE184:
 3008              	.LBE183:
2748:os/tasks.c    ****         }
 3009              		.loc 1 2748 13 is_stmt 1 discriminator 1 view .LVU827
2748:os/tasks.c    ****         }
 3010              		.loc 1 2748 13 discriminator 1 view .LVU828
2748:os/tasks.c    ****         }
 3011              		.loc 1 2748 13 discriminator 1 view .LVU829
 3012 0030 FEE7     		b	.L228
 3013              	.L227:
2748:os/tasks.c    ****         }
 3014              		.loc 1 2748 13 discriminator 2 view .LVU830
2748:os/tasks.c    ****         }
 3015              		.loc 1 2748 13 discriminator 2 view .LVU831
 3016 0032 324A     		ldr	r2, .L246+8
 3017 0034 1168     		ldr	r1, [r2]
 3018              	.LVL219:
2748:os/tasks.c    ****         }
 3019              		.loc 1 2748 13 discriminator 2 view .LVU832
 3020 0036 324B     		ldr	r3, .L246+12
 3021 0038 1868     		ldr	r0, [r3]
 3022 003a 1060     		str	r0, [r2]
2748:os/tasks.c    ****         }
 3023              		.loc 1 2748 13 discriminator 2 view .LVU833
 3024 003c 1960     		str	r1, [r3]
2748:os/tasks.c    ****         }
 3025              		.loc 1 2748 13 discriminator 2 view .LVU834
 3026 003e 314A     		ldr	r2, .L246+16
 3027 0040 1368     		ldr	r3, [r2]
 3028 0042 0133     		adds	r3, r3, #1
 3029 0044 1360     		str	r3, [r2]
2748:os/tasks.c    ****         }
 3030              		.loc 1 2748 13 discriminator 2 view .LVU835
 3031 0046 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3032              	.LVL220:
2748:os/tasks.c    ****         }
 3033              		.loc 1 2748 13 is_stmt 0 discriminator 2 view .LVU836
 3034              	.LBE182:
2748:os/tasks.c    ****         }
 3035              		.loc 1 2748 39 is_stmt 1 discriminator 2 view .LVU837
 3036              	.L226:
2752:os/tasks.c    ****         }
 3037              		.loc 1 2752 37 view .LVU838
2759:os/tasks.c    ****         {
 3038              		.loc 1 2759 9 view .LVU839
2759:os/tasks.c    ****         {
 3039              		.loc 1 2759 29 is_stmt 0 view .LVU840
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 165


 3040 004a 2F4B     		ldr	r3, .L246+20
 3041 004c 1B68     		ldr	r3, [r3]
2759:os/tasks.c    ****         {
 3042              		.loc 1 2759 11 view .LVU841
 3043 004e AB42     		cmp	r3, r5
 3044 0050 11D9     		bls	.L239
 3045              	.LBE181:
2729:os/tasks.c    **** 
 3046              		.loc 1 2729 16 view .LVU842
 3047 0052 0024     		movs	r4, #0
 3048              	.LVL221:
 3049              	.L230:
 3050              	.LBB185:
2842:os/tasks.c    ****                 {
 3051              		.loc 1 2842 17 is_stmt 1 view .LVU843
2842:os/tasks.c    ****                 {
 3052              		.loc 1 2842 21 is_stmt 0 view .LVU844
 3053 0054 2D4B     		ldr	r3, .L246+24
 3054 0056 1B68     		ldr	r3, [r3]
 3055 0058 DB6A     		ldr	r3, [r3, #44]
 3056 005a 03EB8303 		add	r3, r3, r3, lsl #2
 3057 005e 9A00     		lsls	r2, r3, #2
 3058 0060 2B4B     		ldr	r3, .L246+28
 3059 0062 9B58     		ldr	r3, [r3, r2]
2842:os/tasks.c    ****                 {
 3060              		.loc 1 2842 19 view .LVU845
 3061 0064 012B     		cmp	r3, #1
 3062 0066 00D9     		bls	.L237
2844:os/tasks.c    ****                 }
 3063              		.loc 1 2844 37 view .LVU846
 3064 0068 0124     		movs	r4, #1
 3065              	.LVL222:
 3066              	.L237:
2848:os/tasks.c    ****                 }
 3067              		.loc 1 2848 45 is_stmt 1 view .LVU847
2870:os/tasks.c    ****                 {
 3068              		.loc 1 2870 17 view .LVU848
2870:os/tasks.c    ****                 {
 3069              		.loc 1 2870 35 is_stmt 0 view .LVU849
 3070 006a 2A4B     		ldr	r3, .L246+32
 3071 006c 1B68     		ldr	r3, [r3]
2870:os/tasks.c    ****                 {
 3072              		.loc 1 2870 19 view .LVU850
 3073 006e 002B     		cmp	r3, #0
 3074 0070 3DD0     		beq	.L224
2872:os/tasks.c    ****                 }
 3075              		.loc 1 2872 37 view .LVU851
 3076 0072 0124     		movs	r4, #1
 3077              	.LVL223:
2872:os/tasks.c    ****                 }
 3078              		.loc 1 2872 37 view .LVU852
 3079              	.LBE185:
2894:os/tasks.c    **** }
 3080              		.loc 1 2894 5 is_stmt 1 view .LVU853
2894:os/tasks.c    **** }
 3081              		.loc 1 2894 12 is_stmt 0 view .LVU854
 3082 0074 3BE0     		b	.L224
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 166


 3083              	.LVL224:
 3084              	.L239:
2729:os/tasks.c    **** 
 3085              		.loc 1 2729 16 view .LVU855
 3086 0076 0024     		movs	r4, #0
 3087 0078 16E0     		b	.L229
 3088              	.LVL225:
 3089              	.L244:
 3090              	.LBB186:
2770:os/tasks.c    ****                     break;
 3091              		.loc 1 2770 21 is_stmt 1 view .LVU856
2770:os/tasks.c    ****                     break;
 3092              		.loc 1 2770 42 is_stmt 0 view .LVU857
 3093 007a 234B     		ldr	r3, .L246+20
 3094 007c 4FF0FF32 		mov	r2, #-1
 3095 0080 1A60     		str	r2, [r3]
2771:os/tasks.c    ****                 }
 3096              		.loc 1 2771 21 is_stmt 1 view .LVU858
 3097 0082 E7E7     		b	.L230
 3098              	.LVL226:
 3099              	.L245:
2789:os/tasks.c    ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 3100              		.loc 1 2789 25 view .LVU859
2789:os/tasks.c    ****                         break; /*lint !e9011 Code structure here is deemed easier to understand wit
 3101              		.loc 1 2789 46 is_stmt 0 view .LVU860
 3102 0084 204A     		ldr	r2, .L246+20
 3103 0086 1360     		str	r3, [r2]
2790:os/tasks.c    ****                     }
 3104              		.loc 1 2790 25 is_stmt 1 view .LVU861
 3105 0088 E4E7     		b	.L230
 3106              	.LVL227:
 3107              	.L234:
2813:os/tasks.c    **** 
 3108              		.loc 1 2813 21 discriminator 3 view .LVU862
2813:os/tasks.c    **** 
 3109              		.loc 1 2813 21 discriminator 3 view .LVU863
 3110 008a 03EB8303 		add	r3, r3, r3, lsl #2
 3111 008e 9A00     		lsls	r2, r3, #2
 3112 0090 3946     		mov	r1, r7
 3113 0092 1F48     		ldr	r0, .L246+28
 3114 0094 1044     		add	r0, r0, r2
 3115 0096 FFF7FEFF 		bl	vListInsertEnd
 3116              	.LVL228:
2813:os/tasks.c    **** 
 3117              		.loc 1 2813 51 discriminator 3 view .LVU864
2823:os/tasks.c    ****                             {
 3118              		.loc 1 2823 29 discriminator 3 view .LVU865
2823:os/tasks.c    ****                             {
 3119              		.loc 1 2823 38 is_stmt 0 discriminator 3 view .LVU866
 3120 009a F26A     		ldr	r2, [r6, #44]
2823:os/tasks.c    ****                             {
 3121              		.loc 1 2823 66 discriminator 3 view .LVU867
 3122 009c 1B4B     		ldr	r3, .L246+24
 3123 009e 1B68     		ldr	r3, [r3]
 3124 00a0 DB6A     		ldr	r3, [r3, #44]
2823:os/tasks.c    ****                             {
 3125              		.loc 1 2823 31 discriminator 3 view .LVU868
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 167


 3126 00a2 9A42     		cmp	r2, r3
 3127 00a4 00D3     		bcc	.L229
2825:os/tasks.c    ****                             }
 3128              		.loc 1 2825 49 view .LVU869
 3129 00a6 0124     		movs	r4, #1
 3130              	.LVL229:
 3131              	.L229:
2761:os/tasks.c    ****             {
 3132              		.loc 1 2761 13 is_stmt 1 view .LVU870
2763:os/tasks.c    ****                 {
 3133              		.loc 1 2763 17 view .LVU871
2763:os/tasks.c    ****                 {
 3134              		.loc 1 2763 21 is_stmt 0 view .LVU872
 3135 00a8 144B     		ldr	r3, .L246+8
 3136 00aa 1B68     		ldr	r3, [r3]
 3137 00ac 1B68     		ldr	r3, [r3]
2763:os/tasks.c    ****                 {
 3138              		.loc 1 2763 19 view .LVU873
 3139 00ae 002B     		cmp	r3, #0
 3140 00b0 E3D0     		beq	.L244
2779:os/tasks.c    ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3141              		.loc 1 2779 21 is_stmt 1 view .LVU874
2779:os/tasks.c    ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3142              		.loc 1 2779 29 is_stmt 0 view .LVU875
 3143 00b2 124B     		ldr	r3, .L246+8
 3144 00b4 1B68     		ldr	r3, [r3]
 3145 00b6 DB68     		ldr	r3, [r3, #12]
2779:os/tasks.c    ****                     xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3146              		.loc 1 2779 27 view .LVU876
 3147 00b8 DE68     		ldr	r6, [r3, #12]
 3148              	.LVL230:
2780:os/tasks.c    **** 
 3149              		.loc 1 2780 21 is_stmt 1 view .LVU877
2780:os/tasks.c    **** 
 3150              		.loc 1 2780 32 is_stmt 0 view .LVU878
 3151 00ba 7368     		ldr	r3, [r6, #4]
 3152              	.LVL231:
2782:os/tasks.c    ****                     {
 3153              		.loc 1 2782 21 is_stmt 1 view .LVU879
2782:os/tasks.c    ****                     {
 3154              		.loc 1 2782 23 is_stmt 0 view .LVU880
 3155 00bc 9D42     		cmp	r5, r3
 3156 00be E1D3     		bcc	.L245
2794:os/tasks.c    ****                     }
 3157              		.loc 1 2794 49 is_stmt 1 view .LVU881
2798:os/tasks.c    **** 
 3158              		.loc 1 2798 21 view .LVU882
2798:os/tasks.c    **** 
 3159              		.loc 1 2798 30 is_stmt 0 view .LVU883
 3160 00c0 371D     		adds	r7, r6, #4
 3161 00c2 3846     		mov	r0, r7
 3162 00c4 FFF7FEFF 		bl	uxListRemove
 3163              	.LVL232:
2802:os/tasks.c    ****                     {
 3164              		.loc 1 2802 21 is_stmt 1 view .LVU884
2802:os/tasks.c    ****                     {
 3165              		.loc 1 2802 25 is_stmt 0 view .LVU885
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 168


 3166 00c8 B36A     		ldr	r3, [r6, #40]
2802:os/tasks.c    ****                     {
 3167              		.loc 1 2802 23 view .LVU886
 3168 00ca 1BB1     		cbz	r3, .L233
2804:os/tasks.c    ****                     }
 3169              		.loc 1 2804 25 is_stmt 1 view .LVU887
2804:os/tasks.c    ****                     }
 3170              		.loc 1 2804 34 is_stmt 0 view .LVU888
 3171 00cc 06F11800 		add	r0, r6, #24
 3172 00d0 FFF7FEFF 		bl	uxListRemove
 3173              	.LVL233:
 3174              	.L233:
2808:os/tasks.c    ****                     }
 3175              		.loc 1 2808 49 is_stmt 1 view .LVU889
2813:os/tasks.c    **** 
 3176              		.loc 1 2813 21 view .LVU890
2813:os/tasks.c    **** 
 3177              		.loc 1 2813 21 view .LVU891
 3178 00d4 F36A     		ldr	r3, [r6, #44]
 3179 00d6 104A     		ldr	r2, .L246+36
 3180 00d8 1268     		ldr	r2, [r2]
 3181 00da 9342     		cmp	r3, r2
 3182 00dc D5D9     		bls	.L234
2813:os/tasks.c    **** 
 3183              		.loc 1 2813 21 discriminator 1 view .LVU892
 3184 00de 0E4A     		ldr	r2, .L246+36
 3185 00e0 1360     		str	r3, [r2]
 3186 00e2 D2E7     		b	.L234
 3187              	.LVL234:
 3188              	.L225:
2813:os/tasks.c    **** 
 3189              		.loc 1 2813 21 is_stmt 0 discriminator 1 view .LVU893
 3190              	.LBE186:
2883:os/tasks.c    **** 
 3191              		.loc 1 2883 9 is_stmt 1 view .LVU894
 3192 00e4 0D4A     		ldr	r2, .L246+40
 3193 00e6 1368     		ldr	r3, [r2]
 3194 00e8 0133     		adds	r3, r3, #1
 3195 00ea 1360     		str	r3, [r2]
2729:os/tasks.c    **** 
 3196              		.loc 1 2729 16 is_stmt 0 view .LVU895
 3197 00ec 0024     		movs	r4, #0
 3198              	.LVL235:
 3199              	.L224:
2895:os/tasks.c    **** /*-----------------------------------------------------------*/
 3200              		.loc 1 2895 1 view .LVU896
 3201 00ee 2046     		mov	r0, r4
 3202 00f0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3203              	.L247:
 3204 00f2 00BF     		.align	2
 3205              	.L246:
 3206 00f4 00000000 		.word	.LANCHOR16
 3207 00f8 00000000 		.word	.LANCHOR15
 3208 00fc 00000000 		.word	.LANCHOR2
 3209 0100 00000000 		.word	.LANCHOR8
 3210 0104 00000000 		.word	.LANCHOR19
 3211 0108 00000000 		.word	.LANCHOR3
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 169


 3212 010c 00000000 		.word	.LANCHOR10
 3213 0110 00000000 		.word	.LANCHOR4
 3214 0114 00000000 		.word	.LANCHOR17
 3215 0118 00000000 		.word	.LANCHOR13
 3216 011c 00000000 		.word	.LANCHOR20
 3217              		.cfi_endproc
 3218              	.LFE29:
 3220              		.section	.text.xTaskResumeAll,"ax",%progbits
 3221              		.align	1
 3222              		.global	xTaskResumeAll
 3223              		.syntax unified
 3224              		.thumb
 3225              		.thumb_func
 3226              		.fpu fpv5-d16
 3228              	xTaskResumeAll:
 3229              	.LFB22:
2211:os/tasks.c    ****     TCB_t * pxTCB = NULL;
 3230              		.loc 1 2211 1 is_stmt 1 view -0
 3231              		.cfi_startproc
 3232              		@ args = 0, pretend = 0, frame = 0
 3233              		@ frame_needed = 0, uses_anonymous_args = 0
 3234 0000 38B5     		push	{r3, r4, r5, lr}
 3235              	.LCFI29:
 3236              		.cfi_def_cfa_offset 16
 3237              		.cfi_offset 3, -16
 3238              		.cfi_offset 4, -12
 3239              		.cfi_offset 5, -8
 3240              		.cfi_offset 14, -4
2212:os/tasks.c    ****     BaseType_t xAlreadyYielded = pdFALSE;
 3241              		.loc 1 2212 5 view .LVU898
 3242              	.LVL236:
2213:os/tasks.c    **** 
 3243              		.loc 1 2213 5 view .LVU899
2217:os/tasks.c    **** 
 3244              		.loc 1 2217 5 view .LVU900
 3245 0002 354B     		ldr	r3, .L265
 3246 0004 1B68     		ldr	r3, [r3]
 3247 0006 53B9     		cbnz	r3, .L249
2217:os/tasks.c    **** 
 3248              		.loc 1 2217 5 view .LVU901
 3249              	.LBB187:
 3250              	.LBI187:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 3251              		.loc 2 193 34 view .LVU902
 3252              	.LBB188:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3253              		.loc 2 195 9 view .LVU903
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3254              		.loc 2 197 9 view .LVU904
 3255              		.syntax unified
 3256              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3257 0008 4FF05003 			mov r3, #80												
 3258 000c 72B6     		cpsid i													
 3259 000e 83F31188 		msr basepri, r3											
 3260 0012 BFF36F8F 		isb														
 3261 0016 BFF34F8F 		dsb														
 3262 001a 62B6     		cpsie i													
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 170


 3263              	
 3264              	@ 0 "" 2
 3265              	.LVL237:
 3266              		.thumb
 3267              		.syntax unified
 3268              	.L250:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3269              		.loc 2 197 9 is_stmt 0 view .LVU905
 3270              	.LBE188:
 3271              	.LBE187:
2217:os/tasks.c    **** 
 3272              		.loc 1 2217 5 is_stmt 1 discriminator 1 view .LVU906
2217:os/tasks.c    **** 
 3273              		.loc 1 2217 5 discriminator 1 view .LVU907
2217:os/tasks.c    **** 
 3274              		.loc 1 2217 5 discriminator 1 view .LVU908
 3275 001c FEE7     		b	.L250
 3276              	.L249:
2217:os/tasks.c    **** 
 3277              		.loc 1 2217 41 discriminator 2 view .LVU909
2224:os/tasks.c    ****     {
 3278              		.loc 1 2224 5 discriminator 2 view .LVU910
 3279 001e FFF7FEFF 		bl	vPortEnterCritical
 3280              	.LVL238:
2226:os/tasks.c    **** 
 3281              		.loc 1 2226 9 discriminator 2 view .LVU911
 3282 0022 2D4B     		ldr	r3, .L265
 3283 0024 1A68     		ldr	r2, [r3]
 3284 0026 013A     		subs	r2, r2, #1
 3285 0028 1A60     		str	r2, [r3]
2228:os/tasks.c    ****         {
 3286              		.loc 1 2228 9 discriminator 2 view .LVU912
2228:os/tasks.c    ****         {
 3287              		.loc 1 2228 34 is_stmt 0 discriminator 2 view .LVU913
 3288 002a 1B68     		ldr	r3, [r3]
2228:os/tasks.c    ****         {
 3289              		.loc 1 2228 11 discriminator 2 view .LVU914
 3290 002c 002B     		cmp	r3, #0
 3291 002e 4DD1     		bne	.L260
2230:os/tasks.c    ****             {
 3292              		.loc 1 2230 13 is_stmt 1 view .LVU915
2230:os/tasks.c    ****             {
 3293              		.loc 1 2230 40 is_stmt 0 view .LVU916
 3294 0030 2A4B     		ldr	r3, .L265+4
 3295 0032 1B68     		ldr	r3, [r3]
2230:os/tasks.c    ****             {
 3296              		.loc 1 2230 15 view .LVU917
 3297 0034 0BB9     		cbnz	r3, .L261
2213:os/tasks.c    **** 
 3298              		.loc 1 2213 16 view .LVU918
 3299 0036 0024     		movs	r4, #0
 3300 0038 49E0     		b	.L251
 3301              	.L261:
2212:os/tasks.c    ****     BaseType_t xAlreadyYielded = pdFALSE;
 3302              		.loc 1 2212 13 view .LVU919
 3303 003a 0024     		movs	r4, #0
 3304              	.LVL239:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 171


 3305              	.L252:
2249:os/tasks.c    ****                     }
 3306              		.loc 1 2249 49 is_stmt 1 view .LVU920
2234:os/tasks.c    ****                 {
 3307              		.loc 1 2234 22 view .LVU921
2234:os/tasks.c    ****                 {
 3308              		.loc 1 2234 24 is_stmt 0 view .LVU922
 3309 003c 284B     		ldr	r3, .L265+8
 3310 003e 1B68     		ldr	r3, [r3]
2234:os/tasks.c    ****                 {
 3311              		.loc 1 2234 22 view .LVU923
 3312 0040 1BB3     		cbz	r3, .L263
2236:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3313              		.loc 1 2236 21 is_stmt 1 view .LVU924
2236:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3314              		.loc 1 2236 29 is_stmt 0 view .LVU925
 3315 0042 274B     		ldr	r3, .L265+8
 3316 0044 DB68     		ldr	r3, [r3, #12]
2236:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3317              		.loc 1 2236 27 view .LVU926
 3318 0046 DC68     		ldr	r4, [r3, #12]
 3319              	.LVL240:
2237:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3320              		.loc 1 2237 21 is_stmt 1 view .LVU927
2237:os/tasks.c    ****                     ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3321              		.loc 1 2237 30 is_stmt 0 view .LVU928
 3322 0048 04F11800 		add	r0, r4, #24
 3323 004c FFF7FEFF 		bl	uxListRemove
 3324              	.LVL241:
2238:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 3325              		.loc 1 2238 21 is_stmt 1 view .LVU929
2238:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 3326              		.loc 1 2238 30 is_stmt 0 view .LVU930
 3327 0050 251D     		adds	r5, r4, #4
 3328 0052 2846     		mov	r0, r5
 3329 0054 FFF7FEFF 		bl	uxListRemove
 3330              	.LVL242:
2239:os/tasks.c    **** 
 3331              		.loc 1 2239 21 is_stmt 1 view .LVU931
2239:os/tasks.c    **** 
 3332              		.loc 1 2239 21 view .LVU932
 3333 0058 E06A     		ldr	r0, [r4, #44]
 3334 005a 224B     		ldr	r3, .L265+12
 3335 005c 1B68     		ldr	r3, [r3]
 3336 005e 9842     		cmp	r0, r3
 3337 0060 01D9     		bls	.L253
2239:os/tasks.c    **** 
 3338              		.loc 1 2239 21 discriminator 1 view .LVU933
 3339 0062 204B     		ldr	r3, .L265+12
 3340 0064 1860     		str	r0, [r3]
 3341              	.L253:
2239:os/tasks.c    **** 
 3342              		.loc 1 2239 21 discriminator 3 view .LVU934
2239:os/tasks.c    **** 
 3343              		.loc 1 2239 21 discriminator 3 view .LVU935
 3344 0066 00EB8000 		add	r0, r0, r0, lsl #2
 3345 006a 2946     		mov	r1, r5
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 172


 3346 006c 1E4B     		ldr	r3, .L265+16
 3347 006e 03EB8000 		add	r0, r3, r0, lsl #2
 3348 0072 FFF7FEFF 		bl	vListInsertEnd
 3349              	.LVL243:
2239:os/tasks.c    **** 
 3350              		.loc 1 2239 51 discriminator 3 view .LVU936
2243:os/tasks.c    ****                     {
 3351              		.loc 1 2243 21 discriminator 3 view .LVU937
2243:os/tasks.c    ****                     {
 3352              		.loc 1 2243 30 is_stmt 0 discriminator 3 view .LVU938
 3353 0076 E26A     		ldr	r2, [r4, #44]
2243:os/tasks.c    ****                     {
 3354              		.loc 1 2243 58 discriminator 3 view .LVU939
 3355 0078 1C4B     		ldr	r3, .L265+20
 3356 007a 1B68     		ldr	r3, [r3]
 3357 007c DB6A     		ldr	r3, [r3, #44]
2243:os/tasks.c    ****                     {
 3358              		.loc 1 2243 23 discriminator 3 view .LVU940
 3359 007e 9A42     		cmp	r2, r3
 3360 0080 DCD3     		bcc	.L252
2245:os/tasks.c    ****                     }
 3361              		.loc 1 2245 25 is_stmt 1 view .LVU941
2245:os/tasks.c    ****                     }
 3362              		.loc 1 2245 39 is_stmt 0 view .LVU942
 3363 0082 1B4B     		ldr	r3, .L265+24
 3364 0084 0122     		movs	r2, #1
 3365 0086 1A60     		str	r2, [r3]
 3366 0088 D8E7     		b	.L252
 3367              	.L263:
2253:os/tasks.c    ****                 {
 3368              		.loc 1 2253 17 is_stmt 1 view .LVU943
2253:os/tasks.c    ****                 {
 3369              		.loc 1 2253 19 is_stmt 0 view .LVU944
 3370 008a 0CB1     		cbz	r4, .L256
2261:os/tasks.c    ****                 }
 3371              		.loc 1 2261 21 is_stmt 1 view .LVU945
 3372 008c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3373              	.LVL244:
 3374              	.L256:
 3375              	.LBB189:
2269:os/tasks.c    **** 
 3376              		.loc 1 2269 21 view .LVU946
2269:os/tasks.c    **** 
 3377              		.loc 1 2269 32 is_stmt 0 view .LVU947
 3378 0090 184B     		ldr	r3, .L265+28
 3379 0092 1C68     		ldr	r4, [r3]
 3380              	.LVL245:
2271:os/tasks.c    ****                     {
 3381              		.loc 1 2271 21 is_stmt 1 view .LVU948
2271:os/tasks.c    ****                     {
 3382              		.loc 1 2271 23 is_stmt 0 view .LVU949
 3383 0094 74B9     		cbnz	r4, .L259
 3384              	.L257:
2291:os/tasks.c    ****                     }
 3385              		.loc 1 2291 49 is_stmt 1 view .LVU950
 3386              	.LBE189:
2295:os/tasks.c    ****                 {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 173


 3387              		.loc 1 2295 17 view .LVU951
2295:os/tasks.c    ****                 {
 3388              		.loc 1 2295 35 is_stmt 0 view .LVU952
 3389 0096 164B     		ldr	r3, .L265+24
 3390 0098 1C68     		ldr	r4, [r3]
 3391              	.LVL246:
2295:os/tasks.c    ****                 {
 3392              		.loc 1 2295 19 view .LVU953
 3393 009a C4B1     		cbz	r4, .L251
2299:os/tasks.c    ****                         }
 3394              		.loc 1 2299 29 is_stmt 1 view .LVU954
 3395              	.LVL247:
2302:os/tasks.c    ****                 }
 3396              		.loc 1 2302 21 view .LVU955
 3397 009c 164B     		ldr	r3, .L265+32
 3398 009e 4FF08052 		mov	r2, #268435456
 3399 00a2 1A60     		str	r2, [r3]
2302:os/tasks.c    ****                 }
 3400              		.loc 1 2302 21 view .LVU956
 3401              		.syntax unified
 3402              	@ 2302 "os/tasks.c" 1
 3403 00a4 BFF34F8F 		dsb
 3404              	@ 0 "" 2
2302:os/tasks.c    ****                 }
 3405              		.loc 1 2302 21 view .LVU957
 3406              	@ 2302 "os/tasks.c" 1
 3407 00a8 BFF36F8F 		isb
 3408              	@ 0 "" 2
2302:os/tasks.c    ****                 }
 3409              		.loc 1 2302 52 view .LVU958
2299:os/tasks.c    ****                         }
 3410              		.loc 1 2299 45 is_stmt 0 view .LVU959
 3411              		.thumb
 3412              		.syntax unified
 3413 00ac 0124     		movs	r4, #1
 3414 00ae 0EE0     		b	.L251
 3415              	.LVL248:
 3416              	.L258:
 3417              	.LBB190:
2281:os/tasks.c    ****                             }
 3418              		.loc 1 2281 57 is_stmt 1 view .LVU960
2284:os/tasks.c    ****                         } while( xPendedCounts > ( TickType_t ) 0U );
 3419              		.loc 1 2284 29 view .LVU961
2285:os/tasks.c    **** 
 3420              		.loc 1 2285 32 view .LVU962
2285:os/tasks.c    **** 
 3421              		.loc 1 2285 25 is_stmt 0 view .LVU963
 3422 00b0 013C     		subs	r4, r4, #1
 3423              	.LVL249:
2285:os/tasks.c    **** 
 3424              		.loc 1 2285 25 view .LVU964
 3425 00b2 07D0     		beq	.L264
 3426              	.L259:
2273:os/tasks.c    ****                         {
 3427              		.loc 1 2273 25 is_stmt 1 view .LVU965
2275:os/tasks.c    ****                             {
 3428              		.loc 1 2275 29 view .LVU966
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 174


2275:os/tasks.c    ****                             {
 3429              		.loc 1 2275 33 is_stmt 0 view .LVU967
 3430 00b4 FFF7FEFF 		bl	xTaskIncrementTick
 3431              	.LVL250:
2275:os/tasks.c    ****                             {
 3432              		.loc 1 2275 31 view .LVU968
 3433 00b8 0028     		cmp	r0, #0
 3434 00ba F9D0     		beq	.L258
2277:os/tasks.c    ****                             }
 3435              		.loc 1 2277 33 is_stmt 1 view .LVU969
2277:os/tasks.c    ****                             }
 3436              		.loc 1 2277 47 is_stmt 0 view .LVU970
 3437 00bc 0C4B     		ldr	r3, .L265+24
 3438 00be 0122     		movs	r2, #1
 3439 00c0 1A60     		str	r2, [r3]
 3440 00c2 F5E7     		b	.L258
 3441              	.L264:
2287:os/tasks.c    ****                     }
 3442              		.loc 1 2287 25 is_stmt 1 view .LVU971
2287:os/tasks.c    ****                     }
 3443              		.loc 1 2287 38 is_stmt 0 view .LVU972
 3444 00c4 0B4B     		ldr	r3, .L265+28
 3445 00c6 0022     		movs	r2, #0
 3446 00c8 1A60     		str	r2, [r3]
 3447 00ca E4E7     		b	.L257
 3448              	.LVL251:
 3449              	.L260:
2287:os/tasks.c    ****                     }
 3450              		.loc 1 2287 38 view .LVU973
 3451              	.LBE190:
2213:os/tasks.c    **** 
 3452              		.loc 1 2213 16 view .LVU974
 3453 00cc 0024     		movs	r4, #0
 3454              	.LVL252:
 3455              	.L251:
2312:os/tasks.c    ****         }
 3456              		.loc 1 2312 37 is_stmt 1 view .LVU975
2315:os/tasks.c    **** 
 3457              		.loc 1 2315 5 view .LVU976
 3458 00ce FFF7FEFF 		bl	vPortExitCritical
 3459              	.LVL253:
2317:os/tasks.c    **** }
 3460              		.loc 1 2317 5 view .LVU977
2318:os/tasks.c    **** /*-----------------------------------------------------------*/
 3461              		.loc 1 2318 1 is_stmt 0 view .LVU978
 3462 00d2 2046     		mov	r0, r4
 3463 00d4 38BD     		pop	{r3, r4, r5, pc}
 3464              	.LVL254:
 3465              	.L266:
2318:os/tasks.c    **** /*-----------------------------------------------------------*/
 3466              		.loc 1 2318 1 view .LVU979
 3467 00d6 00BF     		.align	2
 3468              	.L265:
 3469 00d8 00000000 		.word	.LANCHOR16
 3470 00dc 00000000 		.word	.LANCHOR9
 3471 00e0 00000000 		.word	.LANCHOR1
 3472 00e4 00000000 		.word	.LANCHOR13
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 175


 3473 00e8 00000000 		.word	.LANCHOR4
 3474 00ec 00000000 		.word	.LANCHOR10
 3475 00f0 00000000 		.word	.LANCHOR17
 3476 00f4 00000000 		.word	.LANCHOR20
 3477 00f8 04ED00E0 		.word	-536810236
 3478              		.cfi_endproc
 3479              	.LFE22:
 3481              		.section	.text.xTaskDelayUntil,"ax",%progbits
 3482              		.align	1
 3483              		.global	xTaskDelayUntil
 3484              		.syntax unified
 3485              		.thumb
 3486              		.thumb_func
 3487              		.fpu fpv5-d16
 3489              	xTaskDelayUntil:
 3490              	.LVL255:
 3491              	.LFB9:
1251:os/tasks.c    ****         TickType_t xTimeToWake;
 3492              		.loc 1 1251 5 is_stmt 1 view -0
 3493              		.cfi_startproc
 3494              		@ args = 0, pretend = 0, frame = 0
 3495              		@ frame_needed = 0, uses_anonymous_args = 0
1251:os/tasks.c    ****         TickType_t xTimeToWake;
 3496              		.loc 1 1251 5 is_stmt 0 view .LVU981
 3497 0000 38B5     		push	{r3, r4, r5, lr}
 3498              	.LCFI30:
 3499              		.cfi_def_cfa_offset 16
 3500              		.cfi_offset 3, -16
 3501              		.cfi_offset 4, -12
 3502              		.cfi_offset 5, -8
 3503              		.cfi_offset 14, -4
1252:os/tasks.c    ****         BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 3504              		.loc 1 1252 9 is_stmt 1 view .LVU982
1253:os/tasks.c    **** 
 3505              		.loc 1 1253 9 view .LVU983
 3506              	.LVL256:
1255:os/tasks.c    ****         configASSERT( ( xTimeIncrement > 0U ) );
 3507              		.loc 1 1255 9 view .LVU984
 3508 0002 68B1     		cbz	r0, .L283
 3509 0004 0C46     		mov	r4, r1
 3510 0006 0546     		mov	r5, r0
1255:os/tasks.c    ****         configASSERT( ( xTimeIncrement > 0U ) );
 3511              		.loc 1 1255 43 discriminator 2 view .LVU985
1256:os/tasks.c    ****         configASSERT( uxSchedulerSuspended == 0 );
 3512              		.loc 1 1256 9 discriminator 2 view .LVU986
 3513 0008 A9B9     		cbnz	r1, .L270
1256:os/tasks.c    ****         configASSERT( uxSchedulerSuspended == 0 );
 3514              		.loc 1 1256 9 view .LVU987
 3515              	.LBB191:
 3516              	.LBI191:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 3517              		.loc 2 193 34 view .LVU988
 3518              	.LBB192:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3519              		.loc 2 195 9 view .LVU989
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3520              		.loc 2 197 9 view .LVU990
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 176


 3521              		.syntax unified
 3522              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3523 000a 4FF05003 			mov r3, #80												
 3524 000e 72B6     		cpsid i													
 3525 0010 83F31188 		msr basepri, r3											
 3526 0014 BFF36F8F 		isb														
 3527 0018 BFF34F8F 		dsb														
 3528 001c 62B6     		cpsie i													
 3529              	
 3530              	@ 0 "" 2
 3531              	.LVL257:
 3532              		.thumb
 3533              		.syntax unified
 3534              	.L271:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3535              		.loc 2 197 9 is_stmt 0 view .LVU991
 3536              	.LBE192:
 3537              	.LBE191:
1256:os/tasks.c    ****         configASSERT( uxSchedulerSuspended == 0 );
 3538              		.loc 1 1256 9 is_stmt 1 discriminator 2 view .LVU992
1256:os/tasks.c    ****         configASSERT( uxSchedulerSuspended == 0 );
 3539              		.loc 1 1256 9 discriminator 2 view .LVU993
1256:os/tasks.c    ****         configASSERT( uxSchedulerSuspended == 0 );
 3540              		.loc 1 1256 9 discriminator 2 view .LVU994
 3541 001e FEE7     		b	.L271
 3542              	.L283:
1255:os/tasks.c    ****         configASSERT( ( xTimeIncrement > 0U ) );
 3543              		.loc 1 1255 9 view .LVU995
 3544              	.LBB193:
 3545              	.LBI193:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 3546              		.loc 2 193 34 view .LVU996
 3547              	.LBB194:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3548              		.loc 2 195 9 view .LVU997
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3549              		.loc 2 197 9 view .LVU998
 3550              		.syntax unified
 3551              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3552 0020 4FF05003 			mov r3, #80												
 3553 0024 72B6     		cpsid i													
 3554 0026 83F31188 		msr basepri, r3											
 3555 002a BFF36F8F 		isb														
 3556 002e BFF34F8F 		dsb														
 3557 0032 62B6     		cpsie i													
 3558              	
 3559              	@ 0 "" 2
 3560              	.LVL258:
 3561              		.thumb
 3562              		.syntax unified
 3563              	.L269:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3564              		.loc 2 197 9 is_stmt 0 view .LVU999
 3565              	.LBE194:
 3566              	.LBE193:
1255:os/tasks.c    ****         configASSERT( ( xTimeIncrement > 0U ) );
 3567              		.loc 1 1255 9 is_stmt 1 discriminator 1 view .LVU1000
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 177


1255:os/tasks.c    ****         configASSERT( ( xTimeIncrement > 0U ) );
 3568              		.loc 1 1255 9 discriminator 1 view .LVU1001
1255:os/tasks.c    ****         configASSERT( ( xTimeIncrement > 0U ) );
 3569              		.loc 1 1255 9 discriminator 1 view .LVU1002
 3570 0034 FEE7     		b	.L269
 3571              	.L270:
1256:os/tasks.c    ****         configASSERT( uxSchedulerSuspended == 0 );
 3572              		.loc 1 1256 48 discriminator 2 view .LVU1003
1257:os/tasks.c    **** 
 3573              		.loc 1 1257 9 discriminator 2 view .LVU1004
 3574 0036 1E4B     		ldr	r3, .L284
 3575 0038 1B68     		ldr	r3, [r3]
 3576 003a 53B1     		cbz	r3, .L272
1257:os/tasks.c    **** 
 3577              		.loc 1 1257 9 view .LVU1005
 3578              	.LBB195:
 3579              	.LBI195:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 3580              		.loc 2 193 34 view .LVU1006
 3581              	.LBB196:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3582              		.loc 2 195 9 view .LVU1007
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3583              		.loc 2 197 9 view .LVU1008
 3584              		.syntax unified
 3585              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3586 003c 4FF05003 			mov r3, #80												
 3587 0040 72B6     		cpsid i													
 3588 0042 83F31188 		msr basepri, r3											
 3589 0046 BFF36F8F 		isb														
 3590 004a BFF34F8F 		dsb														
 3591 004e 62B6     		cpsie i													
 3592              	
 3593              	@ 0 "" 2
 3594              	.LVL259:
 3595              		.thumb
 3596              		.syntax unified
 3597              	.L273:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3598              		.loc 2 197 9 is_stmt 0 view .LVU1009
 3599              	.LBE196:
 3600              	.LBE195:
1257:os/tasks.c    **** 
 3601              		.loc 1 1257 9 is_stmt 1 discriminator 3 view .LVU1010
1257:os/tasks.c    **** 
 3602              		.loc 1 1257 9 discriminator 3 view .LVU1011
1257:os/tasks.c    **** 
 3603              		.loc 1 1257 9 discriminator 3 view .LVU1012
 3604 0050 FEE7     		b	.L273
 3605              	.L272:
1257:os/tasks.c    **** 
 3606              		.loc 1 1257 50 discriminator 2 view .LVU1013
1259:os/tasks.c    ****         {
 3607              		.loc 1 1259 9 discriminator 2 view .LVU1014
 3608 0052 FFF7FEFF 		bl	vTaskSuspendAll
 3609              	.LVL260:
 3610              	.LBB197:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 178


1263:os/tasks.c    **** 
 3611              		.loc 1 1263 13 discriminator 2 view .LVU1015
1263:os/tasks.c    **** 
 3612              		.loc 1 1263 30 is_stmt 0 discriminator 2 view .LVU1016
 3613 0056 174B     		ldr	r3, .L284+4
 3614 0058 1868     		ldr	r0, [r3]
 3615              	.LVL261:
1266:os/tasks.c    **** 
 3616              		.loc 1 1266 13 is_stmt 1 discriminator 2 view .LVU1017
1266:os/tasks.c    **** 
 3617              		.loc 1 1266 27 is_stmt 0 discriminator 2 view .LVU1018
 3618 005a 2A68     		ldr	r2, [r5]
1266:os/tasks.c    **** 
 3619              		.loc 1 1266 25 discriminator 2 view .LVU1019
 3620 005c 1444     		add	r4, r4, r2
 3621              	.LVL262:
1268:os/tasks.c    ****             {
 3622              		.loc 1 1268 13 is_stmt 1 discriminator 2 view .LVU1020
1268:os/tasks.c    ****             {
 3623              		.loc 1 1268 15 is_stmt 0 discriminator 2 view .LVU1021
 3624 005e 8242     		cmp	r2, r0
 3625 0060 0BD9     		bls	.L274
1275:os/tasks.c    ****                 {
 3626              		.loc 1 1275 17 is_stmt 1 view .LVU1022
1275:os/tasks.c    ****                 {
 3627              		.loc 1 1275 19 is_stmt 0 view .LVU1023
 3628 0062 A242     		cmp	r2, r4
 3629 0064 02D8     		bhi	.L275
1300:os/tasks.c    **** 
 3630              		.loc 1 1300 13 is_stmt 1 view .LVU1024
1300:os/tasks.c    **** 
 3631              		.loc 1 1300 33 is_stmt 0 view .LVU1025
 3632 0066 2C60     		str	r4, [r5]
1302:os/tasks.c    ****             {
 3633              		.loc 1 1302 13 is_stmt 1 view .LVU1026
 3634              	.LBE197:
1253:os/tasks.c    **** 
 3635              		.loc 1 1253 37 is_stmt 0 view .LVU1027
 3636 0068 0024     		movs	r4, #0
 3637              	.LVL263:
1253:os/tasks.c    **** 
 3638              		.loc 1 1253 37 view .LVU1028
 3639 006a 10E0     		b	.L276
 3640              	.LVL264:
 3641              	.L275:
 3642              	.LBB198:
1275:os/tasks.c    ****                 {
 3643              		.loc 1 1275 59 discriminator 1 view .LVU1029
 3644 006c A042     		cmp	r0, r4
 3645 006e 02D3     		bcc	.L277
1300:os/tasks.c    **** 
 3646              		.loc 1 1300 13 is_stmt 1 view .LVU1030
1300:os/tasks.c    **** 
 3647              		.loc 1 1300 33 is_stmt 0 view .LVU1031
 3648 0070 2C60     		str	r4, [r5]
1302:os/tasks.c    ****             {
 3649              		.loc 1 1302 13 is_stmt 1 view .LVU1032
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 179


 3650              	.LBE198:
1253:os/tasks.c    **** 
 3651              		.loc 1 1253 37 is_stmt 0 view .LVU1033
 3652 0072 0024     		movs	r4, #0
 3653              	.LVL265:
1253:os/tasks.c    **** 
 3654              		.loc 1 1253 37 view .LVU1034
 3655 0074 0BE0     		b	.L276
 3656              	.LVL266:
 3657              	.L277:
 3658              	.LBB199:
1277:os/tasks.c    ****                 }
 3659              		.loc 1 1277 21 is_stmt 1 view .LVU1035
1300:os/tasks.c    **** 
 3660              		.loc 1 1300 13 view .LVU1036
1300:os/tasks.c    **** 
 3661              		.loc 1 1300 33 is_stmt 0 view .LVU1037
 3662 0076 2C60     		str	r4, [r5]
1302:os/tasks.c    ****             {
 3663              		.loc 1 1302 13 is_stmt 1 view .LVU1038
 3664 0078 04E0     		b	.L278
 3665              	.LVL267:
 3666              	.L274:
1289:os/tasks.c    ****                 {
 3667              		.loc 1 1289 17 view .LVU1039
1289:os/tasks.c    ****                 {
 3668              		.loc 1 1289 19 is_stmt 0 view .LVU1040
 3669 007a A242     		cmp	r2, r4
 3670 007c 01D8     		bhi	.L279
1289:os/tasks.c    ****                 {
 3671              		.loc 1 1289 59 discriminator 1 view .LVU1041
 3672 007e A042     		cmp	r0, r4
 3673 0080 12D2     		bcs	.L280
 3674              	.L279:
1291:os/tasks.c    ****                 }
 3675              		.loc 1 1291 21 is_stmt 1 view .LVU1042
 3676              	.LVL268:
1300:os/tasks.c    **** 
 3677              		.loc 1 1300 13 view .LVU1043
1300:os/tasks.c    **** 
 3678              		.loc 1 1300 33 is_stmt 0 view .LVU1044
 3679 0082 2C60     		str	r4, [r5]
1302:os/tasks.c    ****             {
 3680              		.loc 1 1302 13 is_stmt 1 view .LVU1045
 3681              	.L278:
1304:os/tasks.c    **** 
 3682              		.loc 1 1304 53 view .LVU1046
1308:os/tasks.c    ****             }
 3683              		.loc 1 1308 17 view .LVU1047
 3684 0084 0021     		movs	r1, #0
 3685 0086 201A     		subs	r0, r4, r0
 3686              	.LVL269:
1308:os/tasks.c    ****             }
 3687              		.loc 1 1308 17 is_stmt 0 view .LVU1048
 3688 0088 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3689              	.LVL270:
 3690 008c 0124     		movs	r4, #1
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 180


 3691              	.LVL271:
 3692              	.L276:
1312:os/tasks.c    ****             }
 3693              		.loc 1 1312 41 is_stmt 1 view .LVU1049
 3694              	.LBE199:
1315:os/tasks.c    **** 
 3695              		.loc 1 1315 9 view .LVU1050
1315:os/tasks.c    **** 
 3696              		.loc 1 1315 27 is_stmt 0 view .LVU1051
 3697 008e FFF7FEFF 		bl	xTaskResumeAll
 3698              	.LVL272:
1319:os/tasks.c    ****         {
 3699              		.loc 1 1319 9 is_stmt 1 view .LVU1052
1319:os/tasks.c    ****         {
 3700              		.loc 1 1319 11 is_stmt 0 view .LVU1053
 3701 0092 38B9     		cbnz	r0, .L267
1321:os/tasks.c    ****         }
 3702              		.loc 1 1321 13 is_stmt 1 view .LVU1054
 3703 0094 084B     		ldr	r3, .L284+8
 3704 0096 4FF08052 		mov	r2, #268435456
 3705 009a 1A60     		str	r2, [r3]
1321:os/tasks.c    ****         }
 3706              		.loc 1 1321 13 view .LVU1055
 3707              		.syntax unified
 3708              	@ 1321 "os/tasks.c" 1
 3709 009c BFF34F8F 		dsb
 3710              	@ 0 "" 2
1321:os/tasks.c    ****         }
 3711              		.loc 1 1321 13 view .LVU1056
 3712              	@ 1321 "os/tasks.c" 1
 3713 00a0 BFF36F8F 		isb
 3714              	@ 0 "" 2
1321:os/tasks.c    ****         }
 3715              		.loc 1 1321 35 view .LVU1057
1325:os/tasks.c    ****         }
 3716              		.loc 1 1325 37 view .LVU1058
1328:os/tasks.c    ****     }
 3717              		.loc 1 1328 9 view .LVU1059
 3718              		.thumb
 3719              		.syntax unified
 3720              	.L267:
1329:os/tasks.c    **** 
 3721              		.loc 1 1329 5 is_stmt 0 view .LVU1060
 3722 00a4 2046     		mov	r0, r4
 3723              	.LVL273:
1329:os/tasks.c    **** 
 3724              		.loc 1 1329 5 view .LVU1061
 3725 00a6 38BD     		pop	{r3, r4, r5, pc}
 3726              	.LVL274:
 3727              	.L280:
 3728              	.LBB200:
1300:os/tasks.c    **** 
 3729              		.loc 1 1300 13 is_stmt 1 view .LVU1062
1300:os/tasks.c    **** 
 3730              		.loc 1 1300 33 is_stmt 0 view .LVU1063
 3731 00a8 2C60     		str	r4, [r5]
1302:os/tasks.c    ****             {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 181


 3732              		.loc 1 1302 13 is_stmt 1 view .LVU1064
 3733              	.LBE200:
1253:os/tasks.c    **** 
 3734              		.loc 1 1253 37 is_stmt 0 view .LVU1065
 3735 00aa 0024     		movs	r4, #0
 3736              	.LVL275:
1253:os/tasks.c    **** 
 3737              		.loc 1 1253 37 view .LVU1066
 3738 00ac EFE7     		b	.L276
 3739              	.L285:
 3740 00ae 00BF     		.align	2
 3741              	.L284:
 3742 00b0 00000000 		.word	.LANCHOR16
 3743 00b4 00000000 		.word	.LANCHOR15
 3744 00b8 04ED00E0 		.word	-536810236
 3745              		.cfi_endproc
 3746              	.LFE9:
 3748              		.section	.text.vTaskDelay,"ax",%progbits
 3749              		.align	1
 3750              		.global	vTaskDelay
 3751              		.syntax unified
 3752              		.thumb
 3753              		.thumb_func
 3754              		.fpu fpv5-d16
 3756              	vTaskDelay:
 3757              	.LVL276:
 3758              	.LFB10:
1337:os/tasks.c    ****         BaseType_t xAlreadyYielded = pdFALSE;
 3759              		.loc 1 1337 5 is_stmt 1 view -0
 3760              		.cfi_startproc
 3761              		@ args = 0, pretend = 0, frame = 0
 3762              		@ frame_needed = 0, uses_anonymous_args = 0
1337:os/tasks.c    ****         BaseType_t xAlreadyYielded = pdFALSE;
 3763              		.loc 1 1337 5 is_stmt 0 view .LVU1068
 3764 0000 10B5     		push	{r4, lr}
 3765              	.LCFI31:
 3766              		.cfi_def_cfa_offset 8
 3767              		.cfi_offset 4, -8
 3768              		.cfi_offset 14, -4
1338:os/tasks.c    **** 
 3769              		.loc 1 1338 9 is_stmt 1 view .LVU1069
 3770              	.LVL277:
1341:os/tasks.c    ****         {
 3771              		.loc 1 1341 9 view .LVU1070
1341:os/tasks.c    ****         {
 3772              		.loc 1 1341 11 is_stmt 0 view .LVU1071
 3773 0002 B8B1     		cbz	r0, .L287
 3774 0004 0446     		mov	r4, r0
1343:os/tasks.c    ****             vTaskSuspendAll();
 3775              		.loc 1 1343 13 is_stmt 1 view .LVU1072
 3776 0006 104B     		ldr	r3, .L292
 3777 0008 1B68     		ldr	r3, [r3]
 3778 000a 53B1     		cbz	r3, .L288
1343:os/tasks.c    ****             vTaskSuspendAll();
 3779              		.loc 1 1343 13 view .LVU1073
 3780              	.LBB201:
 3781              	.LBI201:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 182


 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 3782              		.loc 2 193 34 view .LVU1074
 3783              	.LBB202:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3784              		.loc 2 195 9 view .LVU1075
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3785              		.loc 2 197 9 view .LVU1076
 3786              		.syntax unified
 3787              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3788 000c 4FF05003 			mov r3, #80												
 3789 0010 72B6     		cpsid i													
 3790 0012 83F31188 		msr basepri, r3											
 3791 0016 BFF36F8F 		isb														
 3792 001a BFF34F8F 		dsb														
 3793 001e 62B6     		cpsie i													
 3794              	
 3795              	@ 0 "" 2
 3796              	.LVL278:
 3797              		.thumb
 3798              		.syntax unified
 3799              	.L289:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3800              		.loc 2 197 9 is_stmt 0 view .LVU1077
 3801              	.LBE202:
 3802              	.LBE201:
1343:os/tasks.c    ****             vTaskSuspendAll();
 3803              		.loc 1 1343 13 is_stmt 1 discriminator 1 view .LVU1078
1343:os/tasks.c    ****             vTaskSuspendAll();
 3804              		.loc 1 1343 13 discriminator 1 view .LVU1079
1343:os/tasks.c    ****             vTaskSuspendAll();
 3805              		.loc 1 1343 13 discriminator 1 view .LVU1080
 3806 0020 FEE7     		b	.L289
 3807              	.L288:
1343:os/tasks.c    ****             vTaskSuspendAll();
 3808              		.loc 1 1343 54 discriminator 2 view .LVU1081
1344:os/tasks.c    ****             {
 3809              		.loc 1 1344 13 discriminator 2 view .LVU1082
 3810 0022 FFF7FEFF 		bl	vTaskSuspendAll
 3811              	.LVL279:
1346:os/tasks.c    **** 
 3812              		.loc 1 1346 34 discriminator 2 view .LVU1083
1355:os/tasks.c    ****             }
 3813              		.loc 1 1355 17 discriminator 2 view .LVU1084
 3814 0026 0021     		movs	r1, #0
 3815 0028 2046     		mov	r0, r4
 3816 002a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3817              	.LVL280:
1357:os/tasks.c    ****         }
 3818              		.loc 1 1357 13 discriminator 2 view .LVU1085
1357:os/tasks.c    ****         }
 3819              		.loc 1 1357 31 is_stmt 0 discriminator 2 view .LVU1086
 3820 002e FFF7FEFF 		bl	xTaskResumeAll
 3821              	.LVL281:
1361:os/tasks.c    ****         }
 3822              		.loc 1 1361 37 is_stmt 1 discriminator 2 view .LVU1087
1366:os/tasks.c    ****         {
 3823              		.loc 1 1366 9 discriminator 2 view .LVU1088
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 183


1366:os/tasks.c    ****         {
 3824              		.loc 1 1366 11 is_stmt 0 discriminator 2 view .LVU1089
 3825 0032 38B9     		cbnz	r0, .L286
 3826              	.LVL282:
 3827              	.L287:
1368:os/tasks.c    ****         }
 3828              		.loc 1 1368 13 is_stmt 1 view .LVU1090
 3829 0034 054B     		ldr	r3, .L292+4
 3830 0036 4FF08052 		mov	r2, #268435456
 3831 003a 1A60     		str	r2, [r3]
1368:os/tasks.c    ****         }
 3832              		.loc 1 1368 13 view .LVU1091
 3833              		.syntax unified
 3834              	@ 1368 "os/tasks.c" 1
 3835 003c BFF34F8F 		dsb
 3836              	@ 0 "" 2
1368:os/tasks.c    ****         }
 3837              		.loc 1 1368 13 view .LVU1092
 3838              	@ 1368 "os/tasks.c" 1
 3839 0040 BFF36F8F 		isb
 3840              	@ 0 "" 2
1368:os/tasks.c    ****         }
 3841              		.loc 1 1368 35 view .LVU1093
1372:os/tasks.c    ****         }
 3842              		.loc 1 1372 37 view .LVU1094
 3843              		.thumb
 3844              		.syntax unified
 3845              	.L286:
1374:os/tasks.c    **** 
 3846              		.loc 1 1374 5 is_stmt 0 view .LVU1095
 3847 0044 10BD     		pop	{r4, pc}
 3848              	.L293:
 3849 0046 00BF     		.align	2
 3850              	.L292:
 3851 0048 00000000 		.word	.LANCHOR16
 3852 004c 04ED00E0 		.word	-536810236
 3853              		.cfi_endproc
 3854              	.LFE10:
 3856              		.section	.text.xTaskCatchUpTicks,"ax",%progbits
 3857              		.align	1
 3858              		.global	xTaskCatchUpTicks
 3859              		.syntax unified
 3860              		.thumb
 3861              		.thumb_func
 3862              		.fpu fpv5-d16
 3864              	xTaskCatchUpTicks:
 3865              	.LVL283:
 3866              	.LFB28:
2628:os/tasks.c    ****     BaseType_t xYieldOccurred;
 3867              		.loc 1 2628 1 is_stmt 1 view -0
 3868              		.cfi_startproc
 3869              		@ args = 0, pretend = 0, frame = 0
 3870              		@ frame_needed = 0, uses_anonymous_args = 0
2629:os/tasks.c    **** 
 3871              		.loc 1 2629 5 view .LVU1097
2633:os/tasks.c    **** 
 3872              		.loc 1 2633 5 view .LVU1098
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 184


 3873 0000 0C4B     		ldr	r3, .L299
 3874 0002 1B68     		ldr	r3, [r3]
 3875 0004 53B1     		cbz	r3, .L295
2633:os/tasks.c    **** 
 3876              		.loc 1 2633 5 view .LVU1099
 3877              	.LBB203:
 3878              	.LBI203:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 3879              		.loc 2 193 34 view .LVU1100
 3880              	.LBB204:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 3881              		.loc 2 195 9 view .LVU1101
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3882              		.loc 2 197 9 view .LVU1102
 3883              		.syntax unified
 3884              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 3885 0006 4FF05003 			mov r3, #80												
 3886 000a 72B6     		cpsid i													
 3887 000c 83F31188 		msr basepri, r3											
 3888 0010 BFF36F8F 		isb														
 3889 0014 BFF34F8F 		dsb														
 3890 0018 62B6     		cpsie i													
 3891              	
 3892              	@ 0 "" 2
 3893              	.LVL284:
 3894              		.thumb
 3895              		.syntax unified
 3896              	.L296:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 3897              		.loc 2 197 9 is_stmt 0 view .LVU1103
 3898              	.LBE204:
 3899              	.LBE203:
2633:os/tasks.c    **** 
 3900              		.loc 1 2633 5 is_stmt 1 discriminator 1 view .LVU1104
2633:os/tasks.c    **** 
 3901              		.loc 1 2633 5 discriminator 1 view .LVU1105
2633:os/tasks.c    **** 
 3902              		.loc 1 2633 5 discriminator 1 view .LVU1106
 3903 001a FEE7     		b	.L296
 3904              	.L295:
2628:os/tasks.c    ****     BaseType_t xYieldOccurred;
 3905              		.loc 1 2628 1 is_stmt 0 discriminator 2 view .LVU1107
 3906 001c 10B5     		push	{r4, lr}
 3907              	.LCFI32:
 3908              		.cfi_def_cfa_offset 8
 3909              		.cfi_offset 4, -8
 3910              		.cfi_offset 14, -4
 3911 001e 0446     		mov	r4, r0
2633:os/tasks.c    **** 
 3912              		.loc 1 2633 46 is_stmt 1 discriminator 2 view .LVU1108
2637:os/tasks.c    ****     xPendedTicks += xTicksToCatchUp;
 3913              		.loc 1 2637 5 discriminator 2 view .LVU1109
 3914 0020 FFF7FEFF 		bl	vTaskSuspendAll
 3915              	.LVL285:
2638:os/tasks.c    ****     xYieldOccurred = xTaskResumeAll();
 3916              		.loc 1 2638 5 discriminator 2 view .LVU1110
2638:os/tasks.c    ****     xYieldOccurred = xTaskResumeAll();
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 185


 3917              		.loc 1 2638 18 is_stmt 0 discriminator 2 view .LVU1111
 3918 0024 044A     		ldr	r2, .L299+4
 3919 0026 1368     		ldr	r3, [r2]
 3920 0028 2344     		add	r3, r3, r4
 3921 002a 1360     		str	r3, [r2]
2639:os/tasks.c    **** 
 3922              		.loc 1 2639 5 is_stmt 1 discriminator 2 view .LVU1112
2639:os/tasks.c    **** 
 3923              		.loc 1 2639 22 is_stmt 0 discriminator 2 view .LVU1113
 3924 002c FFF7FEFF 		bl	xTaskResumeAll
 3925              	.LVL286:
2641:os/tasks.c    **** }
 3926              		.loc 1 2641 5 is_stmt 1 discriminator 2 view .LVU1114
2642:os/tasks.c    **** /*----------------------------------------------------------*/
 3927              		.loc 1 2642 1 is_stmt 0 discriminator 2 view .LVU1115
 3928 0030 10BD     		pop	{r4, pc}
 3929              	.LVL287:
 3930              	.L300:
2642:os/tasks.c    **** /*----------------------------------------------------------*/
 3931              		.loc 1 2642 1 discriminator 2 view .LVU1116
 3932 0032 00BF     		.align	2
 3933              	.L299:
 3934 0034 00000000 		.word	.LANCHOR16
 3935 0038 00000000 		.word	.LANCHOR20
 3936              		.cfi_endproc
 3937              	.LFE28:
 3939              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3940              		.align	1
 3941              		.global	vTaskSwitchContext
 3942              		.syntax unified
 3943              		.thumb
 3944              		.thumb_func
 3945              		.fpu fpv5-d16
 3947              	vTaskSwitchContext:
 3948              	.LFB30:
3011:os/tasks.c    ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3949              		.loc 1 3011 1 is_stmt 1 view -0
 3950              		.cfi_startproc
 3951              		@ args = 0, pretend = 0, frame = 0
 3952              		@ frame_needed = 0, uses_anonymous_args = 0
 3953              		@ link register save eliminated.
3012:os/tasks.c    ****     {
 3954              		.loc 1 3012 5 view .LVU1118
3012:os/tasks.c    ****     {
 3955              		.loc 1 3012 30 is_stmt 0 view .LVU1119
 3956 0000 214B     		ldr	r3, .L316
 3957 0002 1B68     		ldr	r3, [r3]
3012:os/tasks.c    ****     {
 3958              		.loc 1 3012 7 view .LVU1120
 3959 0004 1BB1     		cbz	r3, .L302
3016:os/tasks.c    ****     }
 3960              		.loc 1 3016 9 is_stmt 1 view .LVU1121
3016:os/tasks.c    ****     }
 3961              		.loc 1 3016 23 is_stmt 0 view .LVU1122
 3962 0006 214B     		ldr	r3, .L316+4
 3963 0008 0122     		movs	r2, #1
 3964 000a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 186


 3965 000c 7047     		bx	lr
 3966              	.L302:
3020:os/tasks.c    ****         traceTASK_SWITCHED_OUT();
 3967              		.loc 1 3020 9 is_stmt 1 view .LVU1123
3020:os/tasks.c    ****         traceTASK_SWITCHED_OUT();
 3968              		.loc 1 3020 23 is_stmt 0 view .LVU1124
 3969 000e 1F4B     		ldr	r3, .L316+4
 3970 0010 0022     		movs	r2, #0
 3971 0012 1A60     		str	r2, [r3]
3021:os/tasks.c    **** 
 3972              		.loc 1 3021 33 is_stmt 1 view .LVU1125
3052:os/tasks.c    **** 
 3973              		.loc 1 3052 39 view .LVU1126
 3974              	.LBB205:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 3975              		.loc 1 3063 9 view .LVU1127
 3976 0014 1E4B     		ldr	r3, .L316+8
 3977 0016 1B68     		ldr	r3, [r3]
 3978              	.LVL288:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 3979              		.loc 1 3063 9 view .LVU1128
 3980              	.L304:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 3981              		.loc 1 3063 9 discriminator 5 view .LVU1129
 3982 0018 03EB8301 		add	r1, r3, r3, lsl #2
 3983 001c 8A00     		lsls	r2, r1, #2
 3984 001e 1D49     		ldr	r1, .L316+12
 3985 0020 8A58     		ldr	r2, [r1, r2]
 3986 0022 6AB9     		cbnz	r2, .L313
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 3987              		.loc 1 3063 9 discriminator 6 view .LVU1130
 3988 0024 0BB1     		cbz	r3, .L314
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 3989              		.loc 1 3063 9 discriminator 3 view .LVU1131
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 3990              		.loc 1 3063 9 discriminator 3 view .LVU1132
 3991 0026 013B     		subs	r3, r3, #1
 3992              	.LVL289:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 3993              		.loc 1 3063 9 is_stmt 0 discriminator 3 view .LVU1133
 3994 0028 F6E7     		b	.L304
 3995              	.L314:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 3996              		.loc 1 3063 9 is_stmt 1 view .LVU1134
 3997              	.LBB206:
 3998              	.LBI206:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 3999              		.loc 2 193 34 view .LVU1135
 4000              	.LBB207:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4001              		.loc 2 195 9 view .LVU1136
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4002              		.loc 2 197 9 view .LVU1137
 4003              		.syntax unified
 4004              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4005 002a 4FF05003 			mov r3, #80												
 4006 002e 72B6     		cpsid i													
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 187


 4007 0030 83F31188 		msr basepri, r3											
 4008 0034 BFF36F8F 		isb														
 4009 0038 BFF34F8F 		dsb														
 4010 003c 62B6     		cpsie i													
 4011              	
 4012              	@ 0 "" 2
 4013              	.LVL290:
 4014              		.thumb
 4015              		.syntax unified
 4016              	.L306:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4017              		.loc 2 197 9 is_stmt 0 view .LVU1138
 4018              	.LBE207:
 4019              	.LBE206:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4020              		.loc 1 3063 9 is_stmt 1 discriminator 1 view .LVU1139
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4021              		.loc 1 3063 9 discriminator 1 view .LVU1140
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4022              		.loc 1 3063 9 discriminator 1 view .LVU1141
 4023 003e FEE7     		b	.L306
 4024              	.LVL291:
 4025              	.L313:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4026              		.loc 1 3063 9 is_stmt 0 discriminator 1 view .LVU1142
 4027              	.LBE205:
3011:os/tasks.c    ****     if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4028              		.loc 1 3011 1 discriminator 7 view .LVU1143
 4029 0040 10B4     		push	{r4}
 4030              	.LCFI33:
 4031              		.cfi_def_cfa_offset 4
 4032              		.cfi_offset 4, -4
 4033              	.LBB210:
 4034              	.LBB208:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4035              		.loc 1 3063 9 is_stmt 1 discriminator 7 view .LVU1144
 4036              	.LVL292:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4037              		.loc 1 3063 9 discriminator 7 view .LVU1145
 4038 0042 03EB8300 		add	r0, r3, r3, lsl #2
 4039 0046 8200     		lsls	r2, r0, #2
 4040 0048 0A44     		add	r2, r2, r1
 4041 004a 5068     		ldr	r0, [r2, #4]
 4042 004c 4068     		ldr	r0, [r0, #4]
 4043 004e 5060     		str	r0, [r2, #4]
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4044              		.loc 1 3063 9 discriminator 7 view .LVU1146
 4045 0050 03EB8304 		add	r4, r3, r3, lsl #2
 4046 0054 A200     		lsls	r2, r4, #2
 4047 0056 1446     		mov	r4, r2
 4048 0058 0832     		adds	r2, r2, #8
 4049 005a 1144     		add	r1, r1, r2
 4050 005c 8842     		cmp	r0, r1
 4051 005e 0DD0     		beq	.L315
 4052              	.L308:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4053              		.loc 1 3063 9 discriminator 10 view .LVU1147
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 188


 4054 0060 03EB8302 		add	r2, r3, r3, lsl #2
 4055 0064 9100     		lsls	r1, r2, #2
 4056 0066 0B4A     		ldr	r2, .L316+12
 4057 0068 0A44     		add	r2, r2, r1
 4058 006a 5268     		ldr	r2, [r2, #4]
 4059 006c D168     		ldr	r1, [r2, #12]
 4060 006e 0A4A     		ldr	r2, .L316+16
 4061 0070 1160     		str	r1, [r2]
 4062              	.LBE208:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4063              		.loc 1 3063 9 discriminator 10 view .LVU1148
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4064              		.loc 1 3063 9 discriminator 10 view .LVU1149
 4065 0072 074A     		ldr	r2, .L316+8
 4066 0074 1360     		str	r3, [r2]
 4067              	.LBE210:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4068              		.loc 1 3063 43 discriminator 10 view .LVU1150
3064:os/tasks.c    **** 
 4069              		.loc 1 3064 32 discriminator 10 view .LVU1151
3083:os/tasks.c    **** /*-----------------------------------------------------------*/
 4070              		.loc 1 3083 1 is_stmt 0 discriminator 10 view .LVU1152
 4071 0076 5DF8044B 		ldr	r4, [sp], #4
 4072              	.LCFI34:
 4073              		.cfi_remember_state
 4074              		.cfi_restore 4
 4075              		.cfi_def_cfa_offset 0
 4076 007a 7047     		bx	lr
 4077              	.L315:
 4078              	.LCFI35:
 4079              		.cfi_restore_state
 4080              	.LBB211:
 4081              	.LBB209:
3063:os/tasks.c    ****         traceTASK_SWITCHED_IN();
 4082              		.loc 1 3063 9 is_stmt 1 discriminator 8 view .LVU1153
 4083 007c 4068     		ldr	r0, [r0, #4]
 4084 007e 054A     		ldr	r2, .L316+12
 4085 0080 2244     		add	r2, r2, r4
 4086 0082 5060     		str	r0, [r2, #4]
 4087 0084 ECE7     		b	.L308
 4088              	.L317:
 4089 0086 00BF     		.align	2
 4090              	.L316:
 4091 0088 00000000 		.word	.LANCHOR16
 4092 008c 00000000 		.word	.LANCHOR17
 4093 0090 00000000 		.word	.LANCHOR13
 4094 0094 00000000 		.word	.LANCHOR4
 4095 0098 00000000 		.word	.LANCHOR10
 4096              	.LBE209:
 4097              	.LBE211:
 4098              		.cfi_endproc
 4099              	.LFE30:
 4101              		.section	.text.vTaskSuspend,"ax",%progbits
 4102              		.align	1
 4103              		.global	vTaskSuspend
 4104              		.syntax unified
 4105              		.thumb
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 189


 4106              		.thumb_func
 4107              		.fpu fpv5-d16
 4109              	vTaskSuspend:
 4110              	.LVL293:
 4111              	.LFB15:
1707:os/tasks.c    ****         TCB_t * pxTCB;
 4112              		.loc 1 1707 5 view -0
 4113              		.cfi_startproc
 4114              		@ args = 0, pretend = 0, frame = 0
 4115              		@ frame_needed = 0, uses_anonymous_args = 0
1707:os/tasks.c    ****         TCB_t * pxTCB;
 4116              		.loc 1 1707 5 is_stmt 0 view .LVU1155
 4117 0000 38B5     		push	{r3, r4, r5, lr}
 4118              	.LCFI36:
 4119              		.cfi_def_cfa_offset 16
 4120              		.cfi_offset 3, -16
 4121              		.cfi_offset 4, -12
 4122              		.cfi_offset 5, -8
 4123              		.cfi_offset 14, -4
 4124 0002 0446     		mov	r4, r0
1708:os/tasks.c    **** 
 4125              		.loc 1 1708 9 is_stmt 1 view .LVU1156
1710:os/tasks.c    ****         {
 4126              		.loc 1 1710 9 view .LVU1157
 4127 0004 FFF7FEFF 		bl	vPortEnterCritical
 4128              	.LVL294:
1714:os/tasks.c    **** 
 4129              		.loc 1 1714 13 view .LVU1158
1714:os/tasks.c    **** 
 4130              		.loc 1 1714 21 is_stmt 0 view .LVU1159
 4131 0008 D4B1     		cbz	r4, .L331
 4132              	.LVL295:
 4133              	.L319:
1716:os/tasks.c    **** 
 4134              		.loc 1 1716 39 is_stmt 1 discriminator 4 view .LVU1160
1720:os/tasks.c    ****             {
 4135              		.loc 1 1720 13 discriminator 4 view .LVU1161
1720:os/tasks.c    ****             {
 4136              		.loc 1 1720 17 is_stmt 0 discriminator 4 view .LVU1162
 4137 000a 251D     		adds	r5, r4, #4
 4138 000c 2846     		mov	r0, r5
 4139 000e FFF7FEFF 		bl	uxListRemove
 4140              	.LVL296:
1726:os/tasks.c    ****             }
 4141              		.loc 1 1726 41 is_stmt 1 discriminator 4 view .LVU1163
1730:os/tasks.c    ****             {
 4142              		.loc 1 1730 13 discriminator 4 view .LVU1164
1730:os/tasks.c    ****             {
 4143              		.loc 1 1730 17 is_stmt 0 discriminator 4 view .LVU1165
 4144 0012 A36A     		ldr	r3, [r4, #40]
1730:os/tasks.c    ****             {
 4145              		.loc 1 1730 15 discriminator 4 view .LVU1166
 4146 0014 1BB1     		cbz	r3, .L320
1732:os/tasks.c    ****             }
 4147              		.loc 1 1732 17 is_stmt 1 view .LVU1167
1732:os/tasks.c    ****             }
 4148              		.loc 1 1732 26 is_stmt 0 view .LVU1168
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 190


 4149 0016 04F11800 		add	r0, r4, #24
 4150 001a FFF7FEFF 		bl	uxListRemove
 4151              	.LVL297:
 4152              	.L320:
1736:os/tasks.c    ****             }
 4153              		.loc 1 1736 41 is_stmt 1 view .LVU1169
1739:os/tasks.c    **** 
 4154              		.loc 1 1739 13 view .LVU1170
 4155 001e 2946     		mov	r1, r5
 4156 0020 2648     		ldr	r0, .L335
 4157 0022 FFF7FEFF 		bl	vListInsertEnd
 4158              	.LVL298:
 4159              	.LBB212:
1743:os/tasks.c    **** 
 4160              		.loc 1 1743 21 view .LVU1171
1745:os/tasks.c    ****                     {
 4161              		.loc 1 1745 21 view .LVU1172
1745:os/tasks.c    ****                     {
 4162              		.loc 1 1745 28 is_stmt 0 view .LVU1173
 4163 0026 0023     		movs	r3, #0
 4164              	.LVL299:
 4165              	.L321:
1745:os/tasks.c    ****                     {
 4166              		.loc 1 1745 33 is_stmt 1 discriminator 1 view .LVU1174
1745:os/tasks.c    ****                     {
 4167              		.loc 1 1745 21 is_stmt 0 discriminator 1 view .LVU1175
 4168 0028 002B     		cmp	r3, #0
 4169 002a 0CDD     		ble	.L323
 4170              	.LBE212:
1757:os/tasks.c    **** 
 4171              		.loc 1 1757 9 is_stmt 1 view .LVU1176
 4172 002c FFF7FEFF 		bl	vPortExitCritical
 4173              	.LVL300:
1759:os/tasks.c    ****         {
 4174              		.loc 1 1759 9 view .LVU1177
1759:os/tasks.c    ****         {
 4175              		.loc 1 1759 31 is_stmt 0 view .LVU1178
 4176 0030 234B     		ldr	r3, .L335+4
 4177 0032 1B68     		ldr	r3, [r3]
1759:os/tasks.c    ****         {
 4178              		.loc 1 1759 11 view .LVU1179
 4179 0034 A3B9     		cbnz	r3, .L332
 4180              	.L324:
1771:os/tasks.c    ****         }
 4181              		.loc 1 1771 37 is_stmt 1 view .LVU1180
1774:os/tasks.c    ****         {
 4182              		.loc 1 1774 9 view .LVU1181
1774:os/tasks.c    ****         {
 4183              		.loc 1 1774 19 is_stmt 0 view .LVU1182
 4184 0036 234B     		ldr	r3, .L335+8
 4185 0038 1B68     		ldr	r3, [r3]
1774:os/tasks.c    ****         {
 4186              		.loc 1 1774 11 view .LVU1183
 4187 003a A342     		cmp	r3, r4
 4188 003c 17D0     		beq	.L333
 4189              	.L318:
1805:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 191


 4190              		.loc 1 1805 5 view .LVU1184
 4191 003e 38BD     		pop	{r3, r4, r5, pc}
 4192              	.LVL301:
 4193              	.L331:
1714:os/tasks.c    **** 
 4194              		.loc 1 1714 21 discriminator 1 view .LVU1185
 4195 0040 204B     		ldr	r3, .L335+8
 4196 0042 1C68     		ldr	r4, [r3]
 4197              	.LVL302:
1714:os/tasks.c    **** 
 4198              		.loc 1 1714 21 discriminator 1 view .LVU1186
 4199 0044 E1E7     		b	.L319
 4200              	.LVL303:
 4201              	.L323:
 4202              	.LBB213:
1747:os/tasks.c    ****                         {
 4203              		.loc 1 1747 25 is_stmt 1 view .LVU1187
1747:os/tasks.c    ****                         {
 4204              		.loc 1 1747 49 is_stmt 0 view .LVU1188
 4205 0046 E218     		adds	r2, r4, r3
 4206 0048 92F85820 		ldrb	r2, [r2, #88]	@ zero_extendqisi2
 4207 004c D2B2     		uxtb	r2, r2
1747:os/tasks.c    ****                         {
 4208              		.loc 1 1747 27 view .LVU1189
 4209 004e 012A     		cmp	r2, #1
 4210 0050 01D0     		beq	.L334
 4211              	.L322:
1745:os/tasks.c    ****                     {
 4212              		.loc 1 1745 76 is_stmt 1 discriminator 2 view .LVU1190
1745:os/tasks.c    ****                     {
 4213              		.loc 1 1745 77 is_stmt 0 discriminator 2 view .LVU1191
 4214 0052 0133     		adds	r3, r3, #1
 4215              	.LVL304:
1745:os/tasks.c    ****                     {
 4216              		.loc 1 1745 77 discriminator 2 view .LVU1192
 4217 0054 E8E7     		b	.L321
 4218              	.L334:
1751:os/tasks.c    ****                         }
 4219              		.loc 1 1751 29 is_stmt 1 view .LVU1193
1751:os/tasks.c    ****                         }
 4220              		.loc 1 1751 55 is_stmt 0 view .LVU1194
 4221 0056 E218     		adds	r2, r4, r3
 4222 0058 0021     		movs	r1, #0
 4223 005a 82F85810 		strb	r1, [r2, #88]
 4224 005e F8E7     		b	.L322
 4225              	.LVL305:
 4226              	.L332:
1751:os/tasks.c    ****                         }
 4227              		.loc 1 1751 55 view .LVU1195
 4228              	.LBE213:
1763:os/tasks.c    ****             {
 4229              		.loc 1 1763 13 is_stmt 1 view .LVU1196
 4230 0060 FFF7FEFF 		bl	vPortEnterCritical
 4231              	.LVL306:
1765:os/tasks.c    ****             }
 4232              		.loc 1 1765 17 view .LVU1197
 4233 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 192


 4234              	.LVL307:
1767:os/tasks.c    ****         }
 4235              		.loc 1 1767 13 view .LVU1198
 4236 0068 FFF7FEFF 		bl	vPortExitCritical
 4237              	.LVL308:
 4238 006c E3E7     		b	.L324
 4239              	.L333:
1776:os/tasks.c    ****             {
 4240              		.loc 1 1776 13 view .LVU1199
1776:os/tasks.c    ****             {
 4241              		.loc 1 1776 35 is_stmt 0 view .LVU1200
 4242 006e 144B     		ldr	r3, .L335+4
 4243 0070 1B68     		ldr	r3, [r3]
1776:os/tasks.c    ****             {
 4244              		.loc 1 1776 15 view .LVU1201
 4245 0072 B3B1     		cbz	r3, .L326
1779:os/tasks.c    ****                 portYIELD_WITHIN_API();
 4246              		.loc 1 1779 17 is_stmt 1 view .LVU1202
 4247 0074 144B     		ldr	r3, .L335+12
 4248 0076 1B68     		ldr	r3, [r3]
 4249 0078 53B1     		cbz	r3, .L327
1779:os/tasks.c    ****                 portYIELD_WITHIN_API();
 4250              		.loc 1 1779 17 view .LVU1203
 4251              	.LBB214:
 4252              	.LBI214:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 4253              		.loc 2 193 34 view .LVU1204
 4254              	.LBB215:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4255              		.loc 2 195 9 view .LVU1205
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4256              		.loc 2 197 9 view .LVU1206
 4257              		.syntax unified
 4258              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4259 007a 4FF05003 			mov r3, #80												
 4260 007e 72B6     		cpsid i													
 4261 0080 83F31188 		msr basepri, r3											
 4262 0084 BFF36F8F 		isb														
 4263 0088 BFF34F8F 		dsb														
 4264 008c 62B6     		cpsie i													
 4265              	
 4266              	@ 0 "" 2
 4267              	.LVL309:
 4268              		.thumb
 4269              		.syntax unified
 4270              	.L328:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4271              		.loc 2 197 9 is_stmt 0 view .LVU1207
 4272              	.LBE215:
 4273              	.LBE214:
1779:os/tasks.c    ****                 portYIELD_WITHIN_API();
 4274              		.loc 1 1779 17 is_stmt 1 discriminator 1 view .LVU1208
1779:os/tasks.c    ****                 portYIELD_WITHIN_API();
 4275              		.loc 1 1779 17 discriminator 1 view .LVU1209
1779:os/tasks.c    ****                 portYIELD_WITHIN_API();
 4276              		.loc 1 1779 17 discriminator 1 view .LVU1210
 4277 008e FEE7     		b	.L328
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 193


 4278              	.L327:
1779:os/tasks.c    ****                 portYIELD_WITHIN_API();
 4279              		.loc 1 1779 58 discriminator 2 view .LVU1211
1780:os/tasks.c    ****             }
 4280              		.loc 1 1780 17 discriminator 2 view .LVU1212
 4281 0090 0E4B     		ldr	r3, .L335+16
 4282 0092 4FF08052 		mov	r2, #268435456
 4283 0096 1A60     		str	r2, [r3]
1780:os/tasks.c    ****             }
 4284              		.loc 1 1780 17 discriminator 2 view .LVU1213
 4285              		.syntax unified
 4286              	@ 1780 "os/tasks.c" 1
 4287 0098 BFF34F8F 		dsb
 4288              	@ 0 "" 2
1780:os/tasks.c    ****             }
 4289              		.loc 1 1780 17 discriminator 2 view .LVU1214
 4290              	@ 1780 "os/tasks.c" 1
 4291 009c BFF36F8F 		isb
 4292              	@ 0 "" 2
1780:os/tasks.c    ****             }
 4293              		.loc 1 1780 39 discriminator 2 view .LVU1215
 4294              		.thumb
 4295              		.syntax unified
 4296 00a0 CDE7     		b	.L318
 4297              	.L326:
1787:os/tasks.c    ****                 {
 4298              		.loc 1 1787 17 view .LVU1216
1787:os/tasks.c    ****                 {
 4299              		.loc 1 1787 21 is_stmt 0 view .LVU1217
 4300 00a2 064B     		ldr	r3, .L335
 4301 00a4 1A68     		ldr	r2, [r3]
1787:os/tasks.c    ****                 {
 4302              		.loc 1 1787 68 view .LVU1218
 4303 00a6 0A4B     		ldr	r3, .L335+20
 4304 00a8 1B68     		ldr	r3, [r3]
1787:os/tasks.c    ****                 {
 4305              		.loc 1 1787 19 view .LVU1219
 4306 00aa 9A42     		cmp	r2, r3
 4307 00ac 03D1     		bne	.L329
1793:os/tasks.c    ****                 }
 4308              		.loc 1 1793 21 is_stmt 1 view .LVU1220
1793:os/tasks.c    ****                 }
 4309              		.loc 1 1793 34 is_stmt 0 view .LVU1221
 4310 00ae 054B     		ldr	r3, .L335+8
 4311 00b0 0022     		movs	r2, #0
 4312 00b2 1A60     		str	r2, [r3]
 4313 00b4 C3E7     		b	.L318
 4314              	.L329:
1797:os/tasks.c    ****                 }
 4315              		.loc 1 1797 21 is_stmt 1 view .LVU1222
 4316 00b6 FFF7FEFF 		bl	vTaskSwitchContext
 4317              	.LVL310:
1803:os/tasks.c    ****         }
 4318              		.loc 1 1803 37 view .LVU1223
1805:os/tasks.c    **** 
 4319              		.loc 1 1805 5 is_stmt 0 view .LVU1224
 4320 00ba C0E7     		b	.L318
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 194


 4321              	.L336:
 4322              		.align	2
 4323              	.L335:
 4324 00bc 00000000 		.word	.LANCHOR0
 4325 00c0 00000000 		.word	.LANCHOR11
 4326 00c4 00000000 		.word	.LANCHOR10
 4327 00c8 00000000 		.word	.LANCHOR16
 4328 00cc 04ED00E0 		.word	-536810236
 4329 00d0 00000000 		.word	.LANCHOR9
 4330              		.cfi_endproc
 4331              	.LFE15:
 4333              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4334              		.align	1
 4335              		.global	vTaskPlaceOnEventList
 4336              		.syntax unified
 4337              		.thumb
 4338              		.thumb_func
 4339              		.fpu fpv5-d16
 4341              	vTaskPlaceOnEventList:
 4342              	.LVL311:
 4343              	.LFB31:
3088:os/tasks.c    ****     configASSERT( pxEventList );
 4344              		.loc 1 3088 1 is_stmt 1 view -0
 4345              		.cfi_startproc
 4346              		@ args = 0, pretend = 0, frame = 0
 4347              		@ frame_needed = 0, uses_anonymous_args = 0
3089:os/tasks.c    **** 
 4348              		.loc 1 3089 5 view .LVU1226
 4349 0000 58B1     		cbz	r0, .L342
3088:os/tasks.c    ****     configASSERT( pxEventList );
 4350              		.loc 1 3088 1 is_stmt 0 discriminator 2 view .LVU1227
 4351 0002 10B5     		push	{r4, lr}
 4352              	.LCFI37:
 4353              		.cfi_def_cfa_offset 8
 4354              		.cfi_offset 4, -8
 4355              		.cfi_offset 14, -4
 4356 0004 0C46     		mov	r4, r1
3089:os/tasks.c    **** 
 4357              		.loc 1 3089 32 is_stmt 1 discriminator 2 view .LVU1228
3098:os/tasks.c    **** 
 4358              		.loc 1 3098 5 discriminator 2 view .LVU1229
3098:os/tasks.c    **** 
 4359              		.loc 1 3098 46 is_stmt 0 discriminator 2 view .LVU1230
 4360 0006 0A4B     		ldr	r3, .L343
 4361 0008 1968     		ldr	r1, [r3]
 4362              	.LVL312:
3098:os/tasks.c    **** 
 4363              		.loc 1 3098 5 discriminator 2 view .LVU1231
 4364 000a 1831     		adds	r1, r1, #24
 4365 000c FFF7FEFF 		bl	vListInsert
 4366              	.LVL313:
3100:os/tasks.c    **** }
 4367              		.loc 1 3100 5 is_stmt 1 discriminator 2 view .LVU1232
 4368 0010 0121     		movs	r1, #1
 4369 0012 2046     		mov	r0, r4
 4370 0014 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4371              	.LVL314:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 195


3101:os/tasks.c    **** /*-----------------------------------------------------------*/
 4372              		.loc 1 3101 1 is_stmt 0 discriminator 2 view .LVU1233
 4373 0018 10BD     		pop	{r4, pc}
 4374              	.LVL315:
 4375              	.L342:
 4376              	.LCFI38:
 4377              		.cfi_def_cfa_offset 0
 4378              		.cfi_restore 4
 4379              		.cfi_restore 14
3089:os/tasks.c    **** 
 4380              		.loc 1 3089 5 is_stmt 1 view .LVU1234
 4381              	.LBB216:
 4382              	.LBI216:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 4383              		.loc 2 193 34 view .LVU1235
 4384              	.LBB217:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4385              		.loc 2 195 9 view .LVU1236
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4386              		.loc 2 197 9 view .LVU1237
 4387              		.syntax unified
 4388              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4389 001a 4FF05003 			mov r3, #80												
 4390 001e 72B6     		cpsid i													
 4391 0020 83F31188 		msr basepri, r3											
 4392 0024 BFF36F8F 		isb														
 4393 0028 BFF34F8F 		dsb														
 4394 002c 62B6     		cpsie i													
 4395              	
 4396              	@ 0 "" 2
 4397              	.LVL316:
 4398              		.thumb
 4399              		.syntax unified
 4400              	.L339:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4401              		.loc 2 197 9 is_stmt 0 view .LVU1238
 4402              	.LBE217:
 4403              	.LBE216:
3089:os/tasks.c    **** 
 4404              		.loc 1 3089 5 is_stmt 1 discriminator 1 view .LVU1239
3089:os/tasks.c    **** 
 4405              		.loc 1 3089 5 discriminator 1 view .LVU1240
3089:os/tasks.c    **** 
 4406              		.loc 1 3089 5 discriminator 1 view .LVU1241
 4407 002e FEE7     		b	.L339
 4408              	.L344:
 4409              		.align	2
 4410              	.L343:
 4411 0030 00000000 		.word	.LANCHOR10
 4412              		.cfi_endproc
 4413              	.LFE31:
 4415              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4416              		.align	1
 4417              		.global	vTaskPlaceOnUnorderedEventList
 4418              		.syntax unified
 4419              		.thumb
 4420              		.thumb_func
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 196


 4421              		.fpu fpv5-d16
 4423              	vTaskPlaceOnUnorderedEventList:
 4424              	.LVL317:
 4425              	.LFB32:
3107:os/tasks.c    ****     configASSERT( pxEventList );
 4426              		.loc 1 3107 1 view -0
 4427              		.cfi_startproc
 4428              		@ args = 0, pretend = 0, frame = 0
 4429              		@ frame_needed = 0, uses_anonymous_args = 0
3107:os/tasks.c    ****     configASSERT( pxEventList );
 4430              		.loc 1 3107 1 is_stmt 0 view .LVU1243
 4431 0000 38B5     		push	{r3, r4, r5, lr}
 4432              	.LCFI39:
 4433              		.cfi_def_cfa_offset 16
 4434              		.cfi_offset 3, -16
 4435              		.cfi_offset 4, -12
 4436              		.cfi_offset 5, -8
 4437              		.cfi_offset 14, -4
3108:os/tasks.c    **** 
 4438              		.loc 1 3108 5 is_stmt 1 view .LVU1244
 4439 0002 78B1     		cbz	r0, .L351
 4440 0004 0B46     		mov	r3, r1
 4441 0006 1446     		mov	r4, r2
3108:os/tasks.c    **** 
 4442              		.loc 1 3108 32 discriminator 2 view .LVU1245
3112:os/tasks.c    **** 
 4443              		.loc 1 3112 5 discriminator 2 view .LVU1246
 4444 0008 134A     		ldr	r2, .L352
 4445              	.LVL318:
3112:os/tasks.c    **** 
 4446              		.loc 1 3112 5 is_stmt 0 discriminator 2 view .LVU1247
 4447 000a 1268     		ldr	r2, [r2]
 4448 000c AAB9     		cbnz	r2, .L348
3112:os/tasks.c    **** 
 4449              		.loc 1 3112 5 is_stmt 1 view .LVU1248
 4450              	.LBB218:
 4451              	.LBI218:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 4452              		.loc 2 193 34 view .LVU1249
 4453              	.LBB219:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4454              		.loc 2 195 9 view .LVU1250
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4455              		.loc 2 197 9 view .LVU1251
 4456              		.syntax unified
 4457              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4458 000e 4FF05003 			mov r3, #80												
 4459 0012 72B6     		cpsid i													
 4460 0014 83F31188 		msr basepri, r3											
 4461 0018 BFF36F8F 		isb														
 4462 001c BFF34F8F 		dsb														
 4463 0020 62B6     		cpsie i													
 4464              	
 4465              	@ 0 "" 2
 4466              	.LVL319:
 4467              		.thumb
 4468              		.syntax unified
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 197


 4469              	.L349:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4470              		.loc 2 197 9 is_stmt 0 view .LVU1252
 4471              	.LBE219:
 4472              	.LBE218:
3112:os/tasks.c    **** 
 4473              		.loc 1 3112 5 is_stmt 1 discriminator 2 view .LVU1253
3112:os/tasks.c    **** 
 4474              		.loc 1 3112 5 discriminator 2 view .LVU1254
3112:os/tasks.c    **** 
 4475              		.loc 1 3112 5 discriminator 2 view .LVU1255
 4476 0022 FEE7     		b	.L349
 4477              	.LVL320:
 4478              	.L351:
3108:os/tasks.c    **** 
 4479              		.loc 1 3108 5 view .LVU1256
 4480              	.LBB220:
 4481              	.LBI220:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 4482              		.loc 2 193 34 view .LVU1257
 4483              	.LBB221:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4484              		.loc 2 195 9 view .LVU1258
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4485              		.loc 2 197 9 view .LVU1259
 4486              		.syntax unified
 4487              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4488 0024 4FF05003 			mov r3, #80												
 4489 0028 72B6     		cpsid i													
 4490 002a 83F31188 		msr basepri, r3											
 4491 002e BFF36F8F 		isb														
 4492 0032 BFF34F8F 		dsb														
 4493 0036 62B6     		cpsie i													
 4494              	
 4495              	@ 0 "" 2
 4496              	.LVL321:
 4497              		.thumb
 4498              		.syntax unified
 4499              	.L347:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4500              		.loc 2 197 9 is_stmt 0 view .LVU1260
 4501              	.LBE221:
 4502              	.LBE220:
3108:os/tasks.c    **** 
 4503              		.loc 1 3108 5 is_stmt 1 discriminator 1 view .LVU1261
3108:os/tasks.c    **** 
 4504              		.loc 1 3108 5 discriminator 1 view .LVU1262
3108:os/tasks.c    **** 
 4505              		.loc 1 3108 5 discriminator 1 view .LVU1263
 4506 0038 FEE7     		b	.L347
 4507              	.LVL322:
 4508              	.L348:
3112:os/tasks.c    **** 
 4509              		.loc 1 3112 46 discriminator 2 view .LVU1264
3117:os/tasks.c    **** 
 4510              		.loc 1 3117 5 discriminator 2 view .LVU1265
 4511 003a 084A     		ldr	r2, .L352+4
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 198


 4512 003c 1168     		ldr	r1, [r2]
 4513              	.LVL323:
3117:os/tasks.c    **** 
 4514              		.loc 1 3117 5 is_stmt 0 discriminator 2 view .LVU1266
 4515 003e 43F00043 		orr	r3, r3, #-2147483648
 4516              	.LVL324:
3117:os/tasks.c    **** 
 4517              		.loc 1 3117 5 discriminator 2 view .LVU1267
 4518 0042 8B61     		str	r3, [r1, #24]
3124:os/tasks.c    **** 
 4519              		.loc 1 3124 5 is_stmt 1 discriminator 2 view .LVU1268
3124:os/tasks.c    **** 
 4520              		.loc 1 3124 49 is_stmt 0 discriminator 2 view .LVU1269
 4521 0044 1168     		ldr	r1, [r2]
3124:os/tasks.c    **** 
 4522              		.loc 1 3124 5 discriminator 2 view .LVU1270
 4523 0046 1831     		adds	r1, r1, #24
 4524 0048 FFF7FEFF 		bl	vListInsertEnd
 4525              	.LVL325:
3126:os/tasks.c    **** }
 4526              		.loc 1 3126 5 is_stmt 1 discriminator 2 view .LVU1271
 4527 004c 0121     		movs	r1, #1
 4528 004e 2046     		mov	r0, r4
 4529 0050 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4530              	.LVL326:
3127:os/tasks.c    **** /*-----------------------------------------------------------*/
 4531              		.loc 1 3127 1 is_stmt 0 discriminator 2 view .LVU1272
 4532 0054 38BD     		pop	{r3, r4, r5, pc}
 4533              	.LVL327:
 4534              	.L353:
3127:os/tasks.c    **** /*-----------------------------------------------------------*/
 4535              		.loc 1 3127 1 discriminator 2 view .LVU1273
 4536 0056 00BF     		.align	2
 4537              	.L352:
 4538 0058 00000000 		.word	.LANCHOR16
 4539 005c 00000000 		.word	.LANCHOR10
 4540              		.cfi_endproc
 4541              	.LFE32:
 4543              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4544              		.align	1
 4545              		.global	vTaskPlaceOnEventListRestricted
 4546              		.syntax unified
 4547              		.thumb
 4548              		.thumb_func
 4549              		.fpu fpv5-d16
 4551              	vTaskPlaceOnEventListRestricted:
 4552              	.LVL328:
 4553              	.LFB33:
3135:os/tasks.c    ****         configASSERT( pxEventList );
 4554              		.loc 1 3135 5 is_stmt 1 view -0
 4555              		.cfi_startproc
 4556              		@ args = 0, pretend = 0, frame = 0
 4557              		@ frame_needed = 0, uses_anonymous_args = 0
3135:os/tasks.c    ****         configASSERT( pxEventList );
 4558              		.loc 1 3135 5 is_stmt 0 view .LVU1275
 4559 0000 38B5     		push	{r3, r4, r5, lr}
 4560              	.LCFI40:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 199


 4561              		.cfi_def_cfa_offset 16
 4562              		.cfi_offset 3, -16
 4563              		.cfi_offset 4, -12
 4564              		.cfi_offset 5, -8
 4565              		.cfi_offset 14, -4
3136:os/tasks.c    **** 
 4566              		.loc 1 3136 9 is_stmt 1 view .LVU1276
 4567 0002 70B1     		cbz	r0, .L360
 4568 0004 0C46     		mov	r4, r1
 4569 0006 1546     		mov	r5, r2
3136:os/tasks.c    **** 
 4570              		.loc 1 3136 36 discriminator 2 view .LVU1277
3148:os/tasks.c    **** 
 4571              		.loc 1 3148 9 discriminator 2 view .LVU1278
3148:os/tasks.c    **** 
 4572              		.loc 1 3148 53 is_stmt 0 discriminator 2 view .LVU1279
 4573 0008 0B4B     		ldr	r3, .L361
 4574 000a 1968     		ldr	r1, [r3]
 4575              	.LVL329:
3148:os/tasks.c    **** 
 4576              		.loc 1 3148 9 discriminator 2 view .LVU1280
 4577 000c 1831     		adds	r1, r1, #24
 4578 000e FFF7FEFF 		bl	vListInsertEnd
 4579              	.LVL330:
3153:os/tasks.c    ****         {
 4580              		.loc 1 3153 9 is_stmt 1 discriminator 2 view .LVU1281
3153:os/tasks.c    ****         {
 4581              		.loc 1 3153 11 is_stmt 0 discriminator 2 view .LVU1282
 4582 0012 0DB1     		cbz	r5, .L357
3155:os/tasks.c    ****         }
 4583              		.loc 1 3155 26 view .LVU1283
 4584 0014 4FF0FF34 		mov	r4, #-1
 4585              	.LVL331:
 4586              	.L357:
3158:os/tasks.c    ****         prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4587              		.loc 1 3158 63 is_stmt 1 view .LVU1284
3159:os/tasks.c    ****     }
 4588              		.loc 1 3159 9 view .LVU1285
 4589 0018 2946     		mov	r1, r5
 4590 001a 2046     		mov	r0, r4
 4591 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 4592              	.LVL332:
3160:os/tasks.c    **** 
 4593              		.loc 1 3160 5 is_stmt 0 view .LVU1286
 4594 0020 38BD     		pop	{r3, r4, r5, pc}
 4595              	.LVL333:
 4596              	.L360:
3136:os/tasks.c    **** 
 4597              		.loc 1 3136 9 is_stmt 1 view .LVU1287
 4598              	.LBB222:
 4599              	.LBI222:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 4600              		.loc 2 193 34 view .LVU1288
 4601              	.LBB223:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4602              		.loc 2 195 9 view .LVU1289
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 200


 4603              		.loc 2 197 9 view .LVU1290
 4604              		.syntax unified
 4605              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4606 0022 4FF05003 			mov r3, #80												
 4607 0026 72B6     		cpsid i													
 4608 0028 83F31188 		msr basepri, r3											
 4609 002c BFF36F8F 		isb														
 4610 0030 BFF34F8F 		dsb														
 4611 0034 62B6     		cpsie i													
 4612              	
 4613              	@ 0 "" 2
 4614              	.LVL334:
 4615              		.thumb
 4616              		.syntax unified
 4617              	.L356:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4618              		.loc 2 197 9 is_stmt 0 view .LVU1291
 4619              	.LBE223:
 4620              	.LBE222:
3136:os/tasks.c    **** 
 4621              		.loc 1 3136 9 is_stmt 1 discriminator 1 view .LVU1292
3136:os/tasks.c    **** 
 4622              		.loc 1 3136 9 discriminator 1 view .LVU1293
3136:os/tasks.c    **** 
 4623              		.loc 1 3136 9 discriminator 1 view .LVU1294
 4624 0036 FEE7     		b	.L356
 4625              	.L362:
 4626              		.align	2
 4627              	.L361:
 4628 0038 00000000 		.word	.LANCHOR10
 4629              		.cfi_endproc
 4630              	.LFE33:
 4632              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4633              		.align	1
 4634              		.global	xTaskRemoveFromEventList
 4635              		.syntax unified
 4636              		.thumb
 4637              		.thumb_func
 4638              		.fpu fpv5-d16
 4640              	xTaskRemoveFromEventList:
 4641              	.LVL335:
 4642              	.LFB34:
3166:os/tasks.c    ****     TCB_t * pxUnblockedTCB;
 4643              		.loc 1 3166 1 view -0
 4644              		.cfi_startproc
 4645              		@ args = 0, pretend = 0, frame = 0
 4646              		@ frame_needed = 0, uses_anonymous_args = 0
3166:os/tasks.c    ****     TCB_t * pxUnblockedTCB;
 4647              		.loc 1 3166 1 is_stmt 0 view .LVU1296
 4648 0000 38B5     		push	{r3, r4, r5, lr}
 4649              	.LCFI41:
 4650              		.cfi_def_cfa_offset 16
 4651              		.cfi_offset 3, -16
 4652              		.cfi_offset 4, -12
 4653              		.cfi_offset 5, -8
 4654              		.cfi_offset 14, -4
3167:os/tasks.c    ****     BaseType_t xReturn;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 201


 4655              		.loc 1 3167 5 is_stmt 1 view .LVU1297
3168:os/tasks.c    **** 
 4656              		.loc 1 3168 5 view .LVU1298
3183:os/tasks.c    ****     configASSERT( pxUnblockedTCB );
 4657              		.loc 1 3183 5 view .LVU1299
3183:os/tasks.c    ****     configASSERT( pxUnblockedTCB );
 4658              		.loc 1 3183 22 is_stmt 0 view .LVU1300
 4659 0002 C368     		ldr	r3, [r0, #12]
3183:os/tasks.c    ****     configASSERT( pxUnblockedTCB );
 4660              		.loc 1 3183 20 view .LVU1301
 4661 0004 DC68     		ldr	r4, [r3, #12]
 4662              	.LVL336:
3184:os/tasks.c    ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4663              		.loc 1 3184 5 is_stmt 1 view .LVU1302
 4664 0006 24B3     		cbz	r4, .L372
3184:os/tasks.c    ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4665              		.loc 1 3184 35 discriminator 2 view .LVU1303
3185:os/tasks.c    **** 
 4666              		.loc 1 3185 5 discriminator 2 view .LVU1304
3185:os/tasks.c    **** 
 4667              		.loc 1 3185 14 is_stmt 0 discriminator 2 view .LVU1305
 4668 0008 04F11805 		add	r5, r4, #24
 4669 000c 2846     		mov	r0, r5
 4670              	.LVL337:
3185:os/tasks.c    **** 
 4671              		.loc 1 3185 14 discriminator 2 view .LVU1306
 4672 000e FFF7FEFF 		bl	uxListRemove
 4673              	.LVL338:
3187:os/tasks.c    ****     {
 4674              		.loc 1 3187 5 is_stmt 1 discriminator 2 view .LVU1307
3187:os/tasks.c    ****     {
 4675              		.loc 1 3187 30 is_stmt 0 discriminator 2 view .LVU1308
 4676 0012 194B     		ldr	r3, .L373
 4677 0014 1B68     		ldr	r3, [r3]
3187:os/tasks.c    ****     {
 4678              		.loc 1 3187 7 discriminator 2 view .LVU1309
 4679 0016 3BBB     		cbnz	r3, .L366
3189:os/tasks.c    ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4680              		.loc 1 3189 9 is_stmt 1 view .LVU1310
3189:os/tasks.c    ****         prvAddTaskToReadyList( pxUnblockedTCB );
 4681              		.loc 1 3189 18 is_stmt 0 view .LVU1311
 4682 0018 251D     		adds	r5, r4, #4
 4683 001a 2846     		mov	r0, r5
 4684 001c FFF7FEFF 		bl	uxListRemove
 4685              	.LVL339:
3190:os/tasks.c    **** 
 4686              		.loc 1 3190 9 is_stmt 1 view .LVU1312
3190:os/tasks.c    **** 
 4687              		.loc 1 3190 9 view .LVU1313
 4688 0020 E06A     		ldr	r0, [r4, #44]
 4689 0022 164B     		ldr	r3, .L373+4
 4690 0024 1B68     		ldr	r3, [r3]
 4691 0026 9842     		cmp	r0, r3
 4692 0028 01D9     		bls	.L367
3190:os/tasks.c    **** 
 4693              		.loc 1 3190 9 discriminator 1 view .LVU1314
 4694 002a 144B     		ldr	r3, .L373+4
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 202


 4695 002c 1860     		str	r0, [r3]
 4696              	.L367:
3190:os/tasks.c    **** 
 4697              		.loc 1 3190 9 discriminator 3 view .LVU1315
3190:os/tasks.c    **** 
 4698              		.loc 1 3190 9 discriminator 3 view .LVU1316
 4699 002e 00EB8000 		add	r0, r0, r0, lsl #2
 4700 0032 2946     		mov	r1, r5
 4701 0034 124B     		ldr	r3, .L373+8
 4702 0036 03EB8000 		add	r0, r3, r0, lsl #2
 4703 003a FFF7FEFF 		bl	vListInsertEnd
 4704              	.LVL340:
3190:os/tasks.c    **** 
 4705              		.loc 1 3190 48 discriminator 3 view .LVU1317
 4706              	.L368:
3213:os/tasks.c    ****     {
 4707              		.loc 1 3213 5 view .LVU1318
3213:os/tasks.c    ****     {
 4708              		.loc 1 3213 23 is_stmt 0 view .LVU1319
 4709 003e E26A     		ldr	r2, [r4, #44]
3213:os/tasks.c    ****     {
 4710              		.loc 1 3213 50 view .LVU1320
 4711 0040 104B     		ldr	r3, .L373+12
 4712 0042 1B68     		ldr	r3, [r3]
 4713 0044 DB6A     		ldr	r3, [r3, #44]
3213:os/tasks.c    ****     {
 4714              		.loc 1 3213 7 view .LVU1321
 4715 0046 9A42     		cmp	r2, r3
 4716 0048 13D9     		bls	.L370
3218:os/tasks.c    **** 
 4717              		.loc 1 3218 9 is_stmt 1 view .LVU1322
 4718              	.LVL341:
3222:os/tasks.c    ****     }
 4719              		.loc 1 3222 9 view .LVU1323
3222:os/tasks.c    ****     }
 4720              		.loc 1 3222 23 is_stmt 0 view .LVU1324
 4721 004a 0120     		movs	r0, #1
 4722 004c 0E4B     		ldr	r3, .L373+16
 4723 004e 1860     		str	r0, [r3]
 4724 0050 10E0     		b	.L363
 4725              	.LVL342:
 4726              	.L372:
3184:os/tasks.c    ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4727              		.loc 1 3184 5 is_stmt 1 view .LVU1325
 4728              	.LBB224:
 4729              	.LBI224:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 4730              		.loc 2 193 34 view .LVU1326
 4731              	.LBB225:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4732              		.loc 2 195 9 view .LVU1327
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4733              		.loc 2 197 9 view .LVU1328
 4734              		.syntax unified
 4735              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4736 0052 4FF05003 			mov r3, #80												
 4737 0056 72B6     		cpsid i													
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 203


 4738 0058 83F31188 		msr basepri, r3											
 4739 005c BFF36F8F 		isb														
 4740 0060 BFF34F8F 		dsb														
 4741 0064 62B6     		cpsie i													
 4742              	
 4743              	@ 0 "" 2
 4744              	.LVL343:
 4745              		.thumb
 4746              		.syntax unified
 4747              	.L365:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4748              		.loc 2 197 9 is_stmt 0 view .LVU1329
 4749              	.LBE225:
 4750              	.LBE224:
3184:os/tasks.c    ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4751              		.loc 1 3184 5 is_stmt 1 discriminator 1 view .LVU1330
3184:os/tasks.c    ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4752              		.loc 1 3184 5 discriminator 1 view .LVU1331
3184:os/tasks.c    ****     ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4753              		.loc 1 3184 5 discriminator 1 view .LVU1332
 4754 0066 FEE7     		b	.L365
 4755              	.LVL344:
 4756              	.L366:
3210:os/tasks.c    ****     }
 4757              		.loc 1 3210 9 view .LVU1333
 4758 0068 2946     		mov	r1, r5
 4759 006a 0848     		ldr	r0, .L373+20
 4760 006c FFF7FEFF 		bl	vListInsertEnd
 4761              	.LVL345:
 4762 0070 E5E7     		b	.L368
 4763              	.L370:
3226:os/tasks.c    ****     }
 4764              		.loc 1 3226 17 is_stmt 0 view .LVU1334
 4765 0072 0020     		movs	r0, #0
 4766              	.LVL346:
3229:os/tasks.c    **** }
 4767              		.loc 1 3229 5 is_stmt 1 view .LVU1335
 4768              	.L363:
3230:os/tasks.c    **** /*-----------------------------------------------------------*/
 4769              		.loc 1 3230 1 is_stmt 0 view .LVU1336
 4770 0074 38BD     		pop	{r3, r4, r5, pc}
 4771              	.LVL347:
 4772              	.L374:
3230:os/tasks.c    **** /*-----------------------------------------------------------*/
 4773              		.loc 1 3230 1 view .LVU1337
 4774 0076 00BF     		.align	2
 4775              	.L373:
 4776 0078 00000000 		.word	.LANCHOR16
 4777 007c 00000000 		.word	.LANCHOR13
 4778 0080 00000000 		.word	.LANCHOR4
 4779 0084 00000000 		.word	.LANCHOR10
 4780 0088 00000000 		.word	.LANCHOR17
 4781 008c 00000000 		.word	.LANCHOR1
 4782              		.cfi_endproc
 4783              	.LFE34:
 4785              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4786              		.align	1
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 204


 4787              		.global	vTaskRemoveFromUnorderedEventList
 4788              		.syntax unified
 4789              		.thumb
 4790              		.thumb_func
 4791              		.fpu fpv5-d16
 4793              	vTaskRemoveFromUnorderedEventList:
 4794              	.LVL348:
 4795              	.LFB35:
3235:os/tasks.c    ****     TCB_t * pxUnblockedTCB;
 4796              		.loc 1 3235 1 is_stmt 1 view -0
 4797              		.cfi_startproc
 4798              		@ args = 0, pretend = 0, frame = 0
 4799              		@ frame_needed = 0, uses_anonymous_args = 0
3235:os/tasks.c    ****     TCB_t * pxUnblockedTCB;
 4800              		.loc 1 3235 1 is_stmt 0 view .LVU1339
 4801 0000 38B5     		push	{r3, r4, r5, lr}
 4802              	.LCFI42:
 4803              		.cfi_def_cfa_offset 16
 4804              		.cfi_offset 3, -16
 4805              		.cfi_offset 4, -12
 4806              		.cfi_offset 5, -8
 4807              		.cfi_offset 14, -4
3236:os/tasks.c    **** 
 4808              		.loc 1 3236 5 is_stmt 1 view .LVU1340
3240:os/tasks.c    **** 
 4809              		.loc 1 3240 5 view .LVU1341
 4810 0002 1E4A     		ldr	r2, .L384
 4811 0004 1268     		ldr	r2, [r2]
 4812 0006 52B9     		cbnz	r2, .L376
3240:os/tasks.c    **** 
 4813              		.loc 1 3240 5 view .LVU1342
 4814              	.LBB226:
 4815              	.LBI226:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 4816              		.loc 2 193 34 view .LVU1343
 4817              	.LBB227:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4818              		.loc 2 195 9 view .LVU1344
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4819              		.loc 2 197 9 view .LVU1345
 4820              		.syntax unified
 4821              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4822 0008 4FF05003 			mov r3, #80												
 4823 000c 72B6     		cpsid i													
 4824 000e 83F31188 		msr basepri, r3											
 4825 0012 BFF36F8F 		isb														
 4826 0016 BFF34F8F 		dsb														
 4827 001a 62B6     		cpsie i													
 4828              	
 4829              	@ 0 "" 2
 4830              	.LVL349:
 4831              		.thumb
 4832              		.syntax unified
 4833              	.L377:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4834              		.loc 2 197 9 is_stmt 0 view .LVU1346
 4835              	.LBE227:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 205


 4836              	.LBE226:
3240:os/tasks.c    **** 
 4837              		.loc 1 3240 5 is_stmt 1 discriminator 1 view .LVU1347
3240:os/tasks.c    **** 
 4838              		.loc 1 3240 5 discriminator 1 view .LVU1348
3240:os/tasks.c    **** 
 4839              		.loc 1 3240 5 discriminator 1 view .LVU1349
 4840 001c FEE7     		b	.L377
 4841              	.L376:
3240:os/tasks.c    **** 
 4842              		.loc 1 3240 52 discriminator 2 view .LVU1350
3243:os/tasks.c    **** 
 4843              		.loc 1 3243 5 discriminator 2 view .LVU1351
 4844 001e 41F00043 		orr	r3, r1, #-2147483648
 4845 0022 0360     		str	r3, [r0]
3247:os/tasks.c    ****     configASSERT( pxUnblockedTCB );
 4846              		.loc 1 3247 5 discriminator 2 view .LVU1352
3247:os/tasks.c    ****     configASSERT( pxUnblockedTCB );
 4847              		.loc 1 3247 20 is_stmt 0 discriminator 2 view .LVU1353
 4848 0024 C468     		ldr	r4, [r0, #12]
 4849              	.LVL350:
3248:os/tasks.c    ****     ( void ) uxListRemove( pxEventListItem );
 4850              		.loc 1 3248 5 is_stmt 1 discriminator 2 view .LVU1354
 4851 0026 F4B1     		cbz	r4, .L383
3248:os/tasks.c    ****     ( void ) uxListRemove( pxEventListItem );
 4852              		.loc 1 3248 35 discriminator 2 view .LVU1355
3249:os/tasks.c    **** 
 4853              		.loc 1 3249 5 discriminator 2 view .LVU1356
3249:os/tasks.c    **** 
 4854              		.loc 1 3249 14 is_stmt 0 discriminator 2 view .LVU1357
 4855 0028 FFF7FEFF 		bl	uxListRemove
 4856              	.LVL351:
3268:os/tasks.c    ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4857              		.loc 1 3268 5 is_stmt 1 discriminator 2 view .LVU1358
3268:os/tasks.c    ****     prvAddTaskToReadyList( pxUnblockedTCB );
 4858              		.loc 1 3268 14 is_stmt 0 discriminator 2 view .LVU1359
 4859 002c 251D     		adds	r5, r4, #4
 4860 002e 2846     		mov	r0, r5
 4861 0030 FFF7FEFF 		bl	uxListRemove
 4862              	.LVL352:
3269:os/tasks.c    **** 
 4863              		.loc 1 3269 5 is_stmt 1 discriminator 2 view .LVU1360
3269:os/tasks.c    **** 
 4864              		.loc 1 3269 5 discriminator 2 view .LVU1361
 4865 0034 E06A     		ldr	r0, [r4, #44]
 4866 0036 124B     		ldr	r3, .L384+4
 4867 0038 1B68     		ldr	r3, [r3]
 4868 003a 9842     		cmp	r0, r3
 4869 003c 01D9     		bls	.L380
3269:os/tasks.c    **** 
 4870              		.loc 1 3269 5 discriminator 1 view .LVU1362
 4871 003e 104B     		ldr	r3, .L384+4
 4872 0040 1860     		str	r0, [r3]
 4873              	.L380:
3269:os/tasks.c    **** 
 4874              		.loc 1 3269 5 discriminator 3 view .LVU1363
3269:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 206


 4875              		.loc 1 3269 5 discriminator 3 view .LVU1364
 4876 0042 00EB8000 		add	r0, r0, r0, lsl #2
 4877 0046 2946     		mov	r1, r5
 4878 0048 0E4B     		ldr	r3, .L384+8
 4879 004a 03EB8000 		add	r0, r3, r0, lsl #2
 4880 004e FFF7FEFF 		bl	vListInsertEnd
 4881              	.LVL353:
3269:os/tasks.c    **** 
 4882              		.loc 1 3269 44 discriminator 3 view .LVU1365
3271:os/tasks.c    ****     {
 4883              		.loc 1 3271 5 discriminator 3 view .LVU1366
3271:os/tasks.c    ****     {
 4884              		.loc 1 3271 23 is_stmt 0 discriminator 3 view .LVU1367
 4885 0052 E26A     		ldr	r2, [r4, #44]
3271:os/tasks.c    ****     {
 4886              		.loc 1 3271 50 discriminator 3 view .LVU1368
 4887 0054 0C4B     		ldr	r3, .L384+12
 4888 0056 1B68     		ldr	r3, [r3]
 4889 0058 DB6A     		ldr	r3, [r3, #44]
3271:os/tasks.c    ****     {
 4890              		.loc 1 3271 7 discriminator 3 view .LVU1369
 4891 005a 9A42     		cmp	r2, r3
 4892 005c 02D9     		bls	.L375
3277:os/tasks.c    ****     }
 4893              		.loc 1 3277 9 is_stmt 1 view .LVU1370
3277:os/tasks.c    ****     }
 4894              		.loc 1 3277 23 is_stmt 0 view .LVU1371
 4895 005e 0B4B     		ldr	r3, .L384+16
 4896 0060 0122     		movs	r2, #1
 4897 0062 1A60     		str	r2, [r3]
 4898              	.L375:
3279:os/tasks.c    **** /*-----------------------------------------------------------*/
 4899              		.loc 1 3279 1 view .LVU1372
 4900 0064 38BD     		pop	{r3, r4, r5, pc}
 4901              	.LVL354:
 4902              	.L383:
3248:os/tasks.c    ****     ( void ) uxListRemove( pxEventListItem );
 4903              		.loc 1 3248 5 is_stmt 1 view .LVU1373
 4904              	.LBB228:
 4905              	.LBI228:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 4906              		.loc 2 193 34 view .LVU1374
 4907              	.LBB229:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4908              		.loc 2 195 9 view .LVU1375
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4909              		.loc 2 197 9 view .LVU1376
 4910              		.syntax unified
 4911              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 4912 0066 4FF05003 			mov r3, #80												
 4913 006a 72B6     		cpsid i													
 4914 006c 83F31188 		msr basepri, r3											
 4915 0070 BFF36F8F 		isb														
 4916 0074 BFF34F8F 		dsb														
 4917 0078 62B6     		cpsie i													
 4918              	
 4919              	@ 0 "" 2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 207


 4920              	.LVL355:
 4921              		.thumb
 4922              		.syntax unified
 4923              	.L379:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4924              		.loc 2 197 9 is_stmt 0 view .LVU1377
 4925              	.LBE229:
 4926              	.LBE228:
3248:os/tasks.c    ****     ( void ) uxListRemove( pxEventListItem );
 4927              		.loc 1 3248 5 is_stmt 1 discriminator 2 view .LVU1378
3248:os/tasks.c    ****     ( void ) uxListRemove( pxEventListItem );
 4928              		.loc 1 3248 5 discriminator 2 view .LVU1379
3248:os/tasks.c    ****     ( void ) uxListRemove( pxEventListItem );
 4929              		.loc 1 3248 5 discriminator 2 view .LVU1380
 4930 007a FEE7     		b	.L379
 4931              	.L385:
 4932              		.align	2
 4933              	.L384:
 4934 007c 00000000 		.word	.LANCHOR16
 4935 0080 00000000 		.word	.LANCHOR13
 4936 0084 00000000 		.word	.LANCHOR4
 4937 0088 00000000 		.word	.LANCHOR10
 4938 008c 00000000 		.word	.LANCHOR17
 4939              		.cfi_endproc
 4940              	.LFE35:
 4942              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 4943              		.align	1
 4944              		.global	vTaskSetTimeOutState
 4945              		.syntax unified
 4946              		.thumb
 4947              		.thumb_func
 4948              		.fpu fpv5-d16
 4950              	vTaskSetTimeOutState:
 4951              	.LVL356:
 4952              	.LFB36:
3283:os/tasks.c    ****     configASSERT( pxTimeOut );
 4953              		.loc 1 3283 1 view -0
 4954              		.cfi_startproc
 4955              		@ args = 0, pretend = 0, frame = 0
 4956              		@ frame_needed = 0, uses_anonymous_args = 0
3284:os/tasks.c    ****     taskENTER_CRITICAL();
 4957              		.loc 1 3284 5 view .LVU1382
 4958 0000 60B1     		cbz	r0, .L391
3283:os/tasks.c    ****     configASSERT( pxTimeOut );
 4959              		.loc 1 3283 1 is_stmt 0 discriminator 2 view .LVU1383
 4960 0002 10B5     		push	{r4, lr}
 4961              	.LCFI43:
 4962              		.cfi_def_cfa_offset 8
 4963              		.cfi_offset 4, -8
 4964              		.cfi_offset 14, -4
 4965 0004 0446     		mov	r4, r0
3284:os/tasks.c    ****     taskENTER_CRITICAL();
 4966              		.loc 1 3284 30 is_stmt 1 discriminator 2 view .LVU1384
3285:os/tasks.c    ****     {
 4967              		.loc 1 3285 5 discriminator 2 view .LVU1385
 4968 0006 FFF7FEFF 		bl	vPortEnterCritical
 4969              	.LVL357:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 208


3287:os/tasks.c    ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4970              		.loc 1 3287 9 discriminator 2 view .LVU1386
3287:os/tasks.c    ****         pxTimeOut->xTimeOnEntering = xTickCount;
 4971              		.loc 1 3287 35 is_stmt 0 discriminator 2 view .LVU1387
 4972 000a 0A4B     		ldr	r3, .L392
 4973 000c 1B68     		ldr	r3, [r3]
 4974 000e 2360     		str	r3, [r4]
3288:os/tasks.c    ****     }
 4975              		.loc 1 3288 9 is_stmt 1 discriminator 2 view .LVU1388
3288:os/tasks.c    ****     }
 4976              		.loc 1 3288 36 is_stmt 0 discriminator 2 view .LVU1389
 4977 0010 094B     		ldr	r3, .L392+4
 4978 0012 1B68     		ldr	r3, [r3]
 4979 0014 6360     		str	r3, [r4, #4]
3290:os/tasks.c    **** }
 4980              		.loc 1 3290 5 is_stmt 1 discriminator 2 view .LVU1390
 4981 0016 FFF7FEFF 		bl	vPortExitCritical
 4982              	.LVL358:
3291:os/tasks.c    **** /*-----------------------------------------------------------*/
 4983              		.loc 1 3291 1 is_stmt 0 discriminator 2 view .LVU1391
 4984 001a 10BD     		pop	{r4, pc}
 4985              	.LVL359:
 4986              	.L391:
 4987              	.LCFI44:
 4988              		.cfi_def_cfa_offset 0
 4989              		.cfi_restore 4
 4990              		.cfi_restore 14
3284:os/tasks.c    ****     taskENTER_CRITICAL();
 4991              		.loc 1 3284 5 is_stmt 1 view .LVU1392
 4992              	.LBB230:
 4993              	.LBI230:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 4994              		.loc 2 193 34 view .LVU1393
 4995              	.LBB231:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 4996              		.loc 2 195 9 view .LVU1394
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 4997              		.loc 2 197 9 view .LVU1395
 4998              		.syntax unified
 4999              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5000 001c 4FF05003 			mov r3, #80												
 5001 0020 72B6     		cpsid i													
 5002 0022 83F31188 		msr basepri, r3											
 5003 0026 BFF36F8F 		isb														
 5004 002a BFF34F8F 		dsb														
 5005 002e 62B6     		cpsie i													
 5006              	
 5007              	@ 0 "" 2
 5008              	.LVL360:
 5009              		.thumb
 5010              		.syntax unified
 5011              	.L388:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 5012              		.loc 2 197 9 is_stmt 0 view .LVU1396
 5013              	.LBE231:
 5014              	.LBE230:
3284:os/tasks.c    ****     taskENTER_CRITICAL();
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 209


 5015              		.loc 1 3284 5 is_stmt 1 discriminator 1 view .LVU1397
3284:os/tasks.c    ****     taskENTER_CRITICAL();
 5016              		.loc 1 3284 5 discriminator 1 view .LVU1398
3284:os/tasks.c    ****     taskENTER_CRITICAL();
 5017              		.loc 1 3284 5 discriminator 1 view .LVU1399
 5018 0030 FEE7     		b	.L388
 5019              	.L393:
 5020 0032 00BF     		.align	2
 5021              	.L392:
 5022 0034 00000000 		.word	.LANCHOR19
 5023 0038 00000000 		.word	.LANCHOR15
 5024              		.cfi_endproc
 5025              	.LFE36:
 5027              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 5028              		.align	1
 5029              		.global	vTaskInternalSetTimeOutState
 5030              		.syntax unified
 5031              		.thumb
 5032              		.thumb_func
 5033              		.fpu fpv5-d16
 5035              	vTaskInternalSetTimeOutState:
 5036              	.LVL361:
 5037              	.LFB37:
3295:os/tasks.c    ****     /* For internal use only as it does not use a critical section. */
 5038              		.loc 1 3295 1 view -0
 5039              		.cfi_startproc
 5040              		@ args = 0, pretend = 0, frame = 0
 5041              		@ frame_needed = 0, uses_anonymous_args = 0
 5042              		@ link register save eliminated.
3297:os/tasks.c    ****     pxTimeOut->xTimeOnEntering = xTickCount;
 5043              		.loc 1 3297 5 view .LVU1401
3297:os/tasks.c    ****     pxTimeOut->xTimeOnEntering = xTickCount;
 5044              		.loc 1 3297 31 is_stmt 0 view .LVU1402
 5045 0000 034B     		ldr	r3, .L395
 5046 0002 1B68     		ldr	r3, [r3]
 5047 0004 0360     		str	r3, [r0]
3298:os/tasks.c    **** }
 5048              		.loc 1 3298 5 is_stmt 1 view .LVU1403
3298:os/tasks.c    **** }
 5049              		.loc 1 3298 32 is_stmt 0 view .LVU1404
 5050 0006 034B     		ldr	r3, .L395+4
 5051 0008 1B68     		ldr	r3, [r3]
 5052 000a 4360     		str	r3, [r0, #4]
3299:os/tasks.c    **** /*-----------------------------------------------------------*/
 5053              		.loc 1 3299 1 view .LVU1405
 5054 000c 7047     		bx	lr
 5055              	.L396:
 5056 000e 00BF     		.align	2
 5057              	.L395:
 5058 0010 00000000 		.word	.LANCHOR19
 5059 0014 00000000 		.word	.LANCHOR15
 5060              		.cfi_endproc
 5061              	.LFE37:
 5063              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 5064              		.align	1
 5065              		.global	xTaskCheckForTimeOut
 5066              		.syntax unified
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 210


 5067              		.thumb
 5068              		.thumb_func
 5069              		.fpu fpv5-d16
 5071              	xTaskCheckForTimeOut:
 5072              	.LVL362:
 5073              	.LFB38:
3304:os/tasks.c    ****     BaseType_t xReturn;
 5074              		.loc 1 3304 1 is_stmt 1 view -0
 5075              		.cfi_startproc
 5076              		@ args = 0, pretend = 0, frame = 0
 5077              		@ frame_needed = 0, uses_anonymous_args = 0
3304:os/tasks.c    ****     BaseType_t xReturn;
 5078              		.loc 1 3304 1 is_stmt 0 view .LVU1407
 5079 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5080              	.LCFI45:
 5081              		.cfi_def_cfa_offset 24
 5082              		.cfi_offset 3, -24
 5083              		.cfi_offset 4, -20
 5084              		.cfi_offset 5, -16
 5085              		.cfi_offset 6, -12
 5086              		.cfi_offset 7, -8
 5087              		.cfi_offset 14, -4
3305:os/tasks.c    **** 
 5088              		.loc 1 3305 5 is_stmt 1 view .LVU1408
3307:os/tasks.c    ****     configASSERT( pxTicksToWait );
 5089              		.loc 1 3307 5 view .LVU1409
 5090 0002 B8B1     		cbz	r0, .L407
 5091 0004 0C46     		mov	r4, r1
 5092 0006 0546     		mov	r5, r0
3307:os/tasks.c    ****     configASSERT( pxTicksToWait );
 5093              		.loc 1 3307 30 discriminator 2 view .LVU1410
3308:os/tasks.c    **** 
 5094              		.loc 1 3308 5 discriminator 2 view .LVU1411
 5095 0008 F9B1     		cbz	r1, .L408
3308:os/tasks.c    **** 
 5096              		.loc 1 3308 34 discriminator 2 view .LVU1412
3310:os/tasks.c    ****     {
 5097              		.loc 1 3310 5 discriminator 2 view .LVU1413
 5098 000a FFF7FEFF 		bl	vPortEnterCritical
 5099              	.LVL363:
 5100              	.LBB232:
3313:os/tasks.c    ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5101              		.loc 1 3313 9 discriminator 2 view .LVU1414
3313:os/tasks.c    ****         const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5102              		.loc 1 3313 26 is_stmt 0 discriminator 2 view .LVU1415
 5103 000e 1E4B     		ldr	r3, .L410
 5104 0010 1968     		ldr	r1, [r3]
 5105              	.LVL364:
3314:os/tasks.c    **** 
 5106              		.loc 1 3314 9 is_stmt 1 discriminator 2 view .LVU1416
3314:os/tasks.c    **** 
 5107              		.loc 1 3314 68 is_stmt 0 discriminator 2 view .LVU1417
 5108 0012 6B68     		ldr	r3, [r5, #4]
3314:os/tasks.c    **** 
 5109              		.loc 1 3314 26 discriminator 2 view .LVU1418
 5110 0014 C81A     		subs	r0, r1, r3
 5111              	.LVL365:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 211


3328:os/tasks.c    ****             {
 5112              		.loc 1 3328 13 is_stmt 1 discriminator 2 view .LVU1419
3328:os/tasks.c    ****             {
 5113              		.loc 1 3328 17 is_stmt 0 discriminator 2 view .LVU1420
 5114 0016 2268     		ldr	r2, [r4]
3328:os/tasks.c    ****             {
 5115              		.loc 1 3328 15 discriminator 2 view .LVU1421
 5116 0018 B2F1FF3F 		cmp	r2, #-1
 5117 001c 2ED0     		beq	.L405
3338:os/tasks.c    ****         {
 5118              		.loc 1 3338 9 is_stmt 1 view .LVU1422
3338:os/tasks.c    ****         {
 5119              		.loc 1 3338 43 is_stmt 0 view .LVU1423
 5120 001e 2F68     		ldr	r7, [r5]
3338:os/tasks.c    ****         {
 5121              		.loc 1 3338 31 view .LVU1424
 5122 0020 1A4E     		ldr	r6, .L410+4
 5123 0022 3668     		ldr	r6, [r6]
3338:os/tasks.c    ****         {
 5124              		.loc 1 3338 11 view .LVU1425
 5125 0024 B742     		cmp	r7, r6
 5126 0026 1BD0     		beq	.L403
3338:os/tasks.c    ****         {
 5127              		.loc 1 3338 62 discriminator 1 view .LVU1426
 5128 0028 8B42     		cmp	r3, r1
 5129 002a 19D8     		bhi	.L403
3345:os/tasks.c    ****             *pxTicksToWait = ( TickType_t ) 0;
 5130              		.loc 1 3345 13 is_stmt 1 view .LVU1427
 5131              	.LVL366:
3346:os/tasks.c    ****         }
 5132              		.loc 1 3346 13 view .LVU1428
3346:os/tasks.c    ****         }
 5133              		.loc 1 3346 28 is_stmt 0 view .LVU1429
 5134 002c 0023     		movs	r3, #0
 5135 002e 2360     		str	r3, [r4]
3345:os/tasks.c    ****             *pxTicksToWait = ( TickType_t ) 0;
 5136              		.loc 1 3345 21 view .LVU1430
 5137 0030 0124     		movs	r4, #1
 5138              	.LVL367:
3346:os/tasks.c    ****         }
 5139              		.loc 1 3346 28 view .LVU1431
 5140 0032 24E0     		b	.L402
 5141              	.LVL368:
 5142              	.L407:
3346:os/tasks.c    ****         }
 5143              		.loc 1 3346 28 view .LVU1432
 5144              	.LBE232:
3307:os/tasks.c    ****     configASSERT( pxTicksToWait );
 5145              		.loc 1 3307 5 is_stmt 1 view .LVU1433
 5146              	.LBB233:
 5147              	.LBI233:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 5148              		.loc 2 193 34 view .LVU1434
 5149              	.LBB234:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5150              		.loc 2 195 9 view .LVU1435
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 212


 5151              		.loc 2 197 9 view .LVU1436
 5152              		.syntax unified
 5153              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5154 0034 4FF05003 			mov r3, #80												
 5155 0038 72B6     		cpsid i													
 5156 003a 83F31188 		msr basepri, r3											
 5157 003e BFF36F8F 		isb														
 5158 0042 BFF34F8F 		dsb														
 5159 0046 62B6     		cpsie i													
 5160              	
 5161              	@ 0 "" 2
 5162              	.LVL369:
 5163              		.thumb
 5164              		.syntax unified
 5165              	.L399:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 5166              		.loc 2 197 9 is_stmt 0 view .LVU1437
 5167              	.LBE234:
 5168              	.LBE233:
3307:os/tasks.c    ****     configASSERT( pxTicksToWait );
 5169              		.loc 1 3307 5 is_stmt 1 discriminator 1 view .LVU1438
3307:os/tasks.c    ****     configASSERT( pxTicksToWait );
 5170              		.loc 1 3307 5 discriminator 1 view .LVU1439
3307:os/tasks.c    ****     configASSERT( pxTicksToWait );
 5171              		.loc 1 3307 5 discriminator 1 view .LVU1440
 5172 0048 FEE7     		b	.L399
 5173              	.L408:
3308:os/tasks.c    **** 
 5174              		.loc 1 3308 5 view .LVU1441
 5175              	.LBB235:
 5176              	.LBI235:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 5177              		.loc 2 193 34 view .LVU1442
 5178              	.LBB236:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 5179              		.loc 2 195 9 view .LVU1443
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 5180              		.loc 2 197 9 view .LVU1444
 5181              		.syntax unified
 5182              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 5183 004a 4FF05003 			mov r3, #80												
 5184 004e 72B6     		cpsid i													
 5185 0050 83F31188 		msr basepri, r3											
 5186 0054 BFF36F8F 		isb														
 5187 0058 BFF34F8F 		dsb														
 5188 005c 62B6     		cpsie i													
 5189              	
 5190              	@ 0 "" 2
 5191              	.LVL370:
 5192              		.thumb
 5193              		.syntax unified
 5194              	.L401:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 5195              		.loc 2 197 9 is_stmt 0 view .LVU1445
 5196              	.LBE236:
 5197              	.LBE235:
3308:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 213


 5198              		.loc 1 3308 5 is_stmt 1 discriminator 2 view .LVU1446
3308:os/tasks.c    **** 
 5199              		.loc 1 3308 5 discriminator 2 view .LVU1447
3308:os/tasks.c    **** 
 5200              		.loc 1 3308 5 discriminator 2 view .LVU1448
 5201 005e FEE7     		b	.L401
 5202              	.LVL371:
 5203              	.L403:
 5204              	.LBB237:
3348:os/tasks.c    ****         {
 5205              		.loc 1 3348 14 view .LVU1449
3348:os/tasks.c    ****         {
 5206              		.loc 1 3348 16 is_stmt 0 view .LVU1450
 5207 0060 8242     		cmp	r2, r0
 5208 0062 03D8     		bhi	.L409
3357:os/tasks.c    ****             xReturn = pdTRUE;
 5209              		.loc 1 3357 13 is_stmt 1 view .LVU1451
3357:os/tasks.c    ****             xReturn = pdTRUE;
 5210              		.loc 1 3357 28 is_stmt 0 view .LVU1452
 5211 0064 0023     		movs	r3, #0
 5212 0066 2360     		str	r3, [r4]
3358:os/tasks.c    ****         }
 5213              		.loc 1 3358 13 is_stmt 1 view .LVU1453
 5214              	.LVL372:
3358:os/tasks.c    ****         }
 5215              		.loc 1 3358 21 is_stmt 0 view .LVU1454
 5216 0068 0124     		movs	r4, #1
 5217              	.LVL373:
3358:os/tasks.c    ****         }
 5218              		.loc 1 3358 21 view .LVU1455
 5219 006a 08E0     		b	.L402
 5220              	.LVL374:
 5221              	.L409:
3351:os/tasks.c    ****             vTaskInternalSetTimeOutState( pxTimeOut );
 5222              		.loc 1 3351 13 is_stmt 1 view .LVU1456
3351:os/tasks.c    ****             vTaskInternalSetTimeOutState( pxTimeOut );
 5223              		.loc 1 3351 28 is_stmt 0 view .LVU1457
 5224 006c 5B1A     		subs	r3, r3, r1
 5225 006e 1344     		add	r3, r3, r2
 5226 0070 2360     		str	r3, [r4]
3352:os/tasks.c    ****             xReturn = pdFALSE;
 5227              		.loc 1 3352 13 is_stmt 1 view .LVU1458
 5228 0072 2846     		mov	r0, r5
 5229              	.LVL375:
3352:os/tasks.c    ****             xReturn = pdFALSE;
 5230              		.loc 1 3352 13 is_stmt 0 view .LVU1459
 5231 0074 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 5232              	.LVL376:
3353:os/tasks.c    ****         }
 5233              		.loc 1 3353 13 is_stmt 1 view .LVU1460
3353:os/tasks.c    ****         }
 5234              		.loc 1 3353 21 is_stmt 0 view .LVU1461
 5235 0078 0024     		movs	r4, #0
 5236              	.LVL377:
3353:os/tasks.c    ****         }
 5237              		.loc 1 3353 21 view .LVU1462
 5238 007a 00E0     		b	.L402
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 214


 5239              	.LVL378:
 5240              	.L405:
3333:os/tasks.c    ****             }
 5241              		.loc 1 3333 25 view .LVU1463
 5242 007c 0024     		movs	r4, #0
 5243              	.LVL379:
 5244              	.L402:
3333:os/tasks.c    ****             }
 5245              		.loc 1 3333 25 view .LVU1464
 5246              	.LBE237:
3361:os/tasks.c    **** 
 5247              		.loc 1 3361 5 is_stmt 1 view .LVU1465
 5248 007e FFF7FEFF 		bl	vPortExitCritical
 5249              	.LVL380:
3363:os/tasks.c    **** }
 5250              		.loc 1 3363 5 view .LVU1466
3364:os/tasks.c    **** /*-----------------------------------------------------------*/
 5251              		.loc 1 3364 1 is_stmt 0 view .LVU1467
 5252 0082 2046     		mov	r0, r4
 5253 0084 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5254              	.LVL381:
 5255              	.L411:
3364:os/tasks.c    **** /*-----------------------------------------------------------*/
 5256              		.loc 1 3364 1 view .LVU1468
 5257 0086 00BF     		.align	2
 5258              	.L410:
 5259 0088 00000000 		.word	.LANCHOR15
 5260 008c 00000000 		.word	.LANCHOR19
 5261              		.cfi_endproc
 5262              	.LFE38:
 5264              		.section	.text.vTaskMissedYield,"ax",%progbits
 5265              		.align	1
 5266              		.global	vTaskMissedYield
 5267              		.syntax unified
 5268              		.thumb
 5269              		.thumb_func
 5270              		.fpu fpv5-d16
 5272              	vTaskMissedYield:
 5273              	.LFB39:
3368:os/tasks.c    ****     xYieldPending = pdTRUE;
 5274              		.loc 1 3368 1 is_stmt 1 view -0
 5275              		.cfi_startproc
 5276              		@ args = 0, pretend = 0, frame = 0
 5277              		@ frame_needed = 0, uses_anonymous_args = 0
 5278              		@ link register save eliminated.
3369:os/tasks.c    **** }
 5279              		.loc 1 3369 5 view .LVU1470
3369:os/tasks.c    **** }
 5280              		.loc 1 3369 19 is_stmt 0 view .LVU1471
 5281 0000 014B     		ldr	r3, .L413
 5282 0002 0122     		movs	r2, #1
 5283 0004 1A60     		str	r2, [r3]
3370:os/tasks.c    **** /*-----------------------------------------------------------*/
 5284              		.loc 1 3370 1 view .LVU1472
 5285 0006 7047     		bx	lr
 5286              	.L414:
 5287              		.align	2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 215


 5288              	.L413:
 5289 0008 00000000 		.word	.LANCHOR17
 5290              		.cfi_endproc
 5291              	.LFE39:
 5293              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5294              		.align	1
 5295              		.global	uxTaskGetTaskNumber
 5296              		.syntax unified
 5297              		.thumb
 5298              		.thumb_func
 5299              		.fpu fpv5-d16
 5301              	uxTaskGetTaskNumber:
 5302              	.LVL382:
 5303              	.LFB40:
3376:os/tasks.c    ****         UBaseType_t uxReturn;
 5304              		.loc 1 3376 5 is_stmt 1 view -0
 5305              		.cfi_startproc
 5306              		@ args = 0, pretend = 0, frame = 0
 5307              		@ frame_needed = 0, uses_anonymous_args = 0
 5308              		@ link register save eliminated.
3377:os/tasks.c    ****         TCB_t const * pxTCB;
 5309              		.loc 1 3377 9 view .LVU1474
3378:os/tasks.c    **** 
 5310              		.loc 1 3378 9 view .LVU1475
3380:os/tasks.c    ****         {
 5311              		.loc 1 3380 9 view .LVU1476
3380:os/tasks.c    ****         {
 5312              		.loc 1 3380 11 is_stmt 0 view .LVU1477
 5313 0000 08B1     		cbz	r0, .L417
3382:os/tasks.c    ****             uxReturn = pxTCB->uxTaskNumber;
 5314              		.loc 1 3382 13 is_stmt 1 view .LVU1478
 5315              	.LVL383:
3383:os/tasks.c    ****         }
 5316              		.loc 1 3383 13 view .LVU1479
3383:os/tasks.c    ****         }
 5317              		.loc 1 3383 22 is_stmt 0 view .LVU1480
 5318 0002 806C     		ldr	r0, [r0, #72]
 5319              	.LVL384:
3383:os/tasks.c    ****         }
 5320              		.loc 1 3383 22 view .LVU1481
 5321 0004 7047     		bx	lr
 5322              	.LVL385:
 5323              	.L417:
3387:os/tasks.c    ****         }
 5324              		.loc 1 3387 22 view .LVU1482
 5325 0006 0020     		movs	r0, #0
 5326              	.LVL386:
3390:os/tasks.c    ****     }
 5327              		.loc 1 3390 9 is_stmt 1 view .LVU1483
3391:os/tasks.c    **** 
 5328              		.loc 1 3391 5 is_stmt 0 view .LVU1484
 5329 0008 7047     		bx	lr
 5330              		.cfi_endproc
 5331              	.LFE40:
 5333              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5334              		.align	1
 5335              		.global	vTaskSetTaskNumber
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 216


 5336              		.syntax unified
 5337              		.thumb
 5338              		.thumb_func
 5339              		.fpu fpv5-d16
 5341              	vTaskSetTaskNumber:
 5342              	.LVL387:
 5343              	.LFB41:
3400:os/tasks.c    ****         TCB_t * pxTCB;
 5344              		.loc 1 3400 5 is_stmt 1 view -0
 5345              		.cfi_startproc
 5346              		@ args = 0, pretend = 0, frame = 0
 5347              		@ frame_needed = 0, uses_anonymous_args = 0
 5348              		@ link register save eliminated.
3401:os/tasks.c    **** 
 5349              		.loc 1 3401 9 view .LVU1486
3403:os/tasks.c    ****         {
 5350              		.loc 1 3403 9 view .LVU1487
3403:os/tasks.c    ****         {
 5351              		.loc 1 3403 11 is_stmt 0 view .LVU1488
 5352 0000 00B1     		cbz	r0, .L418
3405:os/tasks.c    ****             pxTCB->uxTaskNumber = uxHandle;
 5353              		.loc 1 3405 13 is_stmt 1 view .LVU1489
 5354              	.LVL388:
3406:os/tasks.c    ****         }
 5355              		.loc 1 3406 13 view .LVU1490
3406:os/tasks.c    ****         }
 5356              		.loc 1 3406 33 is_stmt 0 view .LVU1491
 5357 0002 8164     		str	r1, [r0, #72]
 5358              	.LVL389:
 5359              	.L418:
3408:os/tasks.c    **** 
 5360              		.loc 1 3408 5 view .LVU1492
 5361 0004 7047     		bx	lr
 5362              		.cfi_endproc
 5363              	.LFE41:
 5365              		.section	.text.vTaskGetInfo,"ax",%progbits
 5366              		.align	1
 5367              		.global	vTaskGetInfo
 5368              		.syntax unified
 5369              		.thumb
 5370              		.thumb_func
 5371              		.fpu fpv5-d16
 5373              	vTaskGetInfo:
 5374              	.LVL390:
 5375              	.LFB45:
3714:os/tasks.c    ****         TCB_t * pxTCB;
 5376              		.loc 1 3714 5 is_stmt 1 view -0
 5377              		.cfi_startproc
 5378              		@ args = 0, pretend = 0, frame = 0
 5379              		@ frame_needed = 0, uses_anonymous_args = 0
3714:os/tasks.c    ****         TCB_t * pxTCB;
 5380              		.loc 1 3714 5 is_stmt 0 view .LVU1494
 5381 0000 70B5     		push	{r4, r5, r6, lr}
 5382              	.LCFI46:
 5383              		.cfi_def_cfa_offset 16
 5384              		.cfi_offset 4, -16
 5385              		.cfi_offset 5, -12
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 217


 5386              		.cfi_offset 6, -8
 5387              		.cfi_offset 14, -4
 5388 0002 0C46     		mov	r4, r1
 5389 0004 1646     		mov	r6, r2
3715:os/tasks.c    **** 
 5390              		.loc 1 3715 9 is_stmt 1 view .LVU1495
3718:os/tasks.c    **** 
 5391              		.loc 1 3718 9 view .LVU1496
3718:os/tasks.c    **** 
 5392              		.loc 1 3718 17 is_stmt 0 view .LVU1497
 5393 0006 0546     		mov	r5, r0
 5394 0008 D0B1     		cbz	r0, .L429
 5395              	.LVL391:
 5396              	.L421:
3720:os/tasks.c    ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 5397              		.loc 1 3720 9 is_stmt 1 discriminator 4 view .LVU1498
3720:os/tasks.c    ****         pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 5398              		.loc 1 3720 31 is_stmt 0 discriminator 4 view .LVU1499
 5399 000a 2560     		str	r5, [r4]
3721:os/tasks.c    ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5400              		.loc 1 3721 9 is_stmt 1 discriminator 4 view .LVU1500
3721:os/tasks.c    ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5401              		.loc 1 3721 53 is_stmt 0 discriminator 4 view .LVU1501
 5402 000c 05F13402 		add	r2, r5, #52
3721:os/tasks.c    ****         pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5403              		.loc 1 3721 34 discriminator 4 view .LVU1502
 5404 0010 6260     		str	r2, [r4, #4]
3722:os/tasks.c    ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5405              		.loc 1 3722 9 is_stmt 1 discriminator 4 view .LVU1503
3722:os/tasks.c    ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5406              		.loc 1 3722 48 is_stmt 0 discriminator 4 view .LVU1504
 5407 0012 EA6A     		ldr	r2, [r5, #44]
3722:os/tasks.c    ****         pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5408              		.loc 1 3722 41 discriminator 4 view .LVU1505
 5409 0014 2261     		str	r2, [r4, #16]
3723:os/tasks.c    ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5410              		.loc 1 3723 9 is_stmt 1 discriminator 4 view .LVU1506
3723:os/tasks.c    ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5411              		.loc 1 3723 42 is_stmt 0 discriminator 4 view .LVU1507
 5412 0016 2A6B     		ldr	r2, [r5, #48]
3723:os/tasks.c    ****         pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5413              		.loc 1 3723 35 discriminator 4 view .LVU1508
 5414 0018 E261     		str	r2, [r4, #28]
3724:os/tasks.c    **** 
 5415              		.loc 1 3724 9 is_stmt 1 discriminator 4 view .LVU1509
3724:os/tasks.c    **** 
 5416              		.loc 1 3724 42 is_stmt 0 discriminator 4 view .LVU1510
 5417 001a 6A6C     		ldr	r2, [r5, #68]
3724:os/tasks.c    **** 
 5418              		.loc 1 3724 35 discriminator 4 view .LVU1511
 5419 001c A260     		str	r2, [r4, #8]
3728:os/tasks.c    ****             }
 5420              		.loc 1 3728 17 is_stmt 1 discriminator 4 view .LVU1512
3728:os/tasks.c    ****             }
 5421              		.loc 1 3728 53 is_stmt 0 discriminator 4 view .LVU1513
 5422 001e EA6C     		ldr	r2, [r5, #76]
3728:os/tasks.c    ****             }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 218


 5423              		.loc 1 3728 46 discriminator 4 view .LVU1514
 5424 0020 6261     		str	r2, [r4, #20]
3742:os/tasks.c    ****             }
 5425              		.loc 1 3742 17 is_stmt 1 discriminator 4 view .LVU1515
3742:os/tasks.c    ****             }
 5426              		.loc 1 3742 48 is_stmt 0 discriminator 4 view .LVU1516
 5427 0022 0022     		movs	r2, #0
 5428 0024 A261     		str	r2, [r4, #24]
3749:os/tasks.c    ****         {
 5429              		.loc 1 3749 9 is_stmt 1 discriminator 4 view .LVU1517
3749:os/tasks.c    ****         {
 5430              		.loc 1 3749 11 is_stmt 0 discriminator 4 view .LVU1518
 5431 0026 052B     		cmp	r3, #5
 5432 0028 19D0     		beq	.L422
3751:os/tasks.c    ****             {
 5433              		.loc 1 3751 13 is_stmt 1 view .LVU1519
3751:os/tasks.c    ****             {
 5434              		.loc 1 3751 23 is_stmt 0 view .LVU1520
 5435 002a 124A     		ldr	r2, .L433
 5436 002c 1268     		ldr	r2, [r2]
3751:os/tasks.c    ****             {
 5437              		.loc 1 3751 15 view .LVU1521
 5438 002e AA42     		cmp	r2, r5
 5439 0030 09D0     		beq	.L430
3757:os/tasks.c    **** 
 5440              		.loc 1 3757 17 is_stmt 1 view .LVU1522
3757:os/tasks.c    **** 
 5441              		.loc 1 3757 45 is_stmt 0 view .LVU1523
 5442 0032 2373     		strb	r3, [r4, #12]
3764:os/tasks.c    ****                         {
 5443              		.loc 1 3764 25 is_stmt 1 view .LVU1524
3764:os/tasks.c    ****                         {
 5444              		.loc 1 3764 27 is_stmt 0 view .LVU1525
 5445 0034 032B     		cmp	r3, #3
 5446 0036 09D0     		beq	.L431
 5447              	.LVL392:
 5448              	.L424:
3786:os/tasks.c    ****         {
 5449              		.loc 1 3786 9 is_stmt 1 view .LVU1526
3786:os/tasks.c    ****         {
 5450              		.loc 1 3786 11 is_stmt 0 view .LVU1527
 5451 0038 B6B9     		cbnz	r6, .L432
3800:os/tasks.c    ****         }
 5452              		.loc 1 3800 13 is_stmt 1 view .LVU1528
3800:os/tasks.c    ****         }
 5453              		.loc 1 3800 48 is_stmt 0 view .LVU1529
 5454 003a 0023     		movs	r3, #0
 5455 003c 2384     		strh	r3, [r4, #32]	@ movhi
 5456              	.L420:
3802:os/tasks.c    **** 
 5457              		.loc 1 3802 5 view .LVU1530
 5458 003e 70BD     		pop	{r4, r5, r6, pc}
 5459              	.LVL393:
 5460              	.L429:
3718:os/tasks.c    **** 
 5461              		.loc 1 3718 17 discriminator 1 view .LVU1531
 5462 0040 0C4A     		ldr	r2, .L433
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 219


 5463              	.LVL394:
3718:os/tasks.c    **** 
 5464              		.loc 1 3718 17 discriminator 1 view .LVU1532
 5465 0042 1568     		ldr	r5, [r2]
 5466              	.LVL395:
3718:os/tasks.c    **** 
 5467              		.loc 1 3718 17 discriminator 1 view .LVU1533
 5468 0044 E1E7     		b	.L421
 5469              	.LVL396:
 5470              	.L430:
3753:os/tasks.c    ****             }
 5471              		.loc 1 3753 17 is_stmt 1 view .LVU1534
3753:os/tasks.c    ****             }
 5472              		.loc 1 3753 45 is_stmt 0 view .LVU1535
 5473 0046 0023     		movs	r3, #0
 5474              	.LVL397:
3753:os/tasks.c    ****             }
 5475              		.loc 1 3753 45 view .LVU1536
 5476 0048 2373     		strb	r3, [r4, #12]
 5477 004a F5E7     		b	.L424
 5478              	.LVL398:
 5479              	.L431:
3766:os/tasks.c    ****                             {
 5480              		.loc 1 3766 29 is_stmt 1 view .LVU1537
 5481 004c FFF7FEFF 		bl	vTaskSuspendAll
 5482              	.LVL399:
3768:os/tasks.c    ****                                 {
 5483              		.loc 1 3768 33 view .LVU1538
3768:os/tasks.c    ****                                 {
 5484              		.loc 1 3768 37 is_stmt 0 view .LVU1539
 5485 0050 AB6A     		ldr	r3, [r5, #40]
3768:os/tasks.c    ****                                 {
 5486              		.loc 1 3768 35 view .LVU1540
 5487 0052 0BB1     		cbz	r3, .L425
3770:os/tasks.c    ****                                 }
 5488              		.loc 1 3770 37 is_stmt 1 view .LVU1541
3770:os/tasks.c    ****                                 }
 5489              		.loc 1 3770 65 is_stmt 0 view .LVU1542
 5490 0054 0223     		movs	r3, #2
 5491 0056 2373     		strb	r3, [r4, #12]
 5492              	.L425:
3773:os/tasks.c    ****                         }
 5493              		.loc 1 3773 29 is_stmt 1 view .LVU1543
3773:os/tasks.c    ****                         }
 5494              		.loc 1 3773 38 is_stmt 0 view .LVU1544
 5495 0058 FFF7FEFF 		bl	xTaskResumeAll
 5496              	.LVL400:
 5497 005c ECE7     		b	.L424
 5498              	.LVL401:
 5499              	.L422:
3781:os/tasks.c    ****         }
 5500              		.loc 1 3781 13 is_stmt 1 view .LVU1545
3781:os/tasks.c    ****         }
 5501              		.loc 1 3781 43 is_stmt 0 view .LVU1546
 5502 005e 2846     		mov	r0, r5
 5503 0060 FFF7FEFF 		bl	eTaskGetState
 5504              	.LVL402:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 220


3781:os/tasks.c    ****         }
 5505              		.loc 1 3781 41 view .LVU1547
 5506 0064 2073     		strb	r0, [r4, #12]
 5507 0066 E7E7     		b	.L424
 5508              	.L432:
3794:os/tasks.c    ****                 }
 5509              		.loc 1 3794 21 is_stmt 1 view .LVU1548
3794:os/tasks.c    ****                 }
 5510              		.loc 1 3794 58 is_stmt 0 view .LVU1549
 5511 0068 286B     		ldr	r0, [r5, #48]
 5512 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5513              	.LVL403:
3794:os/tasks.c    ****                 }
 5514              		.loc 1 3794 56 view .LVU1550
 5515 006e 2084     		strh	r0, [r4, #32]	@ movhi
 5516 0070 E5E7     		b	.L420
 5517              	.L434:
 5518 0072 00BF     		.align	2
 5519              	.L433:
 5520 0074 00000000 		.word	.LANCHOR10
 5521              		.cfi_endproc
 5522              	.LFE45:
 5524              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 5525              		.align	1
 5526              		.syntax unified
 5527              		.thumb
 5528              		.thumb_func
 5529              		.fpu fpv5-d16
 5531              	prvListTasksWithinSingleList:
 5532              	.LVL404:
 5533              	.LFB46:
3812:os/tasks.c    ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
 5534              		.loc 1 3812 5 is_stmt 1 view -0
 5535              		.cfi_startproc
 5536              		@ args = 0, pretend = 0, frame = 0
 5537              		@ frame_needed = 0, uses_anonymous_args = 0
3812:os/tasks.c    ****         configLIST_VOLATILE TCB_t * pxNextTCB, * pxFirstTCB;
 5538              		.loc 1 3812 5 is_stmt 0 view .LVU1552
 5539 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 5540              	.LCFI47:
 5541              		.cfi_def_cfa_offset 32
 5542              		.cfi_offset 4, -32
 5543              		.cfi_offset 5, -28
 5544              		.cfi_offset 6, -24
 5545              		.cfi_offset 7, -20
 5546              		.cfi_offset 8, -16
 5547              		.cfi_offset 9, -12
 5548              		.cfi_offset 10, -8
 5549              		.cfi_offset 14, -4
3813:os/tasks.c    ****         UBaseType_t uxTask = 0;
 5550              		.loc 1 3813 29 is_stmt 1 view .LVU1553
3814:os/tasks.c    **** 
 5551              		.loc 1 3814 9 view .LVU1554
 5552              	.LVL405:
3816:os/tasks.c    ****         {
 5553              		.loc 1 3816 9 view .LVU1555
3816:os/tasks.c    ****         {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 221


 5554              		.loc 1 3816 13 is_stmt 0 view .LVU1556
 5555 0004 0C68     		ldr	r4, [r1]
3816:os/tasks.c    ****         {
 5556              		.loc 1 3816 11 view .LVU1557
 5557 0006 3CB3     		cbz	r4, .L435
 5558 0008 0746     		mov	r7, r0
 5559 000a 0D46     		mov	r5, r1
 5560 000c 9046     		mov	r8, r2
 5561              	.LBB238:
3818:os/tasks.c    **** 
 5562              		.loc 1 3818 13 is_stmt 1 view .LVU1558
 5563              	.LVL406:
3818:os/tasks.c    **** 
 5564              		.loc 1 3818 13 view .LVU1559
 5565 000e 4B68     		ldr	r3, [r1, #4]
 5566 0010 5B68     		ldr	r3, [r3, #4]
 5567 0012 4B60     		str	r3, [r1, #4]
3818:os/tasks.c    **** 
 5568              		.loc 1 3818 13 view .LVU1560
 5569 0014 01F10809 		add	r9, r1, #8
 5570 0018 4B45     		cmp	r3, r9
 5571 001a 04D0     		beq	.L441
 5572              	.L437:
3818:os/tasks.c    **** 
 5573              		.loc 1 3818 13 discriminator 3 view .LVU1561
 5574 001c 6B68     		ldr	r3, [r5, #4]
 5575 001e D3F80CA0 		ldr	r10, [r3, #12]
 5576              	.LVL407:
3818:os/tasks.c    **** 
 5577              		.loc 1 3818 13 is_stmt 0 discriminator 3 view .LVU1562
 5578              	.LBE238:
3814:os/tasks.c    **** 
 5579              		.loc 1 3814 21 discriminator 3 view .LVU1563
 5580 0022 0024     		movs	r4, #0
 5581 0024 12E0     		b	.L439
 5582              	.LVL408:
 5583              	.L441:
 5584              	.LBB239:
3818:os/tasks.c    **** 
 5585              		.loc 1 3818 13 is_stmt 1 discriminator 1 view .LVU1564
 5586 0026 5B68     		ldr	r3, [r3, #4]
 5587 0028 4B60     		str	r3, [r1, #4]
 5588 002a F7E7     		b	.L437
 5589              	.LVL409:
 5590              	.L442:
3818:os/tasks.c    **** 
 5591              		.loc 1 3818 13 is_stmt 0 discriminator 1 view .LVU1565
 5592              	.LBE239:
 5593              	.LBB240:
3826:os/tasks.c    ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5594              		.loc 1 3826 17 is_stmt 1 discriminator 1 view .LVU1566
 5595 002c 5B68     		ldr	r3, [r3, #4]
 5596 002e 6B60     		str	r3, [r5, #4]
 5597              	.L438:
3826:os/tasks.c    ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5598              		.loc 1 3826 17 discriminator 3 view .LVU1567
 5599 0030 6B68     		ldr	r3, [r5, #4]
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 222


 5600 0032 DE68     		ldr	r6, [r3, #12]
 5601              	.LVL410:
3826:os/tasks.c    ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5602              		.loc 1 3826 17 is_stmt 0 discriminator 3 view .LVU1568
 5603              	.LBE240:
3826:os/tasks.c    ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5604              		.loc 1 3826 65 is_stmt 1 discriminator 3 view .LVU1569
3827:os/tasks.c    ****                 uxTask++;
 5605              		.loc 1 3827 17 discriminator 3 view .LVU1570
3827:os/tasks.c    ****                 uxTask++;
 5606              		.loc 1 3827 79 is_stmt 0 discriminator 3 view .LVU1571
 5607 0034 04EBC401 		add	r1, r4, r4, lsl #3
3827:os/tasks.c    ****                 uxTask++;
 5608              		.loc 1 3827 17 discriminator 3 view .LVU1572
 5609 0038 4346     		mov	r3, r8
 5610 003a 0122     		movs	r2, #1
 5611 003c 07EB8101 		add	r1, r7, r1, lsl #2
 5612 0040 3046     		mov	r0, r6
 5613 0042 FFF7FEFF 		bl	vTaskGetInfo
 5614              	.LVL411:
3828:os/tasks.c    ****             } while( pxNextTCB != pxFirstTCB );
 5615              		.loc 1 3828 17 is_stmt 1 discriminator 3 view .LVU1573
3828:os/tasks.c    ****             } while( pxNextTCB != pxFirstTCB );
 5616              		.loc 1 3828 23 is_stmt 0 discriminator 3 view .LVU1574
 5617 0046 0134     		adds	r4, r4, #1
 5618              	.LVL412:
3829:os/tasks.c    ****         }
 5619              		.loc 1 3829 20 is_stmt 1 discriminator 3 view .LVU1575
3829:os/tasks.c    ****         }
 5620              		.loc 1 3829 13 is_stmt 0 discriminator 3 view .LVU1576
 5621 0048 B245     		cmp	r10, r6
 5622 004a 05D0     		beq	.L435
 5623              	.LVL413:
 5624              	.L439:
3818:os/tasks.c    **** 
 5625              		.loc 1 3818 62 is_stmt 1 discriminator 4 view .LVU1577
3824:os/tasks.c    ****             {
 5626              		.loc 1 3824 13 discriminator 4 view .LVU1578
 5627              	.LBB241:
3826:os/tasks.c    ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5628              		.loc 1 3826 17 discriminator 4 view .LVU1579
3826:os/tasks.c    ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5629              		.loc 1 3826 17 discriminator 4 view .LVU1580
 5630 004c 6B68     		ldr	r3, [r5, #4]
 5631 004e 5B68     		ldr	r3, [r3, #4]
 5632 0050 6B60     		str	r3, [r5, #4]
3826:os/tasks.c    ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5633              		.loc 1 3826 17 discriminator 4 view .LVU1581
 5634 0052 9945     		cmp	r9, r3
 5635 0054 ECD1     		bne	.L438
 5636 0056 E9E7     		b	.L442
 5637              	.LVL414:
 5638              	.L435:
3826:os/tasks.c    ****                 vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE,
 5639              		.loc 1 3826 17 is_stmt 0 discriminator 4 view .LVU1582
 5640              	.LBE241:
3837:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 223


 5641              		.loc 1 3837 5 view .LVU1583
 5642 0058 2046     		mov	r0, r4
 5643 005a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 5644              		.cfi_endproc
 5645              	.LFE46:
 5647              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 5648              		.align	1
 5649              		.global	uxTaskGetSystemState
 5650              		.syntax unified
 5651              		.thumb
 5652              		.thumb_func
 5653              		.fpu fpv5-d16
 5655              	uxTaskGetSystemState:
 5656              	.LVL415:
 5657              	.LFB27:
2525:os/tasks.c    ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5658              		.loc 1 2525 5 is_stmt 1 view -0
 5659              		.cfi_startproc
 5660              		@ args = 0, pretend = 0, frame = 0
 5661              		@ frame_needed = 0, uses_anonymous_args = 0
2525:os/tasks.c    ****         UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 5662              		.loc 1 2525 5 is_stmt 0 view .LVU1585
 5663 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5664              	.LCFI48:
 5665              		.cfi_def_cfa_offset 24
 5666              		.cfi_offset 3, -24
 5667              		.cfi_offset 4, -20
 5668              		.cfi_offset 5, -16
 5669              		.cfi_offset 6, -12
 5670              		.cfi_offset 7, -8
 5671              		.cfi_offset 14, -4
 5672 0002 0646     		mov	r6, r0
 5673 0004 0C46     		mov	r4, r1
 5674 0006 1746     		mov	r7, r2
2526:os/tasks.c    **** 
 5675              		.loc 1 2526 9 is_stmt 1 view .LVU1586
 5676              	.LVL416:
2528:os/tasks.c    ****         {
 5677              		.loc 1 2528 9 view .LVU1587
 5678 0008 FFF7FEFF 		bl	vTaskSuspendAll
 5679              	.LVL417:
2531:os/tasks.c    ****             {
 5680              		.loc 1 2531 13 view .LVU1588
2531:os/tasks.c    ****             {
 5681              		.loc 1 2531 29 is_stmt 0 view .LVU1589
 5682 000c 224B     		ldr	r3, .L448
 5683 000e 1B68     		ldr	r3, [r3]
2531:os/tasks.c    ****             {
 5684              		.loc 1 2531 15 view .LVU1590
 5685 0010 A342     		cmp	r3, r4
 5686 0012 3BD8     		bhi	.L446
2526:os/tasks.c    **** 
 5687              		.loc 1 2526 33 view .LVU1591
 5688 0014 0425     		movs	r5, #4
2526:os/tasks.c    **** 
 5689              		.loc 1 2526 21 view .LVU1592
 5690 0016 0024     		movs	r4, #0
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 224


 5691              	.LVL418:
 5692              	.L445:
2535:os/tasks.c    ****                 {
 5693              		.loc 1 2535 17 is_stmt 1 discriminator 1 view .LVU1593
2537:os/tasks.c    ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 5694              		.loc 1 2537 21 discriminator 1 view .LVU1594
2537:os/tasks.c    ****                     uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( px
 5695              		.loc 1 2537 28 is_stmt 0 discriminator 1 view .LVU1595
 5696 0018 013D     		subs	r5, r5, #1
 5697              	.LVL419:
2538:os/tasks.c    ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5698              		.loc 1 2538 21 is_stmt 1 discriminator 1 view .LVU1596
2538:os/tasks.c    ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5699              		.loc 1 2538 81 is_stmt 0 discriminator 1 view .LVU1597
 5700 001a 04EBC400 		add	r0, r4, r4, lsl #3
2538:os/tasks.c    ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5701              		.loc 1 2538 31 discriminator 1 view .LVU1598
 5702 001e 05EB8501 		add	r1, r5, r5, lsl #2
 5703 0022 0122     		movs	r2, #1
 5704 0024 1D4B     		ldr	r3, .L448+4
 5705 0026 03EB8101 		add	r1, r3, r1, lsl #2
 5706 002a 06EB8000 		add	r0, r6, r0, lsl #2
 5707 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 5708              	.LVL420:
2538:os/tasks.c    ****                 } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception
 5709              		.loc 1 2538 28 discriminator 1 view .LVU1599
 5710 0032 0444     		add	r4, r4, r0
 5711              	.LVL421:
2539:os/tasks.c    **** 
 5712              		.loc 1 2539 24 is_stmt 1 discriminator 1 view .LVU1600
2539:os/tasks.c    **** 
 5713              		.loc 1 2539 17 is_stmt 0 discriminator 1 view .LVU1601
 5714 0034 002D     		cmp	r5, #0
 5715 0036 EFD1     		bne	.L445
2543:os/tasks.c    ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5716              		.loc 1 2543 17 is_stmt 1 view .LVU1602
2543:os/tasks.c    ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5717              		.loc 1 2543 77 is_stmt 0 view .LVU1603
 5718 0038 04EBC400 		add	r0, r4, r4, lsl #3
2543:os/tasks.c    ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5719              		.loc 1 2543 27 view .LVU1604
 5720 003c 184B     		ldr	r3, .L448+8
 5721 003e 1968     		ldr	r1, [r3]
 5722 0040 0222     		movs	r2, #2
 5723 0042 06EB8000 		add	r0, r6, r0, lsl #2
 5724 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 5725              	.LVL422:
2543:os/tasks.c    ****                 uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t 
 5726              		.loc 1 2543 24 view .LVU1605
 5727 004a 0444     		add	r4, r4, r0
 5728              	.LVL423:
2544:os/tasks.c    **** 
 5729              		.loc 1 2544 17 is_stmt 1 view .LVU1606
2544:os/tasks.c    **** 
 5730              		.loc 1 2544 77 is_stmt 0 view .LVU1607
 5731 004c 04EBC400 		add	r0, r4, r4, lsl #3
2544:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 225


 5732              		.loc 1 2544 27 view .LVU1608
 5733 0050 144B     		ldr	r3, .L448+12
 5734 0052 1968     		ldr	r1, [r3]
 5735 0054 0222     		movs	r2, #2
 5736 0056 06EB8000 		add	r0, r6, r0, lsl #2
 5737 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 5738              	.LVL424:
2544:os/tasks.c    **** 
 5739              		.loc 1 2544 24 view .LVU1609
 5740 005e 0444     		add	r4, r4, r0
 5741              	.LVL425:
2550:os/tasks.c    ****                     }
 5742              		.loc 1 2550 25 is_stmt 1 view .LVU1610
2550:os/tasks.c    ****                     }
 5743              		.loc 1 2550 85 is_stmt 0 view .LVU1611
 5744 0060 04EBC400 		add	r0, r4, r4, lsl #3
2550:os/tasks.c    ****                     }
 5745              		.loc 1 2550 35 view .LVU1612
 5746 0064 0422     		movs	r2, #4
 5747 0066 1049     		ldr	r1, .L448+16
 5748 0068 06EB8000 		add	r0, r6, r0, lsl #2
 5749 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 5750              	.LVL426:
2550:os/tasks.c    ****                     }
 5751              		.loc 1 2550 32 view .LVU1613
 5752 0070 0444     		add	r4, r4, r0
 5753              	.LVL427:
2558:os/tasks.c    ****                     }
 5754              		.loc 1 2558 25 is_stmt 1 view .LVU1614
2558:os/tasks.c    ****                     }
 5755              		.loc 1 2558 85 is_stmt 0 view .LVU1615
 5756 0072 04EBC400 		add	r0, r4, r4, lsl #3
2558:os/tasks.c    ****                     }
 5757              		.loc 1 2558 35 view .LVU1616
 5758 0076 0322     		movs	r2, #3
 5759 0078 0C49     		ldr	r1, .L448+20
 5760 007a 06EB8000 		add	r0, r6, r0, lsl #2
 5761 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 5762              	.LVL428:
2558:os/tasks.c    ****                     }
 5763              		.loc 1 2558 32 view .LVU1617
 5764 0082 0444     		add	r4, r4, r0
 5765              	.LVL429:
2575:os/tasks.c    ****                         {
 5766              		.loc 1 2575 25 is_stmt 1 view .LVU1618
2575:os/tasks.c    ****                         {
 5767              		.loc 1 2575 27 is_stmt 0 view .LVU1619
 5768 0084 1FB1     		cbz	r7, .L444
2577:os/tasks.c    ****                         }
 5769              		.loc 1 2577 29 is_stmt 1 view .LVU1620
2577:os/tasks.c    ****                         }
 5770              		.loc 1 2577 46 is_stmt 0 view .LVU1621
 5771 0086 0023     		movs	r3, #0
 5772 0088 3B60     		str	r3, [r7]
 5773 008a 00E0     		b	.L444
 5774              	.LVL430:
 5775              	.L446:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 226


2526:os/tasks.c    **** 
 5776              		.loc 1 2526 21 view .LVU1622
 5777 008c 0024     		movs	r4, #0
 5778              	.LVL431:
 5779              	.L444:
2584:os/tasks.c    ****             }
 5780              		.loc 1 2584 41 is_stmt 1 view .LVU1623
2587:os/tasks.c    **** 
 5781              		.loc 1 2587 9 view .LVU1624
2587:os/tasks.c    **** 
 5782              		.loc 1 2587 18 is_stmt 0 view .LVU1625
 5783 008e FFF7FEFF 		bl	xTaskResumeAll
 5784              	.LVL432:
2589:os/tasks.c    ****     }
 5785              		.loc 1 2589 9 is_stmt 1 view .LVU1626
2590:os/tasks.c    **** 
 5786              		.loc 1 2590 5 is_stmt 0 view .LVU1627
 5787 0092 2046     		mov	r0, r4
 5788 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5789              	.LVL433:
 5790              	.L449:
2590:os/tasks.c    **** 
 5791              		.loc 1 2590 5 view .LVU1628
 5792 0096 00BF     		.align	2
 5793              	.L448:
 5794 0098 00000000 		.word	.LANCHOR9
 5795 009c 00000000 		.word	.LANCHOR4
 5796 00a0 00000000 		.word	.LANCHOR2
 5797 00a4 00000000 		.word	.LANCHOR8
 5798 00a8 00000000 		.word	.LANCHOR7
 5799 00ac 00000000 		.word	.LANCHOR0
 5800              		.cfi_endproc
 5801              	.LFE27:
 5803              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 5804              		.align	1
 5805              		.global	uxTaskGetStackHighWaterMark
 5806              		.syntax unified
 5807              		.thumb
 5808              		.thumb_func
 5809              		.fpu fpv5-d16
 5811              	uxTaskGetStackHighWaterMark:
 5812              	.LVL434:
 5813              	.LFB48:
3905:os/tasks.c    ****         TCB_t * pxTCB;
 5814              		.loc 1 3905 5 is_stmt 1 view -0
 5815              		.cfi_startproc
 5816              		@ args = 0, pretend = 0, frame = 0
 5817              		@ frame_needed = 0, uses_anonymous_args = 0
3905:os/tasks.c    ****         TCB_t * pxTCB;
 5818              		.loc 1 3905 5 is_stmt 0 view .LVU1630
 5819 0000 08B5     		push	{r3, lr}
 5820              	.LCFI49:
 5821              		.cfi_def_cfa_offset 8
 5822              		.cfi_offset 3, -8
 5823              		.cfi_offset 14, -4
3906:os/tasks.c    ****         uint8_t * pucEndOfStack;
 5824              		.loc 1 3906 9 is_stmt 1 view .LVU1631
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 227


3907:os/tasks.c    ****         UBaseType_t uxReturn;
 5825              		.loc 1 3907 9 view .LVU1632
3908:os/tasks.c    **** 
 5826              		.loc 1 3908 9 view .LVU1633
3910:os/tasks.c    **** 
 5827              		.loc 1 3910 9 view .LVU1634
3910:os/tasks.c    **** 
 5828              		.loc 1 3910 17 is_stmt 0 view .LVU1635
 5829 0002 0346     		mov	r3, r0
 5830 0004 18B1     		cbz	r0, .L453
 5831              	.LVL435:
 5832              	.L451:
3914:os/tasks.c    ****             }
 5833              		.loc 1 3914 17 is_stmt 1 discriminator 4 view .LVU1636
3922:os/tasks.c    **** 
 5834              		.loc 1 3922 9 discriminator 4 view .LVU1637
3922:os/tasks.c    **** 
 5835              		.loc 1 3922 36 is_stmt 0 discriminator 4 view .LVU1638
 5836 0006 186B     		ldr	r0, [r3, #48]
 5837 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 5838              	.LVL436:
3924:os/tasks.c    ****     }
 5839              		.loc 1 3924 9 is_stmt 1 discriminator 4 view .LVU1639
3925:os/tasks.c    **** 
 5840              		.loc 1 3925 5 is_stmt 0 discriminator 4 view .LVU1640
 5841 000c 08BD     		pop	{r3, pc}
 5842              	.LVL437:
 5843              	.L453:
3910:os/tasks.c    **** 
 5844              		.loc 1 3910 17 discriminator 1 view .LVU1641
 5845 000e 014B     		ldr	r3, .L454
 5846 0010 1B68     		ldr	r3, [r3]
 5847              	.LVL438:
3910:os/tasks.c    **** 
 5848              		.loc 1 3910 17 discriminator 1 view .LVU1642
 5849 0012 F8E7     		b	.L451
 5850              	.L455:
 5851              		.align	2
 5852              	.L454:
 5853 0014 00000000 		.word	.LANCHOR10
 5854              		.cfi_endproc
 5855              	.LFE48:
 5857              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 5858              		.align	1
 5859              		.global	xTaskGetCurrentTaskHandle
 5860              		.syntax unified
 5861              		.thumb
 5862              		.thumb_func
 5863              		.fpu fpv5-d16
 5865              	xTaskGetCurrentTaskHandle:
 5866              	.LFB51:
4012:os/tasks.c    ****         TaskHandle_t xReturn;
 5867              		.loc 1 4012 5 is_stmt 1 view -0
 5868              		.cfi_startproc
 5869              		@ args = 0, pretend = 0, frame = 0
 5870              		@ frame_needed = 0, uses_anonymous_args = 0
 5871              		@ link register save eliminated.
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 228


4013:os/tasks.c    **** 
 5872              		.loc 1 4013 9 view .LVU1644
4018:os/tasks.c    **** 
 5873              		.loc 1 4018 9 view .LVU1645
4018:os/tasks.c    **** 
 5874              		.loc 1 4018 17 is_stmt 0 view .LVU1646
 5875 0000 014B     		ldr	r3, .L457
 5876 0002 1868     		ldr	r0, [r3]
 5877              	.LVL439:
4020:os/tasks.c    ****     }
 5878              		.loc 1 4020 9 is_stmt 1 view .LVU1647
4021:os/tasks.c    **** 
 5879              		.loc 1 4021 5 is_stmt 0 view .LVU1648
 5880 0004 7047     		bx	lr
 5881              	.L458:
 5882 0006 00BF     		.align	2
 5883              	.L457:
 5884 0008 00000000 		.word	.LANCHOR10
 5885              		.cfi_endproc
 5886              	.LFE51:
 5888              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 5889              		.align	1
 5890              		.global	xTaskGetSchedulerState
 5891              		.syntax unified
 5892              		.thumb
 5893              		.thumb_func
 5894              		.fpu fpv5-d16
 5896              	xTaskGetSchedulerState:
 5897              	.LFB52:
4029:os/tasks.c    ****         BaseType_t xReturn;
 5898              		.loc 1 4029 5 is_stmt 1 view -0
 5899              		.cfi_startproc
 5900              		@ args = 0, pretend = 0, frame = 0
 5901              		@ frame_needed = 0, uses_anonymous_args = 0
 5902              		@ link register save eliminated.
4030:os/tasks.c    **** 
 5903              		.loc 1 4030 9 view .LVU1650
4032:os/tasks.c    ****         {
 5904              		.loc 1 4032 9 view .LVU1651
4032:os/tasks.c    ****         {
 5905              		.loc 1 4032 31 is_stmt 0 view .LVU1652
 5906 0000 054B     		ldr	r3, .L464
 5907 0002 1B68     		ldr	r3, [r3]
4032:os/tasks.c    ****         {
 5908              		.loc 1 4032 11 view .LVU1653
 5909 0004 33B1     		cbz	r3, .L461
4038:os/tasks.c    ****             {
 5910              		.loc 1 4038 13 is_stmt 1 view .LVU1654
4038:os/tasks.c    ****             {
 5911              		.loc 1 4038 38 is_stmt 0 view .LVU1655
 5912 0006 054B     		ldr	r3, .L464+4
 5913 0008 1B68     		ldr	r3, [r3]
4038:os/tasks.c    ****             {
 5914              		.loc 1 4038 15 view .LVU1656
 5915 000a 0BB1     		cbz	r3, .L463
4044:os/tasks.c    ****             }
 5916              		.loc 1 4044 25 view .LVU1657
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 229


 5917 000c 0020     		movs	r0, #0
 5918              	.LVL440:
4048:os/tasks.c    ****     }
 5919              		.loc 1 4048 9 is_stmt 1 view .LVU1658
4049:os/tasks.c    **** 
 5920              		.loc 1 4049 5 is_stmt 0 view .LVU1659
 5921 000e 7047     		bx	lr
 5922              	.LVL441:
 5923              	.L463:
4040:os/tasks.c    ****             }
 5924              		.loc 1 4040 25 view .LVU1660
 5925 0010 0220     		movs	r0, #2
 5926 0012 7047     		bx	lr
 5927              	.L461:
4034:os/tasks.c    ****         }
 5928              		.loc 1 4034 21 view .LVU1661
 5929 0014 0120     		movs	r0, #1
 5930 0016 7047     		bx	lr
 5931              	.L465:
 5932              		.align	2
 5933              	.L464:
 5934 0018 00000000 		.word	.LANCHOR11
 5935 001c 00000000 		.word	.LANCHOR16
 5936              		.cfi_endproc
 5937              	.LFE52:
 5939              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 5940              		.align	1
 5941              		.global	xTaskPriorityInherit
 5942              		.syntax unified
 5943              		.thumb
 5944              		.thumb_func
 5945              		.fpu fpv5-d16
 5947              	xTaskPriorityInherit:
 5948              	.LVL442:
 5949              	.LFB53:
4057:os/tasks.c    ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5950              		.loc 1 4057 5 is_stmt 1 view -0
 5951              		.cfi_startproc
 5952              		@ args = 0, pretend = 0, frame = 0
 5953              		@ frame_needed = 0, uses_anonymous_args = 0
4058:os/tasks.c    ****         BaseType_t xReturn = pdFALSE;
 5954              		.loc 1 4058 9 view .LVU1663
4059:os/tasks.c    **** 
 5955              		.loc 1 4059 9 view .LVU1664
4064:os/tasks.c    ****         {
 5956              		.loc 1 4064 9 view .LVU1665
4064:os/tasks.c    ****         {
 5957              		.loc 1 4064 11 is_stmt 0 view .LVU1666
 5958 0000 0028     		cmp	r0, #0
 5959 0002 3ED0     		beq	.L472
4057:os/tasks.c    ****         TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 5960              		.loc 1 4057 5 view .LVU1667
 5961 0004 38B5     		push	{r3, r4, r5, lr}
 5962              	.LCFI50:
 5963              		.cfi_def_cfa_offset 16
 5964              		.cfi_offset 3, -16
 5965              		.cfi_offset 4, -12
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 230


 5966              		.cfi_offset 5, -8
 5967              		.cfi_offset 14, -4
 5968 0006 0446     		mov	r4, r0
4069:os/tasks.c    ****             {
 5969              		.loc 1 4069 13 is_stmt 1 view .LVU1668
4069:os/tasks.c    ****             {
 5970              		.loc 1 4069 33 is_stmt 0 view .LVU1669
 5971 0008 C36A     		ldr	r3, [r0, #44]
4069:os/tasks.c    ****             {
 5972              		.loc 1 4069 60 view .LVU1670
 5973 000a 204A     		ldr	r2, .L479
 5974 000c 1268     		ldr	r2, [r2]
 5975 000e D26A     		ldr	r2, [r2, #44]
4069:os/tasks.c    ****             {
 5976              		.loc 1 4069 15 view .LVU1671
 5977 0010 9342     		cmp	r3, r2
 5978 0012 2ED2     		bcs	.L468
4074:os/tasks.c    ****                 {
 5979              		.loc 1 4074 17 is_stmt 1 view .LVU1672
4074:os/tasks.c    ****                 {
 5980              		.loc 1 4074 23 is_stmt 0 view .LVU1673
 5981 0014 8269     		ldr	r2, [r0, #24]
4074:os/tasks.c    ****                 {
 5982              		.loc 1 4074 19 view .LVU1674
 5983 0016 002A     		cmp	r2, #0
 5984 0018 05DB     		blt	.L469
4076:os/tasks.c    ****                 }
 5985              		.loc 1 4076 21 is_stmt 1 view .LVU1675
 5986 001a 1C4A     		ldr	r2, .L479
 5987 001c 1268     		ldr	r2, [r2]
 5988 001e D26A     		ldr	r2, [r2, #44]
 5989 0020 C2F10402 		rsb	r2, r2, #4
 5990 0024 8261     		str	r2, [r0, #24]
 5991              	.L469:
4080:os/tasks.c    ****                 }
 5992              		.loc 1 4080 45 view .LVU1676
4085:os/tasks.c    ****                 {
 5993              		.loc 1 4085 17 view .LVU1677
4085:os/tasks.c    ****                 {
 5994              		.loc 1 4085 21 is_stmt 0 view .LVU1678
 5995 0026 6169     		ldr	r1, [r4, #20]
 5996 0028 03EB8303 		add	r3, r3, r3, lsl #2
 5997 002c 184A     		ldr	r2, .L479+4
 5998 002e 02EB8303 		add	r3, r2, r3, lsl #2
4085:os/tasks.c    ****                 {
 5999              		.loc 1 4085 19 view .LVU1679
 6000 0032 9942     		cmp	r1, r3
 6001 0034 05D0     		beq	.L478
4106:os/tasks.c    ****                 }
 6002              		.loc 1 4106 21 is_stmt 1 view .LVU1680
4106:os/tasks.c    ****                 }
 6003              		.loc 1 4106 64 is_stmt 0 view .LVU1681
 6004 0036 154B     		ldr	r3, .L479
 6005 0038 1B68     		ldr	r3, [r3]
 6006 003a DB6A     		ldr	r3, [r3, #44]
4106:os/tasks.c    ****                 }
 6007              		.loc 1 4106 50 view .LVU1682
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 231


 6008 003c E362     		str	r3, [r4, #44]
4112:os/tasks.c    ****             }
 6009              		.loc 1 4112 25 view .LVU1683
 6010 003e 0120     		movs	r0, #1
 6011              	.LVL443:
 6012              	.L466:
4139:os/tasks.c    **** 
 6013              		.loc 1 4139 5 view .LVU1684
 6014 0040 38BD     		pop	{r3, r4, r5, pc}
 6015              	.LVL444:
 6016              	.L478:
4087:os/tasks.c    ****                     {
 6017              		.loc 1 4087 21 is_stmt 1 view .LVU1685
4087:os/tasks.c    ****                     {
 6018              		.loc 1 4087 25 is_stmt 0 view .LVU1686
 6019 0042 251D     		adds	r5, r4, #4
 6020 0044 2846     		mov	r0, r5
 6021              	.LVL445:
4087:os/tasks.c    ****                     {
 6022              		.loc 1 4087 25 view .LVU1687
 6023 0046 FFF7FEFF 		bl	uxListRemove
 6024              	.LVL446:
4096:os/tasks.c    ****                     }
 6025              		.loc 1 4096 49 is_stmt 1 view .LVU1688
4100:os/tasks.c    ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6026              		.loc 1 4100 21 view .LVU1689
4100:os/tasks.c    ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6027              		.loc 1 4100 64 is_stmt 0 view .LVU1690
 6028 004a 104B     		ldr	r3, .L479
 6029 004c 1B68     		ldr	r3, [r3]
 6030 004e D86A     		ldr	r0, [r3, #44]
4100:os/tasks.c    ****                     prvAddTaskToReadyList( pxMutexHolderTCB );
 6031              		.loc 1 4100 50 view .LVU1691
 6032 0050 E062     		str	r0, [r4, #44]
4101:os/tasks.c    ****                 }
 6033              		.loc 1 4101 21 is_stmt 1 view .LVU1692
4101:os/tasks.c    ****                 }
 6034              		.loc 1 4101 21 view .LVU1693
 6035 0052 104B     		ldr	r3, .L479+8
 6036 0054 1B68     		ldr	r3, [r3]
 6037 0056 9842     		cmp	r0, r3
 6038 0058 01D9     		bls	.L471
4101:os/tasks.c    ****                 }
 6039              		.loc 1 4101 21 discriminator 1 view .LVU1694
 6040 005a 0E4B     		ldr	r3, .L479+8
 6041 005c 1860     		str	r0, [r3]
 6042              	.L471:
4101:os/tasks.c    ****                 }
 6043              		.loc 1 4101 21 discriminator 3 view .LVU1695
4101:os/tasks.c    ****                 }
 6044              		.loc 1 4101 21 discriminator 3 view .LVU1696
 6045 005e 00EB8000 		add	r0, r0, r0, lsl #2
 6046 0062 2946     		mov	r1, r5
 6047 0064 0A4B     		ldr	r3, .L479+4
 6048 0066 03EB8000 		add	r0, r3, r0, lsl #2
 6049 006a FFF7FEFF 		bl	vListInsertEnd
 6050              	.LVL447:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 232


4101:os/tasks.c    ****                 }
 6051              		.loc 1 4101 62 discriminator 3 view .LVU1697
4112:os/tasks.c    ****             }
 6052              		.loc 1 4112 25 is_stmt 0 discriminator 3 view .LVU1698
 6053 006e 0120     		movs	r0, #1
 6054 0070 E6E7     		b	.L466
 6055              	.LVL448:
 6056              	.L468:
4116:os/tasks.c    ****                 {
 6057              		.loc 1 4116 17 is_stmt 1 view .LVU1699
4116:os/tasks.c    ****                 {
 6058              		.loc 1 4116 37 is_stmt 0 view .LVU1700
 6059 0072 C26C     		ldr	r2, [r0, #76]
4116:os/tasks.c    ****                 {
 6060              		.loc 1 4116 68 view .LVU1701
 6061 0074 054B     		ldr	r3, .L479
 6062 0076 1B68     		ldr	r3, [r3]
 6063 0078 DB6A     		ldr	r3, [r3, #44]
4116:os/tasks.c    ****                 {
 6064              		.loc 1 4116 19 view .LVU1702
 6065 007a 9A42     		cmp	r2, r3
 6066 007c 03D3     		bcc	.L473
4059:os/tasks.c    **** 
 6067              		.loc 1 4059 20 view .LVU1703
 6068 007e 0020     		movs	r0, #0
 6069              	.LVL449:
4059:os/tasks.c    **** 
 6070              		.loc 1 4059 20 view .LVU1704
 6071 0080 DEE7     		b	.L466
 6072              	.LVL450:
 6073              	.L472:
 6074              	.LCFI51:
 6075              		.cfi_def_cfa_offset 0
 6076              		.cfi_restore 3
 6077              		.cfi_restore 4
 6078              		.cfi_restore 5
 6079              		.cfi_restore 14
4059:os/tasks.c    **** 
 6080              		.loc 1 4059 20 view .LVU1705
 6081 0082 0020     		movs	r0, #0
 6082              	.LVL451:
4139:os/tasks.c    **** 
 6083              		.loc 1 4139 5 view .LVU1706
 6084 0084 7047     		bx	lr
 6085              	.LVL452:
 6086              	.L473:
 6087              	.LCFI52:
 6088              		.cfi_def_cfa_offset 16
 6089              		.cfi_offset 3, -16
 6090              		.cfi_offset 4, -12
 6091              		.cfi_offset 5, -8
 6092              		.cfi_offset 14, -4
4125:os/tasks.c    ****                 }
 6093              		.loc 1 4125 29 view .LVU1707
 6094 0086 0120     		movs	r0, #1
 6095              	.LVL453:
4135:os/tasks.c    ****         }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 233


 6096              		.loc 1 4135 37 is_stmt 1 view .LVU1708
4138:os/tasks.c    ****     }
 6097              		.loc 1 4138 9 view .LVU1709
4138:os/tasks.c    ****     }
 6098              		.loc 1 4138 16 is_stmt 0 view .LVU1710
 6099 0088 DAE7     		b	.L466
 6100              	.L480:
 6101 008a 00BF     		.align	2
 6102              	.L479:
 6103 008c 00000000 		.word	.LANCHOR10
 6104 0090 00000000 		.word	.LANCHOR4
 6105 0094 00000000 		.word	.LANCHOR13
 6106              		.cfi_endproc
 6107              	.LFE53:
 6109              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6110              		.align	1
 6111              		.global	xTaskPriorityDisinherit
 6112              		.syntax unified
 6113              		.thumb
 6114              		.thumb_func
 6115              		.fpu fpv5-d16
 6117              	xTaskPriorityDisinherit:
 6118              	.LVL454:
 6119              	.LFB54:
4147:os/tasks.c    ****         TCB_t * const pxTCB = pxMutexHolder;
 6120              		.loc 1 4147 5 is_stmt 1 view -0
 6121              		.cfi_startproc
 6122              		@ args = 0, pretend = 0, frame = 0
 6123              		@ frame_needed = 0, uses_anonymous_args = 0
4148:os/tasks.c    ****         BaseType_t xReturn = pdFALSE;
 6124              		.loc 1 4148 9 view .LVU1712
4149:os/tasks.c    **** 
 6125              		.loc 1 4149 9 view .LVU1713
4151:os/tasks.c    ****         {
 6126              		.loc 1 4151 9 view .LVU1714
4151:os/tasks.c    ****         {
 6127              		.loc 1 4151 11 is_stmt 0 view .LVU1715
 6128 0000 0028     		cmp	r0, #0
 6129 0002 3FD0     		beq	.L488
4147:os/tasks.c    ****         TCB_t * const pxTCB = pxMutexHolder;
 6130              		.loc 1 4147 5 view .LVU1716
 6131 0004 38B5     		push	{r3, r4, r5, lr}
 6132              	.LCFI53:
 6133              		.cfi_def_cfa_offset 16
 6134              		.cfi_offset 3, -16
 6135              		.cfi_offset 4, -12
 6136              		.cfi_offset 5, -8
 6137              		.cfi_offset 14, -4
 6138 0006 0446     		mov	r4, r0
4157:os/tasks.c    ****             configASSERT( pxTCB->uxMutexesHeld );
 6139              		.loc 1 4157 13 is_stmt 1 view .LVU1717
 6140 0008 204B     		ldr	r3, .L496
 6141 000a 1B68     		ldr	r3, [r3]
 6142 000c 8342     		cmp	r3, r0
 6143 000e 0AD0     		beq	.L483
4157:os/tasks.c    ****             configASSERT( pxTCB->uxMutexesHeld );
 6144              		.loc 1 4157 13 view .LVU1718
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 234


 6145              	.LBB242:
 6146              	.LBI242:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 6147              		.loc 2 193 34 view .LVU1719
 6148              	.LBB243:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6149              		.loc 2 195 9 view .LVU1720
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6150              		.loc 2 197 9 view .LVU1721
 6151              		.syntax unified
 6152              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6153 0010 4FF05003 			mov r3, #80												
 6154 0014 72B6     		cpsid i													
 6155 0016 83F31188 		msr basepri, r3											
 6156 001a BFF36F8F 		isb														
 6157 001e BFF34F8F 		dsb														
 6158 0022 62B6     		cpsie i													
 6159              	
 6160              	@ 0 "" 2
 6161              	.LVL455:
 6162              		.thumb
 6163              		.syntax unified
 6164              	.L484:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6165              		.loc 2 197 9 is_stmt 0 view .LVU1722
 6166              	.LBE243:
 6167              	.LBE242:
4157:os/tasks.c    ****             configASSERT( pxTCB->uxMutexesHeld );
 6168              		.loc 1 4157 13 is_stmt 1 discriminator 1 view .LVU1723
4157:os/tasks.c    ****             configASSERT( pxTCB->uxMutexesHeld );
 6169              		.loc 1 4157 13 discriminator 1 view .LVU1724
4157:os/tasks.c    ****             configASSERT( pxTCB->uxMutexesHeld );
 6170              		.loc 1 4157 13 discriminator 1 view .LVU1725
 6171 0024 FEE7     		b	.L484
 6172              	.L483:
4157:os/tasks.c    ****             configASSERT( pxTCB->uxMutexesHeld );
 6173              		.loc 1 4157 50 discriminator 2 view .LVU1726
4158:os/tasks.c    ****             ( pxTCB->uxMutexesHeld )--;
 6174              		.loc 1 4158 13 discriminator 2 view .LVU1727
 6175 0026 036D     		ldr	r3, [r0, #80]
 6176 0028 53B9     		cbnz	r3, .L485
4158:os/tasks.c    ****             ( pxTCB->uxMutexesHeld )--;
 6177              		.loc 1 4158 13 view .LVU1728
 6178              	.LBB244:
 6179              	.LBI244:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 6180              		.loc 2 193 34 view .LVU1729
 6181              	.LBB245:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6182              		.loc 2 195 9 view .LVU1730
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6183              		.loc 2 197 9 view .LVU1731
 6184              		.syntax unified
 6185              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6186 002a 4FF05003 			mov r3, #80												
 6187 002e 72B6     		cpsid i													
 6188 0030 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 235


 6189 0034 BFF36F8F 		isb														
 6190 0038 BFF34F8F 		dsb														
 6191 003c 62B6     		cpsie i													
 6192              	
 6193              	@ 0 "" 2
 6194              	.LVL456:
 6195              		.thumb
 6196              		.syntax unified
 6197              	.L486:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6198              		.loc 2 197 9 is_stmt 0 view .LVU1732
 6199              	.LBE245:
 6200              	.LBE244:
4158:os/tasks.c    ****             ( pxTCB->uxMutexesHeld )--;
 6201              		.loc 1 4158 13 is_stmt 1 discriminator 2 view .LVU1733
4158:os/tasks.c    ****             ( pxTCB->uxMutexesHeld )--;
 6202              		.loc 1 4158 13 discriminator 2 view .LVU1734
4158:os/tasks.c    ****             ( pxTCB->uxMutexesHeld )--;
 6203              		.loc 1 4158 13 discriminator 2 view .LVU1735
 6204 003e FEE7     		b	.L486
 6205              	.L485:
4158:os/tasks.c    ****             ( pxTCB->uxMutexesHeld )--;
 6206              		.loc 1 4158 49 discriminator 2 view .LVU1736
4159:os/tasks.c    **** 
 6207              		.loc 1 4159 13 discriminator 2 view .LVU1737
4159:os/tasks.c    **** 
 6208              		.loc 1 4159 37 is_stmt 0 discriminator 2 view .LVU1738
 6209 0040 013B     		subs	r3, r3, #1
 6210 0042 0365     		str	r3, [r0, #80]
4163:os/tasks.c    ****             {
 6211              		.loc 1 4163 13 is_stmt 1 discriminator 2 view .LVU1739
4163:os/tasks.c    ****             {
 6212              		.loc 1 4163 22 is_stmt 0 discriminator 2 view .LVU1740
 6213 0044 C16A     		ldr	r1, [r0, #44]
4163:os/tasks.c    ****             {
 6214              		.loc 1 4163 43 discriminator 2 view .LVU1741
 6215 0046 C26C     		ldr	r2, [r0, #76]
4163:os/tasks.c    ****             {
 6216              		.loc 1 4163 15 discriminator 2 view .LVU1742
 6217 0048 9142     		cmp	r1, r2
 6218 004a 1DD0     		beq	.L489
4166:os/tasks.c    ****                 {
 6219              		.loc 1 4166 17 is_stmt 1 view .LVU1743
4166:os/tasks.c    ****                 {
 6220              		.loc 1 4166 19 is_stmt 0 view .LVU1744
 6221 004c 0BB1     		cbz	r3, .L495
4149:os/tasks.c    **** 
 6222              		.loc 1 4149 20 view .LVU1745
 6223 004e 0020     		movs	r0, #0
 6224              	.LVL457:
4215:os/tasks.c    ****         }
 6225              		.loc 1 4215 37 is_stmt 1 view .LVU1746
4218:os/tasks.c    ****     }
 6226              		.loc 1 4218 9 view .LVU1747
 6227              	.L481:
4219:os/tasks.c    **** 
 6228              		.loc 1 4219 5 is_stmt 0 view .LVU1748
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 236


 6229 0050 38BD     		pop	{r3, r4, r5, pc}
 6230              	.LVL458:
 6231              	.L495:
4173:os/tasks.c    ****                     {
 6232              		.loc 1 4173 21 is_stmt 1 view .LVU1749
4173:os/tasks.c    ****                     {
 6233              		.loc 1 4173 25 is_stmt 0 view .LVU1750
 6234 0052 051D     		adds	r5, r0, #4
 6235 0054 2846     		mov	r0, r5
 6236              	.LVL459:
4173:os/tasks.c    ****                     {
 6237              		.loc 1 4173 25 view .LVU1751
 6238 0056 FFF7FEFF 		bl	uxListRemove
 6239              	.LVL460:
4179:os/tasks.c    ****                     }
 6240              		.loc 1 4179 49 is_stmt 1 view .LVU1752
4184:os/tasks.c    ****                     pxTCB->uxPriority = pxTCB->uxBasePriority;
 6241              		.loc 1 4184 82 view .LVU1753
4185:os/tasks.c    **** 
 6242              		.loc 1 4185 21 view .LVU1754
4185:os/tasks.c    **** 
 6243              		.loc 1 4185 46 is_stmt 0 view .LVU1755
 6244 005a E06C     		ldr	r0, [r4, #76]
4185:os/tasks.c    **** 
 6245              		.loc 1 4185 39 view .LVU1756
 6246 005c E062     		str	r0, [r4, #44]
4190:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 6247              		.loc 1 4190 21 is_stmt 1 view .LVU1757
 6248 005e C0F10403 		rsb	r3, r0, #4
 6249 0062 A361     		str	r3, [r4, #24]
4191:os/tasks.c    **** 
 6250              		.loc 1 4191 21 view .LVU1758
4191:os/tasks.c    **** 
 6251              		.loc 1 4191 21 view .LVU1759
 6252 0064 0A4B     		ldr	r3, .L496+4
 6253 0066 1B68     		ldr	r3, [r3]
 6254 0068 9842     		cmp	r0, r3
 6255 006a 01D9     		bls	.L487
4191:os/tasks.c    **** 
 6256              		.loc 1 4191 21 discriminator 1 view .LVU1760
 6257 006c 084B     		ldr	r3, .L496+4
 6258 006e 1860     		str	r0, [r3]
 6259              	.L487:
4191:os/tasks.c    **** 
 6260              		.loc 1 4191 21 discriminator 3 view .LVU1761
4191:os/tasks.c    **** 
 6261              		.loc 1 4191 21 discriminator 3 view .LVU1762
 6262 0070 00EB8000 		add	r0, r0, r0, lsl #2
 6263 0074 2946     		mov	r1, r5
 6264 0076 074B     		ldr	r3, .L496+8
 6265 0078 03EB8000 		add	r0, r3, r0, lsl #2
 6266 007c FFF7FEFF 		bl	vListInsertEnd
 6267              	.LVL461:
4191:os/tasks.c    **** 
 6268              		.loc 1 4191 51 discriminator 3 view .LVU1763
4201:os/tasks.c    ****                 }
 6269              		.loc 1 4201 21 discriminator 3 view .LVU1764
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 237


4201:os/tasks.c    ****                 }
 6270              		.loc 1 4201 29 is_stmt 0 discriminator 3 view .LVU1765
 6271 0080 0120     		movs	r0, #1
 6272 0082 E5E7     		b	.L481
 6273              	.LVL462:
 6274              	.L488:
 6275              	.LCFI54:
 6276              		.cfi_def_cfa_offset 0
 6277              		.cfi_restore 3
 6278              		.cfi_restore 4
 6279              		.cfi_restore 5
 6280              		.cfi_restore 14
4149:os/tasks.c    **** 
 6281              		.loc 1 4149 20 view .LVU1766
 6282 0084 0020     		movs	r0, #0
 6283              	.LVL463:
4219:os/tasks.c    **** 
 6284              		.loc 1 4219 5 view .LVU1767
 6285 0086 7047     		bx	lr
 6286              	.LVL464:
 6287              	.L489:
 6288              	.LCFI55:
 6289              		.cfi_def_cfa_offset 16
 6290              		.cfi_offset 3, -16
 6291              		.cfi_offset 4, -12
 6292              		.cfi_offset 5, -8
 6293              		.cfi_offset 14, -4
4149:os/tasks.c    **** 
 6294              		.loc 1 4149 20 view .LVU1768
 6295 0088 0020     		movs	r0, #0
 6296              	.LVL465:
4149:os/tasks.c    **** 
 6297              		.loc 1 4149 20 view .LVU1769
 6298 008a E1E7     		b	.L481
 6299              	.L497:
 6300              		.align	2
 6301              	.L496:
 6302 008c 00000000 		.word	.LANCHOR10
 6303 0090 00000000 		.word	.LANCHOR13
 6304 0094 00000000 		.word	.LANCHOR4
 6305              		.cfi_endproc
 6306              	.LFE54:
 6308              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6309              		.align	1
 6310              		.global	vTaskPriorityDisinheritAfterTimeout
 6311              		.syntax unified
 6312              		.thumb
 6313              		.thumb_func
 6314              		.fpu fpv5-d16
 6316              	vTaskPriorityDisinheritAfterTimeout:
 6317              	.LVL466:
 6318              	.LFB55:
4228:os/tasks.c    ****         TCB_t * const pxTCB = pxMutexHolder;
 6319              		.loc 1 4228 5 is_stmt 1 view -0
 6320              		.cfi_startproc
 6321              		@ args = 0, pretend = 0, frame = 0
 6322              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 238


4229:os/tasks.c    ****         UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
 6323              		.loc 1 4229 9 view .LVU1771
4230:os/tasks.c    ****         const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6324              		.loc 1 4230 9 view .LVU1772
4231:os/tasks.c    **** 
 6325              		.loc 1 4231 9 view .LVU1773
4233:os/tasks.c    ****         {
 6326              		.loc 1 4233 9 view .LVU1774
4233:os/tasks.c    ****         {
 6327              		.loc 1 4233 11 is_stmt 0 view .LVU1775
 6328 0000 0028     		cmp	r0, #0
 6329 0002 4BD0     		beq	.L508
4228:os/tasks.c    ****         TCB_t * const pxTCB = pxMutexHolder;
 6330              		.loc 1 4228 5 view .LVU1776
 6331 0004 38B5     		push	{r3, r4, r5, lr}
 6332              	.LCFI56:
 6333              		.cfi_def_cfa_offset 16
 6334              		.cfi_offset 3, -16
 6335              		.cfi_offset 4, -12
 6336              		.cfi_offset 5, -8
 6337              		.cfi_offset 14, -4
 6338 0006 0A46     		mov	r2, r1
 6339 0008 0446     		mov	r4, r0
4237:os/tasks.c    **** 
 6340              		.loc 1 4237 13 is_stmt 1 view .LVU1777
 6341 000a 016D     		ldr	r1, [r0, #80]
 6342              	.LVL467:
4237:os/tasks.c    **** 
 6343              		.loc 1 4237 13 is_stmt 0 view .LVU1778
 6344 000c 51B9     		cbnz	r1, .L500
4237:os/tasks.c    **** 
 6345              		.loc 1 4237 13 is_stmt 1 view .LVU1779
 6346              	.LBB246:
 6347              	.LBI246:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 6348              		.loc 2 193 34 view .LVU1780
 6349              	.LBB247:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6350              		.loc 2 195 9 view .LVU1781
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6351              		.loc 2 197 9 view .LVU1782
 6352              		.syntax unified
 6353              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6354 000e 4FF05003 			mov r3, #80												
 6355 0012 72B6     		cpsid i													
 6356 0014 83F31188 		msr basepri, r3											
 6357 0018 BFF36F8F 		isb														
 6358 001c BFF34F8F 		dsb														
 6359 0020 62B6     		cpsie i													
 6360              	
 6361              	@ 0 "" 2
 6362              	.LVL468:
 6363              		.thumb
 6364              		.syntax unified
 6365              	.L501:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6366              		.loc 2 197 9 is_stmt 0 view .LVU1783
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 239


 6367              	.LBE247:
 6368              	.LBE246:
4237:os/tasks.c    **** 
 6369              		.loc 1 4237 13 is_stmt 1 discriminator 1 view .LVU1784
4237:os/tasks.c    **** 
 6370              		.loc 1 4237 13 discriminator 1 view .LVU1785
4237:os/tasks.c    **** 
 6371              		.loc 1 4237 13 discriminator 1 view .LVU1786
 6372 0022 FEE7     		b	.L501
 6373              	.L500:
4237:os/tasks.c    **** 
 6374              		.loc 1 4237 49 discriminator 2 view .LVU1787
4243:os/tasks.c    ****             {
 6375              		.loc 1 4243 13 discriminator 2 view .LVU1788
4243:os/tasks.c    ****             {
 6376              		.loc 1 4243 22 is_stmt 0 discriminator 2 view .LVU1789
 6377 0024 C36C     		ldr	r3, [r0, #76]
4243:os/tasks.c    ****             {
 6378              		.loc 1 4243 15 discriminator 2 view .LVU1790
 6379 0026 9342     		cmp	r3, r2
 6380 0028 00D2     		bcs	.L502
4245:os/tasks.c    ****             }
 6381              		.loc 1 4245 33 view .LVU1791
 6382 002a 1346     		mov	r3, r2
 6383              	.L502:
 6384              	.LVL469:
4253:os/tasks.c    ****             {
 6385              		.loc 1 4253 13 is_stmt 1 view .LVU1792
4253:os/tasks.c    ****             {
 6386              		.loc 1 4253 22 is_stmt 0 view .LVU1793
 6387 002c E26A     		ldr	r2, [r4, #44]
 6388              	.LVL470:
4253:os/tasks.c    ****             {
 6389              		.loc 1 4253 15 view .LVU1794
 6390 002e 9A42     		cmp	r2, r3
 6391 0030 01D0     		beq	.L498
4259:os/tasks.c    ****                 {
 6392              		.loc 1 4259 17 is_stmt 1 view .LVU1795
4259:os/tasks.c    ****                 {
 6393              		.loc 1 4259 19 is_stmt 0 view .LVU1796
 6394 0032 0129     		cmp	r1, #1
 6395 0034 00D0     		beq	.L511
 6396              	.LVL471:
 6397              	.L498:
4325:os/tasks.c    **** 
 6398              		.loc 1 4325 5 view .LVU1797
 6399 0036 38BD     		pop	{r3, r4, r5, pc}
 6400              	.LVL472:
 6401              	.L511:
4264:os/tasks.c    **** 
 6402              		.loc 1 4264 21 is_stmt 1 view .LVU1798
 6403 0038 1949     		ldr	r1, .L513
 6404 003a 0968     		ldr	r1, [r1]
 6405 003c A142     		cmp	r1, r4
 6406 003e 22D0     		beq	.L512
4264:os/tasks.c    **** 
 6407              		.loc 1 4264 58 discriminator 2 view .LVU1799
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 240


4269:os/tasks.c    ****                     uxPriorityUsedOnEntry = pxTCB->uxPriority;
 6408              		.loc 1 4269 76 discriminator 2 view .LVU1800
4270:os/tasks.c    ****                     pxTCB->uxPriority = uxPriorityToUse;
 6409              		.loc 1 4270 21 discriminator 2 view .LVU1801
 6410              	.LVL473:
4271:os/tasks.c    **** 
 6411              		.loc 1 4271 21 discriminator 2 view .LVU1802
4271:os/tasks.c    **** 
 6412              		.loc 1 4271 39 is_stmt 0 discriminator 2 view .LVU1803
 6413 0040 E362     		str	r3, [r4, #44]
4275:os/tasks.c    ****                     {
 6414              		.loc 1 4275 21 is_stmt 1 discriminator 2 view .LVU1804
4275:os/tasks.c    ****                     {
 6415              		.loc 1 4275 27 is_stmt 0 discriminator 2 view .LVU1805
 6416 0042 A169     		ldr	r1, [r4, #24]
4275:os/tasks.c    ****                     {
 6417              		.loc 1 4275 23 discriminator 2 view .LVU1806
 6418 0044 0029     		cmp	r1, #0
 6419 0046 02DB     		blt	.L505
4277:os/tasks.c    ****                     }
 6420              		.loc 1 4277 25 is_stmt 1 view .LVU1807
 6421 0048 C3F10403 		rsb	r3, r3, #4
 6422              	.LVL474:
4277:os/tasks.c    ****                     }
 6423              		.loc 1 4277 25 is_stmt 0 view .LVU1808
 6424 004c A361     		str	r3, [r4, #24]
 6425              	.L505:
4281:os/tasks.c    ****                     }
 6426              		.loc 1 4281 49 is_stmt 1 view .LVU1809
4290:os/tasks.c    ****                     {
 6427              		.loc 1 4290 21 view .LVU1810
4290:os/tasks.c    ****                     {
 6428              		.loc 1 4290 25 is_stmt 0 view .LVU1811
 6429 004e 6169     		ldr	r1, [r4, #20]
 6430 0050 02EB8202 		add	r2, r2, r2, lsl #2
 6431              	.LVL475:
4290:os/tasks.c    ****                     {
 6432              		.loc 1 4290 25 view .LVU1812
 6433 0054 134B     		ldr	r3, .L513+4
 6434 0056 03EB8202 		add	r2, r3, r2, lsl #2
4290:os/tasks.c    ****                     {
 6435              		.loc 1 4290 23 view .LVU1813
 6436 005a 9142     		cmp	r1, r2
 6437 005c EBD1     		bne	.L498
4292:os/tasks.c    ****                         {
 6438              		.loc 1 4292 25 is_stmt 1 view .LVU1814
4292:os/tasks.c    ****                         {
 6439              		.loc 1 4292 29 is_stmt 0 view .LVU1815
 6440 005e 251D     		adds	r5, r4, #4
 6441 0060 2846     		mov	r0, r5
 6442              	.LVL476:
4292:os/tasks.c    ****                         {
 6443              		.loc 1 4292 29 view .LVU1816
 6444 0062 FFF7FEFF 		bl	uxListRemove
 6445              	.LVL477:
4301:os/tasks.c    ****                         }
 6446              		.loc 1 4301 53 is_stmt 1 view .LVU1817
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 241


4304:os/tasks.c    ****                     }
 6447              		.loc 1 4304 25 view .LVU1818
4304:os/tasks.c    ****                     }
 6448              		.loc 1 4304 25 view .LVU1819
 6449 0066 E06A     		ldr	r0, [r4, #44]
 6450 0068 0F4B     		ldr	r3, .L513+8
 6451 006a 1B68     		ldr	r3, [r3]
 6452 006c 9842     		cmp	r0, r3
 6453 006e 01D9     		bls	.L506
4304:os/tasks.c    ****                     }
 6454              		.loc 1 4304 25 discriminator 1 view .LVU1820
 6455 0070 0D4B     		ldr	r3, .L513+8
 6456 0072 1860     		str	r0, [r3]
 6457              	.L506:
4304:os/tasks.c    ****                     }
 6458              		.loc 1 4304 25 discriminator 3 view .LVU1821
4304:os/tasks.c    ****                     }
 6459              		.loc 1 4304 25 discriminator 3 view .LVU1822
 6460 0074 00EB8000 		add	r0, r0, r0, lsl #2
 6461 0078 2946     		mov	r1, r5
 6462 007a 0A4B     		ldr	r3, .L513+4
 6463 007c 03EB8000 		add	r0, r3, r0, lsl #2
 6464 0080 FFF7FEFF 		bl	vListInsertEnd
 6465              	.LVL478:
4304:os/tasks.c    ****                     }
 6466              		.loc 1 4304 55 discriminator 3 view .LVU1823
4323:os/tasks.c    ****         }
 6467              		.loc 1 4323 37 discriminator 3 view .LVU1824
4325:os/tasks.c    **** 
 6468              		.loc 1 4325 5 is_stmt 0 discriminator 3 view .LVU1825
 6469 0084 D7E7     		b	.L498
 6470              	.LVL479:
 6471              	.L512:
4264:os/tasks.c    **** 
 6472              		.loc 1 4264 21 is_stmt 1 view .LVU1826
 6473              	.LBB248:
 6474              	.LBI248:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 6475              		.loc 2 193 34 view .LVU1827
 6476              	.LBB249:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6477              		.loc 2 195 9 view .LVU1828
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6478              		.loc 2 197 9 view .LVU1829
 6479              		.syntax unified
 6480              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6481 0086 4FF05003 			mov r3, #80												
 6482 008a 72B6     		cpsid i													
 6483 008c 83F31188 		msr basepri, r3											
 6484 0090 BFF36F8F 		isb														
 6485 0094 BFF34F8F 		dsb														
 6486 0098 62B6     		cpsie i													
 6487              	
 6488              	@ 0 "" 2
 6489              	.LVL480:
 6490              		.thumb
 6491              		.syntax unified
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 242


 6492              	.L504:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6493              		.loc 2 197 9 is_stmt 0 view .LVU1830
 6494              	.LBE249:
 6495              	.LBE248:
4264:os/tasks.c    **** 
 6496              		.loc 1 4264 21 is_stmt 1 discriminator 2 view .LVU1831
4264:os/tasks.c    **** 
 6497              		.loc 1 4264 21 discriminator 2 view .LVU1832
4264:os/tasks.c    **** 
 6498              		.loc 1 4264 21 discriminator 2 view .LVU1833
 6499 009a FEE7     		b	.L504
 6500              	.LVL481:
 6501              	.L508:
 6502              	.LCFI57:
 6503              		.cfi_def_cfa_offset 0
 6504              		.cfi_restore 3
 6505              		.cfi_restore 4
 6506              		.cfi_restore 5
 6507              		.cfi_restore 14
4264:os/tasks.c    **** 
 6508              		.loc 1 4264 21 is_stmt 0 discriminator 2 view .LVU1834
 6509 009c 7047     		bx	lr
 6510              	.L514:
 6511 009e 00BF     		.align	2
 6512              	.L513:
 6513 00a0 00000000 		.word	.LANCHOR10
 6514 00a4 00000000 		.word	.LANCHOR4
 6515 00a8 00000000 		.word	.LANCHOR13
 6516              		.cfi_endproc
 6517              	.LFE55:
 6519              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 6520              		.align	1
 6521              		.global	uxTaskResetEventItemValue
 6522              		.syntax unified
 6523              		.thumb
 6524              		.thumb_func
 6525              		.fpu fpv5-d16
 6527              	uxTaskResetEventItemValue:
 6528              	.LFB56:
4654:os/tasks.c    ****     TickType_t uxReturn;
 6529              		.loc 1 4654 1 is_stmt 1 view -0
 6530              		.cfi_startproc
 6531              		@ args = 0, pretend = 0, frame = 0
 6532              		@ frame_needed = 0, uses_anonymous_args = 0
 6533              		@ link register save eliminated.
4655:os/tasks.c    **** 
 6534              		.loc 1 4655 5 view .LVU1836
4657:os/tasks.c    **** 
 6535              		.loc 1 4657 5 view .LVU1837
4657:os/tasks.c    **** 
 6536              		.loc 1 4657 16 is_stmt 0 view .LVU1838
 6537 0000 044A     		ldr	r2, .L516
 6538 0002 1368     		ldr	r3, [r2]
4657:os/tasks.c    **** 
 6539              		.loc 1 4657 14 view .LVU1839
 6540 0004 9869     		ldr	r0, [r3, #24]
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 243


 6541              	.LVL482:
4661:os/tasks.c    **** 
 6542              		.loc 1 4661 5 is_stmt 1 view .LVU1840
 6543 0006 1368     		ldr	r3, [r2]
 6544 0008 DB6A     		ldr	r3, [r3, #44]
 6545 000a 1268     		ldr	r2, [r2]
 6546 000c C3F10403 		rsb	r3, r3, #4
 6547 0010 9361     		str	r3, [r2, #24]
4663:os/tasks.c    **** }
 6548              		.loc 1 4663 5 view .LVU1841
4664:os/tasks.c    **** /*-----------------------------------------------------------*/
 6549              		.loc 1 4664 1 is_stmt 0 view .LVU1842
 6550 0012 7047     		bx	lr
 6551              	.L517:
 6552              		.align	2
 6553              	.L516:
 6554 0014 00000000 		.word	.LANCHOR10
 6555              		.cfi_endproc
 6556              	.LFE56:
 6558              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 6559              		.align	1
 6560              		.global	pvTaskIncrementMutexHeldCount
 6561              		.syntax unified
 6562              		.thumb
 6563              		.thumb_func
 6564              		.fpu fpv5-d16
 6566              	pvTaskIncrementMutexHeldCount:
 6567              	.LFB57:
4670:os/tasks.c    ****         /* If xSemaphoreCreateMutex() is called before any tasks have been created
 6568              		.loc 1 4670 5 is_stmt 1 view -0
 6569              		.cfi_startproc
 6570              		@ args = 0, pretend = 0, frame = 0
 6571              		@ frame_needed = 0, uses_anonymous_args = 0
 6572              		@ link register save eliminated.
4673:os/tasks.c    ****         {
 6573              		.loc 1 4673 9 view .LVU1844
4673:os/tasks.c    ****         {
 6574              		.loc 1 4673 26 is_stmt 0 view .LVU1845
 6575 0000 054B     		ldr	r3, .L520
 6576 0002 1B68     		ldr	r3, [r3]
4673:os/tasks.c    ****         {
 6577              		.loc 1 4673 11 view .LVU1846
 6578 0004 23B1     		cbz	r3, .L519
4675:os/tasks.c    ****         }
 6579              		.loc 1 4675 13 is_stmt 1 view .LVU1847
4675:os/tasks.c    ****         }
 6580              		.loc 1 4675 27 is_stmt 0 view .LVU1848
 6581 0006 044B     		ldr	r3, .L520
 6582 0008 1A68     		ldr	r2, [r3]
 6583 000a 136D     		ldr	r3, [r2, #80]
4675:os/tasks.c    ****         }
 6584              		.loc 1 4675 44 view .LVU1849
 6585 000c 0133     		adds	r3, r3, #1
 6586 000e 1365     		str	r3, [r2, #80]
 6587              	.L519:
4678:os/tasks.c    ****     }
 6588              		.loc 1 4678 9 is_stmt 1 view .LVU1850
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 244


4678:os/tasks.c    ****     }
 6589              		.loc 1 4678 16 is_stmt 0 view .LVU1851
 6590 0010 014B     		ldr	r3, .L520
 6591 0012 1868     		ldr	r0, [r3]
4679:os/tasks.c    **** 
 6592              		.loc 1 4679 5 view .LVU1852
 6593 0014 7047     		bx	lr
 6594              	.L521:
 6595 0016 00BF     		.align	2
 6596              	.L520:
 6597 0018 00000000 		.word	.LANCHOR10
 6598              		.cfi_endproc
 6599              	.LFE57:
 6601              		.section	.text.ulTaskGenericNotifyTake,"ax",%progbits
 6602              		.align	1
 6603              		.global	ulTaskGenericNotifyTake
 6604              		.syntax unified
 6605              		.thumb
 6606              		.thumb_func
 6607              		.fpu fpv5-d16
 6609              	ulTaskGenericNotifyTake:
 6610              	.LVL483:
 6611              	.LFB58:
4689:os/tasks.c    ****         uint32_t ulReturn;
 6612              		.loc 1 4689 5 is_stmt 1 view -0
 6613              		.cfi_startproc
 6614              		@ args = 0, pretend = 0, frame = 0
 6615              		@ frame_needed = 0, uses_anonymous_args = 0
4690:os/tasks.c    **** 
 6616              		.loc 1 4690 9 view .LVU1854
4692:os/tasks.c    **** 
 6617              		.loc 1 4692 9 view .LVU1855
 6618 0000 50B1     		cbz	r0, .L523
4692:os/tasks.c    **** 
 6619              		.loc 1 4692 9 view .LVU1856
 6620              	.LBB250:
 6621              	.LBI250:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 6622              		.loc 2 193 34 view .LVU1857
 6623              	.LBB251:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6624              		.loc 2 195 9 view .LVU1858
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6625              		.loc 2 197 9 view .LVU1859
 6626              		.syntax unified
 6627              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6628 0002 4FF05003 			mov r3, #80												
 6629 0006 72B6     		cpsid i													
 6630 0008 83F31188 		msr basepri, r3											
 6631 000c BFF36F8F 		isb														
 6632 0010 BFF34F8F 		dsb														
 6633 0014 62B6     		cpsie i													
 6634              	
 6635              	@ 0 "" 2
 6636              	.LVL484:
 6637              		.thumb
 6638              		.syntax unified
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 245


 6639              	.L524:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6640              		.loc 2 197 9 is_stmt 0 view .LVU1860
 6641              	.LBE251:
 6642              	.LBE250:
4692:os/tasks.c    **** 
 6643              		.loc 1 4692 9 is_stmt 1 discriminator 1 view .LVU1861
4692:os/tasks.c    **** 
 6644              		.loc 1 4692 9 discriminator 1 view .LVU1862
4692:os/tasks.c    **** 
 6645              		.loc 1 4692 9 discriminator 1 view .LVU1863
 6646 0016 FEE7     		b	.L524
 6647              	.L523:
4689:os/tasks.c    ****         uint32_t ulReturn;
 6648              		.loc 1 4689 5 is_stmt 0 discriminator 2 view .LVU1864
 6649 0018 70B5     		push	{r4, r5, r6, lr}
 6650              	.LCFI58:
 6651              		.cfi_def_cfa_offset 16
 6652              		.cfi_offset 4, -16
 6653              		.cfi_offset 5, -12
 6654              		.cfi_offset 6, -8
 6655              		.cfi_offset 14, -4
 6656 001a 0E46     		mov	r6, r1
 6657 001c 1546     		mov	r5, r2
 6658 001e 0446     		mov	r4, r0
4692:os/tasks.c    **** 
 6659              		.loc 1 4692 78 is_stmt 1 discriminator 2 view .LVU1865
4694:os/tasks.c    ****         {
 6660              		.loc 1 4694 9 discriminator 2 view .LVU1866
 6661 0020 FFF7FEFF 		bl	vPortEnterCritical
 6662              	.LVL485:
4697:os/tasks.c    ****             {
 6663              		.loc 1 4697 13 discriminator 2 view .LVU1867
4697:os/tasks.c    ****             {
 6664              		.loc 1 4697 29 is_stmt 0 discriminator 2 view .LVU1868
 6665 0024 204B     		ldr	r3, .L531
 6666 0026 1B68     		ldr	r3, [r3]
4697:os/tasks.c    ****             {
 6667              		.loc 1 4697 46 discriminator 2 view .LVU1869
 6668 0028 04F11402 		add	r2, r4, #20
 6669 002c 03EB8203 		add	r3, r3, r2, lsl #2
 6670 0030 5B68     		ldr	r3, [r3, #4]
4697:os/tasks.c    ****             {
 6671              		.loc 1 4697 15 discriminator 2 view .LVU1870
 6672 0032 33B9     		cbnz	r3, .L525
4700:os/tasks.c    **** 
 6673              		.loc 1 4700 17 is_stmt 1 view .LVU1871
4700:os/tasks.c    **** 
 6674              		.loc 1 4700 29 is_stmt 0 view .LVU1872
 6675 0034 1C4B     		ldr	r3, .L531
 6676 0036 1B68     		ldr	r3, [r3]
4700:os/tasks.c    **** 
 6677              		.loc 1 4700 62 view .LVU1873
 6678 0038 2344     		add	r3, r3, r4
 6679 003a 0122     		movs	r2, #1
 6680 003c 83F85820 		strb	r2, [r3, #88]
4702:os/tasks.c    ****                 {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 246


 6681              		.loc 1 4702 17 is_stmt 1 view .LVU1874
4702:os/tasks.c    ****                 {
 6682              		.loc 1 4702 19 is_stmt 0 view .LVU1875
 6683 0040 E5B9     		cbnz	r5, .L530
 6684              	.L525:
4720:os/tasks.c    ****             }
 6685              		.loc 1 4720 41 is_stmt 1 view .LVU1876
4723:os/tasks.c    **** 
 6686              		.loc 1 4723 9 view .LVU1877
 6687 0042 FFF7FEFF 		bl	vPortExitCritical
 6688              	.LVL486:
4725:os/tasks.c    ****         {
 6689              		.loc 1 4725 9 view .LVU1878
 6690 0046 FFF7FEFF 		bl	vPortEnterCritical
 6691              	.LVL487:
4727:os/tasks.c    ****             ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 6692              		.loc 1 4727 51 view .LVU1879
4728:os/tasks.c    **** 
 6693              		.loc 1 4728 13 view .LVU1880
4728:os/tasks.c    **** 
 6694              		.loc 1 4728 36 is_stmt 0 view .LVU1881
 6695 004a 174B     		ldr	r3, .L531
 6696 004c 1B68     		ldr	r3, [r3]
4728:os/tasks.c    **** 
 6697              		.loc 1 4728 22 view .LVU1882
 6698 004e 04F11402 		add	r2, r4, #20
 6699 0052 03EB8203 		add	r3, r3, r2, lsl #2
 6700 0056 5D68     		ldr	r5, [r3, #4]
 6701              	.LVL488:
4730:os/tasks.c    ****             {
 6702              		.loc 1 4730 13 is_stmt 1 view .LVU1883
4730:os/tasks.c    ****             {
 6703              		.loc 1 4730 15 is_stmt 0 view .LVU1884
 6704 0058 35B1     		cbz	r5, .L526
4732:os/tasks.c    ****                 {
 6705              		.loc 1 4732 17 is_stmt 1 view .LVU1885
4732:os/tasks.c    ****                 {
 6706              		.loc 1 4732 19 is_stmt 0 view .LVU1886
 6707 005a E6B1     		cbz	r6, .L527
4734:os/tasks.c    ****                 }
 6708              		.loc 1 4734 21 is_stmt 1 view .LVU1887
4734:os/tasks.c    ****                 }
 6709              		.loc 1 4734 33 is_stmt 0 view .LVU1888
 6710 005c 124B     		ldr	r3, .L531
 6711 005e 1B68     		ldr	r3, [r3]
4734:os/tasks.c    ****                 }
 6712              		.loc 1 4734 68 view .LVU1889
 6713 0060 03EB8203 		add	r3, r3, r2, lsl #2
 6714 0064 0022     		movs	r2, #0
 6715 0066 5A60     		str	r2, [r3, #4]
 6716              	.L526:
4743:os/tasks.c    ****             }
 6717              		.loc 1 4743 41 is_stmt 1 view .LVU1890
4746:os/tasks.c    ****         }
 6718              		.loc 1 4746 13 view .LVU1891
4746:os/tasks.c    ****         }
 6719              		.loc 1 4746 25 is_stmt 0 view .LVU1892
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 247


 6720 0068 0F4B     		ldr	r3, .L531
 6721 006a 1B68     		ldr	r3, [r3]
4746:os/tasks.c    ****         }
 6722              		.loc 1 4746 58 view .LVU1893
 6723 006c 1C44     		add	r4, r4, r3
 6724              	.LVL489:
4746:os/tasks.c    ****         }
 6725              		.loc 1 4746 58 view .LVU1894
 6726 006e 0023     		movs	r3, #0
 6727 0070 84F85830 		strb	r3, [r4, #88]
4748:os/tasks.c    **** 
 6728              		.loc 1 4748 9 is_stmt 1 view .LVU1895
 6729 0074 FFF7FEFF 		bl	vPortExitCritical
 6730              	.LVL490:
4750:os/tasks.c    ****     }
 6731              		.loc 1 4750 9 view .LVU1896
4751:os/tasks.c    **** 
 6732              		.loc 1 4751 5 is_stmt 0 view .LVU1897
 6733 0078 2846     		mov	r0, r5
 6734 007a 70BD     		pop	{r4, r5, r6, pc}
 6735              	.LVL491:
 6736              	.L530:
4704:os/tasks.c    ****                     traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWait );
 6737              		.loc 1 4704 21 is_stmt 1 view .LVU1898
 6738 007c 1146     		mov	r1, r2
 6739 007e 2846     		mov	r0, r5
 6740 0080 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6741              	.LVL492:
4705:os/tasks.c    **** 
 6742              		.loc 1 4705 65 view .LVU1899
4711:os/tasks.c    ****                 }
 6743              		.loc 1 4711 21 view .LVU1900
 6744 0084 094B     		ldr	r3, .L531+4
 6745 0086 4FF08052 		mov	r2, #268435456
 6746 008a 1A60     		str	r2, [r3]
4711:os/tasks.c    ****                 }
 6747              		.loc 1 4711 21 view .LVU1901
 6748              		.syntax unified
 6749              	@ 4711 "os/tasks.c" 1
 6750 008c BFF34F8F 		dsb
 6751              	@ 0 "" 2
4711:os/tasks.c    ****                 }
 6752              		.loc 1 4711 21 view .LVU1902
 6753              	@ 4711 "os/tasks.c" 1
 6754 0090 BFF36F8F 		isb
 6755              	@ 0 "" 2
4711:os/tasks.c    ****                 }
 6756              		.loc 1 4711 43 view .LVU1903
 6757              		.thumb
 6758              		.syntax unified
 6759 0094 D5E7     		b	.L525
 6760              	.LVL493:
 6761              	.L527:
4738:os/tasks.c    ****                 }
 6762              		.loc 1 4738 21 view .LVU1904
4738:os/tasks.c    ****                 }
 6763              		.loc 1 4738 33 is_stmt 0 view .LVU1905
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 248


 6764 0096 044B     		ldr	r3, .L531
 6765 0098 1B68     		ldr	r3, [r3]
4738:os/tasks.c    ****                 }
 6766              		.loc 1 4738 79 view .LVU1906
 6767 009a 6A1E     		subs	r2, r5, #1
4738:os/tasks.c    ****                 }
 6768              		.loc 1 4738 68 view .LVU1907
 6769 009c 04F11401 		add	r1, r4, #20
 6770 00a0 03EB8103 		add	r3, r3, r1, lsl #2
 6771 00a4 5A60     		str	r2, [r3, #4]
 6772 00a6 DFE7     		b	.L526
 6773              	.L532:
 6774              		.align	2
 6775              	.L531:
 6776 00a8 00000000 		.word	.LANCHOR10
 6777 00ac 04ED00E0 		.word	-536810236
 6778              		.cfi_endproc
 6779              	.LFE58:
 6781              		.section	.text.xTaskGenericNotifyWait,"ax",%progbits
 6782              		.align	1
 6783              		.global	xTaskGenericNotifyWait
 6784              		.syntax unified
 6785              		.thumb
 6786              		.thumb_func
 6787              		.fpu fpv5-d16
 6789              	xTaskGenericNotifyWait:
 6790              	.LVL494:
 6791              	.LFB59:
4763:os/tasks.c    ****         BaseType_t xReturn;
 6792              		.loc 1 4763 5 is_stmt 1 view -0
 6793              		.cfi_startproc
 6794              		@ args = 4, pretend = 0, frame = 0
 6795              		@ frame_needed = 0, uses_anonymous_args = 0
4763:os/tasks.c    ****         BaseType_t xReturn;
 6796              		.loc 1 4763 5 is_stmt 0 view .LVU1909
 6797 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6798              	.LCFI59:
 6799              		.cfi_def_cfa_offset 24
 6800              		.cfi_offset 4, -24
 6801              		.cfi_offset 5, -20
 6802              		.cfi_offset 6, -16
 6803              		.cfi_offset 7, -12
 6804              		.cfi_offset 8, -8
 6805              		.cfi_offset 14, -4
 6806 0004 069F     		ldr	r7, [sp, #24]
4764:os/tasks.c    **** 
 6807              		.loc 1 4764 9 is_stmt 1 view .LVU1910
4766:os/tasks.c    **** 
 6808              		.loc 1 4766 9 view .LVU1911
 6809 0006 50B1     		cbz	r0, .L534
4766:os/tasks.c    **** 
 6810              		.loc 1 4766 9 view .LVU1912
 6811              	.LBB252:
 6812              	.LBI252:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 6813              		.loc 2 193 34 view .LVU1913
 6814              	.LBB253:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 249


 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 6815              		.loc 2 195 9 view .LVU1914
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6816              		.loc 2 197 9 view .LVU1915
 6817              		.syntax unified
 6818              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 6819 0008 4FF05003 			mov r3, #80												
 6820 000c 72B6     		cpsid i													
 6821 000e 83F31188 		msr basepri, r3											
 6822 0012 BFF36F8F 		isb														
 6823 0016 BFF34F8F 		dsb														
 6824 001a 62B6     		cpsie i													
 6825              	
 6826              	@ 0 "" 2
 6827              	.LVL495:
 6828              		.thumb
 6829              		.syntax unified
 6830              	.L535:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 6831              		.loc 2 197 9 is_stmt 0 view .LVU1916
 6832              	.LBE253:
 6833              	.LBE252:
4766:os/tasks.c    **** 
 6834              		.loc 1 4766 9 is_stmt 1 discriminator 1 view .LVU1917
4766:os/tasks.c    **** 
 6835              		.loc 1 4766 9 discriminator 1 view .LVU1918
4766:os/tasks.c    **** 
 6836              		.loc 1 4766 9 discriminator 1 view .LVU1919
 6837 001c FEE7     		b	.L535
 6838              	.LVL496:
 6839              	.L534:
4766:os/tasks.c    **** 
 6840              		.loc 1 4766 9 is_stmt 0 discriminator 1 view .LVU1920
 6841 001e 8846     		mov	r8, r1
 6842 0020 1646     		mov	r6, r2
 6843 0022 1D46     		mov	r5, r3
 6844 0024 0446     		mov	r4, r0
4766:os/tasks.c    **** 
 6845              		.loc 1 4766 78 is_stmt 1 discriminator 2 view .LVU1921
4768:os/tasks.c    ****         {
 6846              		.loc 1 4768 9 discriminator 2 view .LVU1922
 6847 0026 FFF7FEFF 		bl	vPortEnterCritical
 6848              	.LVL497:
4771:os/tasks.c    ****             {
 6849              		.loc 1 4771 13 discriminator 2 view .LVU1923
4771:os/tasks.c    ****             {
 6850              		.loc 1 4771 29 is_stmt 0 discriminator 2 view .LVU1924
 6851 002a 294B     		ldr	r3, .L543
 6852 002c 1B68     		ldr	r3, [r3]
4771:os/tasks.c    ****             {
 6853              		.loc 1 4771 44 discriminator 2 view .LVU1925
 6854 002e 2344     		add	r3, r3, r4
 6855 0030 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 6856 0034 DBB2     		uxtb	r3, r3
4771:os/tasks.c    ****             {
 6857              		.loc 1 4771 15 discriminator 2 view .LVU1926
 6858 0036 022B     		cmp	r3, #2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 250


 6859 0038 0FD0     		beq	.L536
4776:os/tasks.c    **** 
 6860              		.loc 1 4776 17 is_stmt 1 view .LVU1927
4776:os/tasks.c    **** 
 6861              		.loc 1 4776 64 is_stmt 0 view .LVU1928
 6862 003a 2549     		ldr	r1, .L543
 6863 003c 0B68     		ldr	r3, [r1]
 6864 003e 04F11402 		add	r2, r4, #20
 6865 0042 03EB8203 		add	r3, r3, r2, lsl #2
 6866 0046 5A68     		ldr	r2, [r3, #4]
 6867 0048 22EA0802 		bic	r2, r2, r8
 6868 004c 5A60     		str	r2, [r3, #4]
4779:os/tasks.c    **** 
 6869              		.loc 1 4779 17 is_stmt 1 view .LVU1929
4779:os/tasks.c    **** 
 6870              		.loc 1 4779 29 is_stmt 0 view .LVU1930
 6871 004e 0B68     		ldr	r3, [r1]
4779:os/tasks.c    **** 
 6872              		.loc 1 4779 62 view .LVU1931
 6873 0050 2344     		add	r3, r3, r4
 6874 0052 0122     		movs	r2, #1
 6875 0054 83F85820 		strb	r2, [r3, #88]
4781:os/tasks.c    ****                 {
 6876              		.loc 1 4781 17 is_stmt 1 view .LVU1932
4781:os/tasks.c    ****                 {
 6877              		.loc 1 4781 19 is_stmt 0 view .LVU1933
 6878 0058 07BB     		cbnz	r7, .L541
 6879              	.LVL498:
 6880              	.L536:
4799:os/tasks.c    ****             }
 6881              		.loc 1 4799 41 is_stmt 1 view .LVU1934
4802:os/tasks.c    **** 
 6882              		.loc 1 4802 9 view .LVU1935
 6883 005a FFF7FEFF 		bl	vPortExitCritical
 6884              	.LVL499:
4804:os/tasks.c    ****         {
 6885              		.loc 1 4804 9 view .LVU1936
 6886 005e FFF7FEFF 		bl	vPortEnterCritical
 6887              	.LVL500:
4806:os/tasks.c    **** 
 6888              		.loc 1 4806 51 view .LVU1937
4808:os/tasks.c    ****             {
 6889              		.loc 1 4808 13 view .LVU1938
4808:os/tasks.c    ****             {
 6890              		.loc 1 4808 15 is_stmt 0 view .LVU1939
 6891 0062 3DB1     		cbz	r5, .L537
4812:os/tasks.c    ****             }
 6892              		.loc 1 4812 17 is_stmt 1 view .LVU1940
4812:os/tasks.c    ****             }
 6893              		.loc 1 4812 53 is_stmt 0 view .LVU1941
 6894 0064 1A4B     		ldr	r3, .L543
 6895 0066 1B68     		ldr	r3, [r3]
4812:os/tasks.c    ****             }
 6896              		.loc 1 4812 70 view .LVU1942
 6897 0068 04F11402 		add	r2, r4, #20
 6898 006c 03EB8203 		add	r3, r3, r2, lsl #2
 6899 0070 5B68     		ldr	r3, [r3, #4]
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 251


4812:os/tasks.c    ****             }
 6900              		.loc 1 4812 39 view .LVU1943
 6901 0072 2B60     		str	r3, [r5]
 6902              	.L537:
4819:os/tasks.c    ****             {
 6903              		.loc 1 4819 13 is_stmt 1 view .LVU1944
4819:os/tasks.c    ****             {
 6904              		.loc 1 4819 29 is_stmt 0 view .LVU1945
 6905 0074 164B     		ldr	r3, .L543
 6906 0076 1B68     		ldr	r3, [r3]
4819:os/tasks.c    ****             {
 6907              		.loc 1 4819 44 view .LVU1946
 6908 0078 2344     		add	r3, r3, r4
 6909 007a 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 6910 007e DBB2     		uxtb	r3, r3
4819:os/tasks.c    ****             {
 6911              		.loc 1 4819 15 view .LVU1947
 6912 0080 022B     		cmp	r3, #2
 6913 0082 18D0     		beq	.L542
4822:os/tasks.c    ****             }
 6914              		.loc 1 4822 25 view .LVU1948
 6915 0084 0025     		movs	r5, #0
 6916              	.LVL501:
 6917              	.L538:
4832:os/tasks.c    ****         }
 6918              		.loc 1 4832 13 is_stmt 1 view .LVU1949
4832:os/tasks.c    ****         }
 6919              		.loc 1 4832 25 is_stmt 0 view .LVU1950
 6920 0086 124B     		ldr	r3, .L543
 6921 0088 1B68     		ldr	r3, [r3]
4832:os/tasks.c    ****         }
 6922              		.loc 1 4832 58 view .LVU1951
 6923 008a 1C44     		add	r4, r4, r3
 6924              	.LVL502:
4832:os/tasks.c    ****         }
 6925              		.loc 1 4832 58 view .LVU1952
 6926 008c 0023     		movs	r3, #0
 6927 008e 84F85830 		strb	r3, [r4, #88]
4834:os/tasks.c    **** 
 6928              		.loc 1 4834 9 is_stmt 1 view .LVU1953
 6929 0092 FFF7FEFF 		bl	vPortExitCritical
 6930              	.LVL503:
4836:os/tasks.c    ****     }
 6931              		.loc 1 4836 9 view .LVU1954
4837:os/tasks.c    **** 
 6932              		.loc 1 4837 5 is_stmt 0 view .LVU1955
 6933 0096 2846     		mov	r0, r5
 6934 0098 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6935              	.LVL504:
 6936              	.L541:
4783:os/tasks.c    ****                     traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWait );
 6937              		.loc 1 4783 21 is_stmt 1 view .LVU1956
 6938 009c 1146     		mov	r1, r2
 6939 009e 3846     		mov	r0, r7
 6940 00a0 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 6941              	.LVL505:
4784:os/tasks.c    **** 
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 252


 6942              		.loc 1 4784 65 view .LVU1957
4790:os/tasks.c    ****                 }
 6943              		.loc 1 4790 21 view .LVU1958
 6944 00a4 0B4B     		ldr	r3, .L543+4
 6945 00a6 4FF08052 		mov	r2, #268435456
 6946 00aa 1A60     		str	r2, [r3]
 6947              	.LVL506:
4790:os/tasks.c    ****                 }
 6948              		.loc 1 4790 21 view .LVU1959
 6949              		.syntax unified
 6950              	@ 4790 "os/tasks.c" 1
 6951 00ac BFF34F8F 		dsb
 6952              	@ 0 "" 2
4790:os/tasks.c    ****                 }
 6953              		.loc 1 4790 21 view .LVU1960
 6954              	@ 4790 "os/tasks.c" 1
 6955 00b0 BFF36F8F 		isb
 6956              	@ 0 "" 2
4790:os/tasks.c    ****                 }
 6957              		.loc 1 4790 43 view .LVU1961
 6958              		.thumb
 6959              		.syntax unified
 6960 00b4 D1E7     		b	.L536
 6961              	.L542:
4828:os/tasks.c    ****                 xReturn = pdTRUE;
 6962              		.loc 1 4828 17 view .LVU1962
4828:os/tasks.c    ****                 xReturn = pdTRUE;
 6963              		.loc 1 4828 64 is_stmt 0 view .LVU1963
 6964 00b6 064B     		ldr	r3, .L543
 6965 00b8 1B68     		ldr	r3, [r3]
 6966 00ba 04F11402 		add	r2, r4, #20
 6967 00be 03EB8203 		add	r3, r3, r2, lsl #2
 6968 00c2 5A68     		ldr	r2, [r3, #4]
 6969 00c4 22EA0602 		bic	r2, r2, r6
 6970 00c8 5A60     		str	r2, [r3, #4]
4829:os/tasks.c    ****             }
 6971              		.loc 1 4829 17 is_stmt 1 view .LVU1964
 6972              	.LVL507:
4829:os/tasks.c    ****             }
 6973              		.loc 1 4829 25 is_stmt 0 view .LVU1965
 6974 00ca 0125     		movs	r5, #1
 6975              	.LVL508:
4829:os/tasks.c    ****             }
 6976              		.loc 1 4829 25 view .LVU1966
 6977 00cc DBE7     		b	.L538
 6978              	.L544:
 6979 00ce 00BF     		.align	2
 6980              	.L543:
 6981 00d0 00000000 		.word	.LANCHOR10
 6982 00d4 04ED00E0 		.word	-536810236
 6983              		.cfi_endproc
 6984              	.LFE59:
 6986              		.section	.text.xTaskGenericNotify,"ax",%progbits
 6987              		.align	1
 6988              		.global	xTaskGenericNotify
 6989              		.syntax unified
 6990              		.thumb
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 253


 6991              		.thumb_func
 6992              		.fpu fpv5-d16
 6994              	xTaskGenericNotify:
 6995              	.LVL509:
 6996              	.LFB60:
4849:os/tasks.c    ****         TCB_t * pxTCB;
 6997              		.loc 1 4849 5 is_stmt 1 view -0
 6998              		.cfi_startproc
 6999              		@ args = 4, pretend = 0, frame = 0
 7000              		@ frame_needed = 0, uses_anonymous_args = 0
4849:os/tasks.c    ****         TCB_t * pxTCB;
 7001              		.loc 1 4849 5 is_stmt 0 view .LVU1968
 7002 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7003              	.LCFI60:
 7004              		.cfi_def_cfa_offset 24
 7005              		.cfi_offset 4, -24
 7006              		.cfi_offset 5, -20
 7007              		.cfi_offset 6, -16
 7008              		.cfi_offset 7, -12
 7009              		.cfi_offset 8, -8
 7010              		.cfi_offset 14, -4
 7011 0004 DDF81880 		ldr	r8, [sp, #24]
4850:os/tasks.c    ****         BaseType_t xReturn = pdPASS;
 7012              		.loc 1 4850 9 is_stmt 1 view .LVU1969
4851:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
 7013              		.loc 1 4851 9 view .LVU1970
 7014              	.LVL510:
4852:os/tasks.c    **** 
 7015              		.loc 1 4852 9 view .LVU1971
4854:os/tasks.c    ****         configASSERT( xTaskToNotify );
 7016              		.loc 1 4854 9 view .LVU1972
 7017 0008 51B1     		cbz	r1, .L546
4854:os/tasks.c    ****         configASSERT( xTaskToNotify );
 7018              		.loc 1 4854 9 view .LVU1973
 7019              	.LBB254:
 7020              	.LBI254:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7021              		.loc 2 193 34 view .LVU1974
 7022              	.LBB255:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7023              		.loc 2 195 9 view .LVU1975
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7024              		.loc 2 197 9 view .LVU1976
 7025              		.syntax unified
 7026              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7027 000a 4FF05003 			mov r3, #80												
 7028 000e 72B6     		cpsid i													
 7029 0010 83F31188 		msr basepri, r3											
 7030 0014 BFF36F8F 		isb														
 7031 0018 BFF34F8F 		dsb														
 7032 001c 62B6     		cpsie i													
 7033              	
 7034              	@ 0 "" 2
 7035              	.LVL511:
 7036              		.thumb
 7037              		.syntax unified
 7038              	.L547:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 254


 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7039              		.loc 2 197 9 is_stmt 0 view .LVU1977
 7040              	.LBE255:
 7041              	.LBE254:
4854:os/tasks.c    ****         configASSERT( xTaskToNotify );
 7042              		.loc 1 4854 9 is_stmt 1 discriminator 1 view .LVU1978
4854:os/tasks.c    ****         configASSERT( xTaskToNotify );
 7043              		.loc 1 4854 9 discriminator 1 view .LVU1979
4854:os/tasks.c    ****         configASSERT( xTaskToNotify );
 7044              		.loc 1 4854 9 discriminator 1 view .LVU1980
 7045 001e FEE7     		b	.L547
 7046              	.LVL512:
 7047              	.L546:
4854:os/tasks.c    ****         configASSERT( xTaskToNotify );
 7048              		.loc 1 4854 9 is_stmt 0 discriminator 1 view .LVU1981
 7049 0020 0546     		mov	r5, r0
 7050 0022 1646     		mov	r6, r2
 7051 0024 1F46     		mov	r7, r3
 7052 0026 0C46     		mov	r4, r1
4854:os/tasks.c    ****         configASSERT( xTaskToNotify );
 7053              		.loc 1 4854 80 is_stmt 1 discriminator 2 view .LVU1982
4855:os/tasks.c    ****         pxTCB = xTaskToNotify;
 7054              		.loc 1 4855 9 discriminator 2 view .LVU1983
 7055 0028 C8B1     		cbz	r0, .L567
4855:os/tasks.c    ****         pxTCB = xTaskToNotify;
 7056              		.loc 1 4855 38 discriminator 2 view .LVU1984
4856:os/tasks.c    **** 
 7057              		.loc 1 4856 9 discriminator 2 view .LVU1985
 7058              	.LVL513:
4858:os/tasks.c    ****         {
 7059              		.loc 1 4858 9 discriminator 2 view .LVU1986
 7060 002a FFF7FEFF 		bl	vPortEnterCritical
 7061              	.LVL514:
4860:os/tasks.c    ****             {
 7062              		.loc 1 4860 13 discriminator 2 view .LVU1987
4860:os/tasks.c    ****             {
 7063              		.loc 1 4860 15 is_stmt 0 discriminator 2 view .LVU1988
 7064 002e B8F1000F 		cmp	r8, #0
 7065 0032 06D0     		beq	.L550
4862:os/tasks.c    ****             }
 7066              		.loc 1 4862 17 is_stmt 1 view .LVU1989
4862:os/tasks.c    ****             }
 7067              		.loc 1 4862 71 is_stmt 0 view .LVU1990
 7068 0034 04F11403 		add	r3, r4, #20
 7069 0038 05EB8303 		add	r3, r5, r3, lsl #2
 7070 003c 5B68     		ldr	r3, [r3, #4]
4862:os/tasks.c    ****             }
 7071              		.loc 1 4862 47 view .LVU1991
 7072 003e C8F80030 		str	r3, [r8]
 7073              	.L550:
4865:os/tasks.c    **** 
 7074              		.loc 1 4865 13 is_stmt 1 view .LVU1992
4865:os/tasks.c    **** 
 7075              		.loc 1 4865 35 is_stmt 0 view .LVU1993
 7076 0042 2B19     		adds	r3, r5, r4
 7077 0044 93F85820 		ldrb	r2, [r3, #88]	@ zero_extendqisi2
 7078 0048 D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 255


 7079              	.LVL515:
4867:os/tasks.c    **** 
 7080              		.loc 1 4867 13 is_stmt 1 view .LVU1994
4867:os/tasks.c    **** 
 7081              		.loc 1 4867 53 is_stmt 0 view .LVU1995
 7082 004a 0221     		movs	r1, #2
 7083 004c 83F85810 		strb	r1, [r3, #88]
4869:os/tasks.c    ****             {
 7084              		.loc 1 4869 13 is_stmt 1 view .LVU1996
 7085 0050 042F     		cmp	r7, #4
 7086 0052 31D8     		bhi	.L551
 7087 0054 DFE807F0 		tbb	[pc, r7]
 7088              	.L553:
 7089 0058 3E       		.byte	(.L563-.L553)/2
 7090 0059 0E       		.byte	(.L556-.L553)/2
 7091 005a 17       		.byte	(.L555-.L553)/2
 7092 005b 20       		.byte	(.L554-.L553)/2
 7093 005c 27       		.byte	(.L552-.L553)/2
 7094              	.LVL516:
 7095 005d 00       		.p2align 1
 7096              	.L567:
4855:os/tasks.c    ****         pxTCB = xTaskToNotify;
 7097              		.loc 1 4855 9 view .LVU1997
 7098              	.LBB256:
 7099              	.LBI256:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7100              		.loc 2 193 34 view .LVU1998
 7101              	.LBB257:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7102              		.loc 2 195 9 view .LVU1999
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7103              		.loc 2 197 9 view .LVU2000
 7104              		.syntax unified
 7105              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7106 005e 4FF05003 			mov r3, #80												
 7107 0062 72B6     		cpsid i													
 7108 0064 83F31188 		msr basepri, r3											
 7109 0068 BFF36F8F 		isb														
 7110 006c BFF34F8F 		dsb														
 7111 0070 62B6     		cpsie i													
 7112              	
 7113              	@ 0 "" 2
 7114              	.LVL517:
 7115              		.thumb
 7116              		.syntax unified
 7117              	.L549:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7118              		.loc 2 197 9 is_stmt 0 view .LVU2001
 7119              	.LBE257:
 7120              	.LBE256:
4855:os/tasks.c    ****         pxTCB = xTaskToNotify;
 7121              		.loc 1 4855 9 is_stmt 1 discriminator 2 view .LVU2002
4855:os/tasks.c    ****         pxTCB = xTaskToNotify;
 7122              		.loc 1 4855 9 discriminator 2 view .LVU2003
4855:os/tasks.c    ****         pxTCB = xTaskToNotify;
 7123              		.loc 1 4855 9 discriminator 2 view .LVU2004
 7124 0072 FEE7     		b	.L549
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 256


 7125              	.LVL518:
 7126              	.L556:
4872:os/tasks.c    ****                     break;
 7127              		.loc 1 4872 21 view .LVU2005
4872:os/tasks.c    ****                     break;
 7128              		.loc 1 4872 63 is_stmt 0 view .LVU2006
 7129 0074 04F11403 		add	r3, r4, #20
 7130 0078 05EB8303 		add	r3, r5, r3, lsl #2
 7131 007c 5968     		ldr	r1, [r3, #4]
 7132 007e 0E43     		orrs	r6, r6, r1
 7133              	.LVL519:
4872:os/tasks.c    ****                     break;
 7134              		.loc 1 4872 63 view .LVU2007
 7135 0080 5E60     		str	r6, [r3, #4]
4873:os/tasks.c    **** 
 7136              		.loc 1 4873 21 is_stmt 1 view .LVU2008
4851:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
 7137              		.loc 1 4851 20 is_stmt 0 view .LVU2009
 7138 0082 0124     		movs	r4, #1
 7139              	.LVL520:
4873:os/tasks.c    **** 
 7140              		.loc 1 4873 21 view .LVU2010
 7141 0084 27E0     		b	.L557
 7142              	.LVL521:
 7143              	.L555:
4876:os/tasks.c    ****                     break;
 7144              		.loc 1 4876 21 is_stmt 1 view .LVU2011
4876:os/tasks.c    ****                     break;
 7145              		.loc 1 4876 45 is_stmt 0 view .LVU2012
 7146 0086 04F11403 		add	r3, r4, #20
 7147 008a 05EB8303 		add	r3, r5, r3, lsl #2
 7148 008e 5968     		ldr	r1, [r3, #4]
4876:os/tasks.c    ****                     break;
 7149              		.loc 1 4876 66 view .LVU2013
 7150 0090 0131     		adds	r1, r1, #1
 7151 0092 5960     		str	r1, [r3, #4]
4877:os/tasks.c    **** 
 7152              		.loc 1 4877 21 is_stmt 1 view .LVU2014
4851:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
 7153              		.loc 1 4851 20 is_stmt 0 view .LVU2015
 7154 0094 0124     		movs	r4, #1
 7155              	.LVL522:
4877:os/tasks.c    **** 
 7156              		.loc 1 4877 21 view .LVU2016
 7157 0096 1EE0     		b	.L557
 7158              	.LVL523:
 7159              	.L554:
4880:os/tasks.c    ****                     break;
 7160              		.loc 1 4880 21 is_stmt 1 view .LVU2017
4880:os/tasks.c    ****                     break;
 7161              		.loc 1 4880 63 is_stmt 0 view .LVU2018
 7162 0098 04F11403 		add	r3, r4, #20
 7163 009c 05EB8303 		add	r3, r5, r3, lsl #2
 7164 00a0 5E60     		str	r6, [r3, #4]
4881:os/tasks.c    **** 
 7165              		.loc 1 4881 21 is_stmt 1 view .LVU2019
4851:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 257


 7166              		.loc 1 4851 20 is_stmt 0 view .LVU2020
 7167 00a2 0124     		movs	r4, #1
 7168              	.LVL524:
4881:os/tasks.c    **** 
 7169              		.loc 1 4881 21 view .LVU2021
 7170 00a4 17E0     		b	.L557
 7171              	.LVL525:
 7172              	.L552:
4885:os/tasks.c    ****                     {
 7173              		.loc 1 4885 21 is_stmt 1 view .LVU2022
4885:os/tasks.c    ****                     {
 7174              		.loc 1 4885 23 is_stmt 0 view .LVU2023
 7175 00a6 022A     		cmp	r2, #2
 7176 00a8 1CD0     		beq	.L564
4887:os/tasks.c    ****                     }
 7177              		.loc 1 4887 25 is_stmt 1 view .LVU2024
4887:os/tasks.c    ****                     }
 7178              		.loc 1 4887 67 is_stmt 0 view .LVU2025
 7179 00aa 04F11403 		add	r3, r4, #20
 7180 00ae 05EB8303 		add	r3, r5, r3, lsl #2
 7181 00b2 5E60     		str	r6, [r3, #4]
4851:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
 7182              		.loc 1 4851 20 view .LVU2026
 7183 00b4 0124     		movs	r4, #1
 7184              	.LVL526:
4851:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
 7185              		.loc 1 4851 20 view .LVU2027
 7186 00b6 0EE0     		b	.L557
 7187              	.LVL527:
 7188              	.L551:
4908:os/tasks.c    **** 
 7189              		.loc 1 4908 21 is_stmt 1 view .LVU2028
 7190 00b8 244B     		ldr	r3, .L569
 7191 00ba 1B68     		ldr	r3, [r3]
 7192 00bc A3B1     		cbz	r3, .L565
4908:os/tasks.c    **** 
 7193              		.loc 1 4908 21 view .LVU2029
 7194              	.LBB258:
 7195              	.LBI258:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7196              		.loc 2 193 34 view .LVU2030
 7197              	.LBB259:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7198              		.loc 2 195 9 view .LVU2031
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7199              		.loc 2 197 9 view .LVU2032
 7200              		.syntax unified
 7201              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7202 00be 4FF05003 			mov r3, #80												
 7203 00c2 72B6     		cpsid i													
 7204 00c4 83F31188 		msr basepri, r3											
 7205 00c8 BFF36F8F 		isb														
 7206 00cc BFF34F8F 		dsb														
 7207 00d0 62B6     		cpsie i													
 7208              	
 7209              	@ 0 "" 2
 7210              	.LVL528:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 258


 7211              		.thumb
 7212              		.syntax unified
 7213              	.L558:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7214              		.loc 2 197 9 is_stmt 0 view .LVU2033
 7215              	.LBE259:
 7216              	.LBE258:
4908:os/tasks.c    **** 
 7217              		.loc 1 4908 21 is_stmt 1 discriminator 3 view .LVU2034
4908:os/tasks.c    **** 
 7218              		.loc 1 4908 21 discriminator 3 view .LVU2035
4908:os/tasks.c    **** 
 7219              		.loc 1 4908 21 discriminator 3 view .LVU2036
 7220 00d2 FEE7     		b	.L558
 7221              	.L563:
4867:os/tasks.c    **** 
 7222              		.loc 1 4867 53 is_stmt 0 view .LVU2037
 7223 00d4 0124     		movs	r4, #1
 7224              	.LVL529:
 7225              	.L557:
4913:os/tasks.c    **** 
 7226              		.loc 1 4913 48 is_stmt 1 view .LVU2038
4917:os/tasks.c    ****             {
 7227              		.loc 1 4917 13 view .LVU2039
4917:os/tasks.c    ****             {
 7228              		.loc 1 4917 15 is_stmt 0 view .LVU2040
 7229 00d6 012A     		cmp	r2, #1
 7230 00d8 08D0     		beq	.L568
 7231              	.LVL530:
 7232              	.L559:
4954:os/tasks.c    ****             }
 7233              		.loc 1 4954 41 is_stmt 1 view .LVU2041
4957:os/tasks.c    **** 
 7234              		.loc 1 4957 9 view .LVU2042
 7235 00da FFF7FEFF 		bl	vPortExitCritical
 7236              	.LVL531:
4959:os/tasks.c    ****     }
 7237              		.loc 1 4959 9 view .LVU2043
4960:os/tasks.c    **** 
 7238              		.loc 1 4960 5 is_stmt 0 view .LVU2044
 7239 00de 2046     		mov	r0, r4
 7240 00e0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7241              	.LVL532:
 7242              	.L564:
4892:os/tasks.c    ****                     }
 7243              		.loc 1 4892 33 view .LVU2045
 7244 00e4 0024     		movs	r4, #0
 7245              	.LVL533:
4892:os/tasks.c    ****                     }
 7246              		.loc 1 4892 33 view .LVU2046
 7247 00e6 F6E7     		b	.L557
 7248              	.LVL534:
 7249              	.L565:
4851:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
 7250              		.loc 1 4851 20 view .LVU2047
 7251 00e8 0124     		movs	r4, #1
 7252              	.LVL535:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 259


4851:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
 7253              		.loc 1 4851 20 view .LVU2048
 7254 00ea F4E7     		b	.L557
 7255              	.LVL536:
 7256              	.L568:
4919:os/tasks.c    ****                 prvAddTaskToReadyList( pxTCB );
 7257              		.loc 1 4919 17 is_stmt 1 view .LVU2049
4919:os/tasks.c    ****                 prvAddTaskToReadyList( pxTCB );
 7258              		.loc 1 4919 26 is_stmt 0 view .LVU2050
 7259 00ec 2E1D     		adds	r6, r5, #4
 7260 00ee 3046     		mov	r0, r6
 7261 00f0 FFF7FEFF 		bl	uxListRemove
 7262              	.LVL537:
4920:os/tasks.c    **** 
 7263              		.loc 1 4920 17 is_stmt 1 view .LVU2051
4920:os/tasks.c    **** 
 7264              		.loc 1 4920 17 view .LVU2052
 7265 00f4 E86A     		ldr	r0, [r5, #44]
 7266 00f6 164B     		ldr	r3, .L569+4
 7267 00f8 1B68     		ldr	r3, [r3]
 7268 00fa 9842     		cmp	r0, r3
 7269 00fc 01D9     		bls	.L560
4920:os/tasks.c    **** 
 7270              		.loc 1 4920 17 discriminator 1 view .LVU2053
 7271 00fe 144B     		ldr	r3, .L569+4
 7272 0100 1860     		str	r0, [r3]
 7273              	.L560:
4920:os/tasks.c    **** 
 7274              		.loc 1 4920 17 discriminator 3 view .LVU2054
4920:os/tasks.c    **** 
 7275              		.loc 1 4920 17 discriminator 3 view .LVU2055
 7276 0102 00EB8000 		add	r0, r0, r0, lsl #2
 7277 0106 3146     		mov	r1, r6
 7278 0108 124B     		ldr	r3, .L569+8
 7279 010a 03EB8000 		add	r0, r3, r0, lsl #2
 7280 010e FFF7FEFF 		bl	vListInsertEnd
 7281              	.LVL538:
4920:os/tasks.c    **** 
 7282              		.loc 1 4920 47 discriminator 3 view .LVU2056
4923:os/tasks.c    **** 
 7283              		.loc 1 4923 17 discriminator 3 view .LVU2057
 7284 0112 AB6A     		ldr	r3, [r5, #40]
 7285 0114 53B1     		cbz	r3, .L561
4923:os/tasks.c    **** 
 7286              		.loc 1 4923 17 view .LVU2058
 7287              	.LBB260:
 7288              	.LBI260:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7289              		.loc 2 193 34 view .LVU2059
 7290              	.LBB261:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7291              		.loc 2 195 9 view .LVU2060
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7292              		.loc 2 197 9 view .LVU2061
 7293              		.syntax unified
 7294              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7295 0116 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 260


 7296 011a 72B6     		cpsid i													
 7297 011c 83F31188 		msr basepri, r3											
 7298 0120 BFF36F8F 		isb														
 7299 0124 BFF34F8F 		dsb														
 7300 0128 62B6     		cpsie i													
 7301              	
 7302              	@ 0 "" 2
 7303              	.LVL539:
 7304              		.thumb
 7305              		.syntax unified
 7306              	.L562:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7307              		.loc 2 197 9 is_stmt 0 view .LVU2062
 7308              	.LBE261:
 7309              	.LBE260:
4923:os/tasks.c    **** 
 7310              		.loc 1 4923 17 is_stmt 1 discriminator 4 view .LVU2063
4923:os/tasks.c    **** 
 7311              		.loc 1 4923 17 discriminator 4 view .LVU2064
4923:os/tasks.c    **** 
 7312              		.loc 1 4923 17 discriminator 4 view .LVU2065
 7313 012a FEE7     		b	.L562
 7314              	.L561:
4923:os/tasks.c    **** 
 7315              		.loc 1 4923 94 discriminator 2 view .LVU2066
4941:os/tasks.c    ****                 {
 7316              		.loc 1 4941 17 discriminator 2 view .LVU2067
4941:os/tasks.c    ****                 {
 7317              		.loc 1 4941 26 is_stmt 0 discriminator 2 view .LVU2068
 7318 012c EA6A     		ldr	r2, [r5, #44]
4941:os/tasks.c    ****                 {
 7319              		.loc 1 4941 53 discriminator 2 view .LVU2069
 7320 012e 0A4B     		ldr	r3, .L569+12
 7321 0130 1B68     		ldr	r3, [r3]
 7322 0132 DB6A     		ldr	r3, [r3, #44]
4941:os/tasks.c    ****                 {
 7323              		.loc 1 4941 19 discriminator 2 view .LVU2070
 7324 0134 9A42     		cmp	r2, r3
 7325 0136 D0D9     		bls	.L559
4945:os/tasks.c    ****                 }
 7326              		.loc 1 4945 21 is_stmt 1 view .LVU2071
 7327 0138 084B     		ldr	r3, .L569+16
 7328 013a 4FF08052 		mov	r2, #268435456
 7329 013e 1A60     		str	r2, [r3]
 7330              	.LVL540:
4945:os/tasks.c    ****                 }
 7331              		.loc 1 4945 21 view .LVU2072
 7332              		.syntax unified
 7333              	@ 4945 "os/tasks.c" 1
 7334 0140 BFF34F8F 		dsb
 7335              	@ 0 "" 2
4945:os/tasks.c    ****                 }
 7336              		.loc 1 4945 21 view .LVU2073
 7337              	@ 4945 "os/tasks.c" 1
 7338 0144 BFF36F8F 		isb
 7339              	@ 0 "" 2
4945:os/tasks.c    ****                 }
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 261


 7340              		.loc 1 4945 52 view .LVU2074
 7341              		.thumb
 7342              		.syntax unified
 7343 0148 C7E7     		b	.L559
 7344              	.L570:
 7345 014a 00BF     		.align	2
 7346              	.L569:
 7347 014c 00000000 		.word	.LANCHOR15
 7348 0150 00000000 		.word	.LANCHOR13
 7349 0154 00000000 		.word	.LANCHOR4
 7350 0158 00000000 		.word	.LANCHOR10
 7351 015c 04ED00E0 		.word	-536810236
 7352              		.cfi_endproc
 7353              	.LFE60:
 7355              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 7356              		.align	1
 7357              		.global	xTaskGenericNotifyFromISR
 7358              		.syntax unified
 7359              		.thumb
 7360              		.thumb_func
 7361              		.fpu fpv5-d16
 7363              	xTaskGenericNotifyFromISR:
 7364              	.LVL541:
 7365              	.LFB61:
4973:os/tasks.c    ****         TCB_t * pxTCB;
 7366              		.loc 1 4973 5 view -0
 7367              		.cfi_startproc
 7368              		@ args = 8, pretend = 0, frame = 0
 7369              		@ frame_needed = 0, uses_anonymous_args = 0
4973:os/tasks.c    ****         TCB_t * pxTCB;
 7370              		.loc 1 4973 5 is_stmt 0 view .LVU2076
 7371 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 7372              	.LCFI61:
 7373              		.cfi_def_cfa_offset 32
 7374              		.cfi_offset 4, -32
 7375              		.cfi_offset 5, -28
 7376              		.cfi_offset 6, -24
 7377              		.cfi_offset 7, -20
 7378              		.cfi_offset 8, -16
 7379              		.cfi_offset 9, -12
 7380              		.cfi_offset 10, -8
 7381              		.cfi_offset 14, -4
 7382 0004 DDF820A0 		ldr	r10, [sp, #32]
 7383 0008 099E     		ldr	r6, [sp, #36]
4974:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
 7384              		.loc 1 4974 9 is_stmt 1 view .LVU2077
4975:os/tasks.c    ****         BaseType_t xReturn = pdPASS;
 7385              		.loc 1 4975 9 view .LVU2078
4976:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
 7386              		.loc 1 4976 9 view .LVU2079
 7387              	.LVL542:
4977:os/tasks.c    **** 
 7388              		.loc 1 4977 9 view .LVU2080
4979:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7389              		.loc 1 4979 9 view .LVU2081
 7390 000a 78B1     		cbz	r0, .L596
 7391 000c 0C46     		mov	r4, r1
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 262


 7392 000e 9046     		mov	r8, r2
 7393 0010 9946     		mov	r9, r3
 7394 0012 0546     		mov	r5, r0
4979:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7395              		.loc 1 4979 38 discriminator 2 view .LVU2082
4980:os/tasks.c    **** 
 7396              		.loc 1 4980 9 discriminator 2 view .LVU2083
 7397 0014 A9B1     		cbz	r1, .L574
4980:os/tasks.c    **** 
 7398              		.loc 1 4980 9 view .LVU2084
 7399              	.LBB262:
 7400              	.LBI262:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7401              		.loc 2 193 34 view .LVU2085
 7402              	.LBB263:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7403              		.loc 2 195 9 view .LVU2086
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7404              		.loc 2 197 9 view .LVU2087
 7405              		.syntax unified
 7406              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7407 0016 4FF05003 			mov r3, #80												
 7408 001a 72B6     		cpsid i													
 7409 001c 83F31188 		msr basepri, r3											
 7410 0020 BFF36F8F 		isb														
 7411 0024 BFF34F8F 		dsb														
 7412 0028 62B6     		cpsie i													
 7413              	
 7414              	@ 0 "" 2
 7415              	.LVL543:
 7416              		.thumb
 7417              		.syntax unified
 7418              	.L575:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7419              		.loc 2 197 9 is_stmt 0 view .LVU2088
 7420              	.LBE263:
 7421              	.LBE262:
4980:os/tasks.c    **** 
 7422              		.loc 1 4980 9 is_stmt 1 discriminator 2 view .LVU2089
4980:os/tasks.c    **** 
 7423              		.loc 1 4980 9 discriminator 2 view .LVU2090
4980:os/tasks.c    **** 
 7424              		.loc 1 4980 9 discriminator 2 view .LVU2091
 7425 002a FEE7     		b	.L575
 7426              	.LVL544:
 7427              	.L596:
4979:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7428              		.loc 1 4979 9 view .LVU2092
 7429              	.LBB264:
 7430              	.LBI264:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7431              		.loc 2 193 34 view .LVU2093
 7432              	.LBB265:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7433              		.loc 2 195 9 view .LVU2094
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7434              		.loc 2 197 9 view .LVU2095
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 263


 7435              		.syntax unified
 7436              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7437 002c 4FF05003 			mov r3, #80												
 7438 0030 72B6     		cpsid i													
 7439 0032 83F31188 		msr basepri, r3											
 7440 0036 BFF36F8F 		isb														
 7441 003a BFF34F8F 		dsb														
 7442 003e 62B6     		cpsie i													
 7443              	
 7444              	@ 0 "" 2
 7445              	.LVL545:
 7446              		.thumb
 7447              		.syntax unified
 7448              	.L573:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7449              		.loc 2 197 9 is_stmt 0 view .LVU2096
 7450              	.LBE265:
 7451              	.LBE264:
4979:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7452              		.loc 1 4979 9 is_stmt 1 discriminator 1 view .LVU2097
4979:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7453              		.loc 1 4979 9 discriminator 1 view .LVU2098
4979:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7454              		.loc 1 4979 9 discriminator 1 view .LVU2099
 7455 0040 FEE7     		b	.L573
 7456              	.LVL546:
 7457              	.L574:
4980:os/tasks.c    **** 
 7458              		.loc 1 4980 80 discriminator 2 view .LVU2100
4998:os/tasks.c    **** 
 7459              		.loc 1 4998 9 discriminator 2 view .LVU2101
 7460 0042 FFF7FEFF 		bl	vPortValidateInterruptPriority
 7461              	.LVL547:
5000:os/tasks.c    **** 
 7462              		.loc 1 5000 9 discriminator 2 view .LVU2102
5002:os/tasks.c    ****         {
 7463              		.loc 1 5002 9 discriminator 2 view .LVU2103
 7464              	.LBB266:
 7465              	.LBI266:
 211:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7466              		.loc 2 211 38 discriminator 2 view .LVU2104
 7467              	.LBB267:
 213:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7468              		.loc 2 213 9 discriminator 2 view .LVU2105
 215:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7469              		.loc 2 215 9 discriminator 2 view .LVU2106
 7470              		.syntax unified
 7471              	@ 215 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7472 0046 EFF31187 			mrs r7, basepri											
 7473 004a 4FF05003 		mov r3, #80												
 7474 004e 72B6     		cpsid i													
 7475 0050 83F31188 		msr basepri, r3											
 7476 0054 BFF36F8F 		isb														
 7477 0058 BFF34F8F 		dsb														
 7478 005c 62B6     		cpsie i													
 7479              	
 7480              	@ 0 "" 2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 264


 7481              	.LVL548:
 229:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 7482              		.loc 2 229 9 discriminator 2 view .LVU2107
 229:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 7483              		.loc 2 229 9 is_stmt 0 discriminator 2 view .LVU2108
 7484              		.thumb
 7485              		.syntax unified
 7486              	.LBE267:
 7487              	.LBE266:
5004:os/tasks.c    ****             {
 7488              		.loc 1 5004 13 is_stmt 1 discriminator 2 view .LVU2109
5004:os/tasks.c    ****             {
 7489              		.loc 1 5004 15 is_stmt 0 discriminator 2 view .LVU2110
 7490 005e BAF1000F 		cmp	r10, #0
 7491 0062 06D0     		beq	.L576
5006:os/tasks.c    ****             }
 7492              		.loc 1 5006 17 is_stmt 1 view .LVU2111
5006:os/tasks.c    ****             }
 7493              		.loc 1 5006 71 is_stmt 0 view .LVU2112
 7494 0064 04F11403 		add	r3, r4, #20
 7495 0068 05EB8303 		add	r3, r5, r3, lsl #2
 7496 006c 5B68     		ldr	r3, [r3, #4]
5006:os/tasks.c    ****             }
 7497              		.loc 1 5006 47 view .LVU2113
 7498 006e CAF80030 		str	r3, [r10]
 7499              	.L576:
5009:os/tasks.c    ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7500              		.loc 1 5009 13 is_stmt 1 view .LVU2114
5009:os/tasks.c    ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7501              		.loc 1 5009 35 is_stmt 0 view .LVU2115
 7502 0072 2B19     		adds	r3, r5, r4
 7503 0074 93F85820 		ldrb	r2, [r3, #88]	@ zero_extendqisi2
 7504 0078 D2B2     		uxtb	r2, r2
 7505              	.LVL549:
5010:os/tasks.c    **** 
 7506              		.loc 1 5010 13 is_stmt 1 view .LVU2116
5010:os/tasks.c    **** 
 7507              		.loc 1 5010 53 is_stmt 0 view .LVU2117
 7508 007a 0221     		movs	r1, #2
 7509 007c 83F85810 		strb	r1, [r3, #88]
5012:os/tasks.c    ****             {
 7510              		.loc 1 5012 13 is_stmt 1 view .LVU2118
 7511 0080 B9F1040F 		cmp	r9, #4
 7512 0084 29D8     		bhi	.L577
 7513 0086 DFE809F0 		tbb	[pc, r9]
 7514              	.L579:
 7515 008a 36       		.byte	(.L592-.L579)/2
 7516 008b 03       		.byte	(.L582-.L579)/2
 7517 008c 0D       		.byte	(.L581-.L579)/2
 7518 008d 16       		.byte	(.L580-.L579)/2
 7519 008e 1E       		.byte	(.L578-.L579)/2
 7520 008f 00       		.p2align 1
 7521              	.L582:
5015:os/tasks.c    ****                     break;
 7522              		.loc 1 5015 21 view .LVU2119
5015:os/tasks.c    ****                     break;
 7523              		.loc 1 5015 63 is_stmt 0 view .LVU2120
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 265


 7524 0090 04F11403 		add	r3, r4, #20
 7525 0094 05EB8303 		add	r3, r5, r3, lsl #2
 7526 0098 5968     		ldr	r1, [r3, #4]
 7527 009a 41EA0801 		orr	r1, r1, r8
 7528 009e 5960     		str	r1, [r3, #4]
5016:os/tasks.c    **** 
 7529              		.loc 1 5016 21 is_stmt 1 view .LVU2121
4976:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
 7530              		.loc 1 4976 20 is_stmt 0 view .LVU2122
 7531 00a0 0124     		movs	r4, #1
 7532              	.LVL550:
5016:os/tasks.c    **** 
 7533              		.loc 1 5016 21 view .LVU2123
 7534 00a2 29E0     		b	.L583
 7535              	.LVL551:
 7536              	.L581:
5019:os/tasks.c    ****                     break;
 7537              		.loc 1 5019 21 is_stmt 1 view .LVU2124
5019:os/tasks.c    ****                     break;
 7538              		.loc 1 5019 45 is_stmt 0 view .LVU2125
 7539 00a4 04F11403 		add	r3, r4, #20
 7540 00a8 05EB8303 		add	r3, r5, r3, lsl #2
 7541 00ac 5968     		ldr	r1, [r3, #4]
5019:os/tasks.c    ****                     break;
 7542              		.loc 1 5019 66 view .LVU2126
 7543 00ae 0131     		adds	r1, r1, #1
 7544 00b0 5960     		str	r1, [r3, #4]
5020:os/tasks.c    **** 
 7545              		.loc 1 5020 21 is_stmt 1 view .LVU2127
4976:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
 7546              		.loc 1 4976 20 is_stmt 0 view .LVU2128
 7547 00b2 0124     		movs	r4, #1
 7548              	.LVL552:
5020:os/tasks.c    **** 
 7549              		.loc 1 5020 21 view .LVU2129
 7550 00b4 20E0     		b	.L583
 7551              	.LVL553:
 7552              	.L580:
5023:os/tasks.c    ****                     break;
 7553              		.loc 1 5023 21 is_stmt 1 view .LVU2130
5023:os/tasks.c    ****                     break;
 7554              		.loc 1 5023 63 is_stmt 0 view .LVU2131
 7555 00b6 04F11403 		add	r3, r4, #20
 7556 00ba 05EB8303 		add	r3, r5, r3, lsl #2
 7557 00be C3F80480 		str	r8, [r3, #4]
5024:os/tasks.c    **** 
 7558              		.loc 1 5024 21 is_stmt 1 view .LVU2132
4976:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
 7559              		.loc 1 4976 20 is_stmt 0 view .LVU2133
 7560 00c2 0124     		movs	r4, #1
 7561              	.LVL554:
5024:os/tasks.c    **** 
 7562              		.loc 1 5024 21 view .LVU2134
 7563 00c4 18E0     		b	.L583
 7564              	.LVL555:
 7565              	.L578:
5028:os/tasks.c    ****                     {
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 266


 7566              		.loc 1 5028 21 is_stmt 1 view .LVU2135
5028:os/tasks.c    ****                     {
 7567              		.loc 1 5028 23 is_stmt 0 view .LVU2136
 7568 00c6 022A     		cmp	r2, #2
 7569 00c8 1DD0     		beq	.L593
5030:os/tasks.c    ****                     }
 7570              		.loc 1 5030 25 is_stmt 1 view .LVU2137
5030:os/tasks.c    ****                     }
 7571              		.loc 1 5030 67 is_stmt 0 view .LVU2138
 7572 00ca 04F11403 		add	r3, r4, #20
 7573 00ce 05EB8303 		add	r3, r5, r3, lsl #2
 7574 00d2 C3F80480 		str	r8, [r3, #4]
4976:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
 7575              		.loc 1 4976 20 view .LVU2139
 7576 00d6 0124     		movs	r4, #1
 7577              	.LVL556:
4976:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
 7578              		.loc 1 4976 20 view .LVU2140
 7579 00d8 0EE0     		b	.L583
 7580              	.LVL557:
 7581              	.L577:
5051:os/tasks.c    ****                     break;
 7582              		.loc 1 5051 21 is_stmt 1 view .LVU2141
 7583 00da 284B     		ldr	r3, .L598
 7584 00dc 1B68     		ldr	r3, [r3]
 7585 00de A3B1     		cbz	r3, .L594
5051:os/tasks.c    ****                     break;
 7586              		.loc 1 5051 21 view .LVU2142
 7587              	.LBB268:
 7588              	.LBI268:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7589              		.loc 2 193 34 view .LVU2143
 7590              	.LBB269:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7591              		.loc 2 195 9 view .LVU2144
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7592              		.loc 2 197 9 view .LVU2145
 7593              		.syntax unified
 7594              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7595 00e0 4FF05003 			mov r3, #80												
 7596 00e4 72B6     		cpsid i													
 7597 00e6 83F31188 		msr basepri, r3											
 7598 00ea BFF36F8F 		isb														
 7599 00ee BFF34F8F 		dsb														
 7600 00f2 62B6     		cpsie i													
 7601              	
 7602              	@ 0 "" 2
 7603              	.LVL558:
 7604              		.thumb
 7605              		.syntax unified
 7606              	.L584:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7607              		.loc 2 197 9 is_stmt 0 view .LVU2146
 7608              	.LBE269:
 7609              	.LBE268:
5051:os/tasks.c    ****                     break;
 7610              		.loc 1 5051 21 is_stmt 1 discriminator 3 view .LVU2147
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 267


5051:os/tasks.c    ****                     break;
 7611              		.loc 1 5051 21 discriminator 3 view .LVU2148
5051:os/tasks.c    ****                     break;
 7612              		.loc 1 5051 21 discriminator 3 view .LVU2149
 7613 00f4 FEE7     		b	.L584
 7614              	.L592:
5010:os/tasks.c    **** 
 7615              		.loc 1 5010 53 is_stmt 0 view .LVU2150
 7616 00f6 0124     		movs	r4, #1
 7617              	.LVL559:
 7618              	.L583:
5055:os/tasks.c    **** 
 7619              		.loc 1 5055 57 is_stmt 1 view .LVU2151
5059:os/tasks.c    ****             {
 7620              		.loc 1 5059 13 view .LVU2152
5059:os/tasks.c    ****             {
 7621              		.loc 1 5059 15 is_stmt 0 view .LVU2153
 7622 00f8 012A     		cmp	r2, #1
 7623 00fa 08D0     		beq	.L597
 7624              	.LVL560:
 7625              	.L585:
5092:os/tasks.c    ****                 }
 7626              		.loc 1 5092 45 is_stmt 1 view .LVU2154
5096:os/tasks.c    **** 
 7627              		.loc 1 5096 9 view .LVU2155
 7628              	.LBB270:
 7629              	.LBI270:
 233:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7630              		.loc 2 233 34 view .LVU2156
 7631              	.LBB271:
 7632              		.loc 2 235 9 view .LVU2157
 7633              		.syntax unified
 7634              	@ 235 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7635 00fc 87F31188 			msr basepri, r7	
 7636              	@ 0 "" 2
 7637              	.LVL561:
 7638              		.loc 2 235 9 is_stmt 0 view .LVU2158
 7639              		.thumb
 7640              		.syntax unified
 7641              	.LBE271:
 7642              	.LBE270:
5098:os/tasks.c    ****     }
 7643              		.loc 1 5098 9 is_stmt 1 view .LVU2159
5099:os/tasks.c    **** 
 7644              		.loc 1 5099 5 is_stmt 0 view .LVU2160
 7645 0100 2046     		mov	r0, r4
 7646 0102 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 7647              	.LVL562:
 7648              	.L593:
5035:os/tasks.c    ****                     }
 7649              		.loc 1 5035 33 view .LVU2161
 7650 0106 0024     		movs	r4, #0
 7651              	.LVL563:
5035:os/tasks.c    ****                     }
 7652              		.loc 1 5035 33 view .LVU2162
 7653 0108 F6E7     		b	.L583
 7654              	.LVL564:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 268


 7655              	.L594:
4976:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
 7656              		.loc 1 4976 20 view .LVU2163
 7657 010a 0124     		movs	r4, #1
 7658              	.LVL565:
4976:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
 7659              		.loc 1 4976 20 view .LVU2164
 7660 010c F4E7     		b	.L583
 7661              	.LVL566:
 7662              	.L597:
5062:os/tasks.c    **** 
 7663              		.loc 1 5062 17 is_stmt 1 view .LVU2165
 7664 010e AB6A     		ldr	r3, [r5, #40]
 7665 0110 53B1     		cbz	r3, .L586
5062:os/tasks.c    **** 
 7666              		.loc 1 5062 17 view .LVU2166
 7667              	.LBB272:
 7668              	.LBI272:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7669              		.loc 2 193 34 view .LVU2167
 7670              	.LBB273:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7671              		.loc 2 195 9 view .LVU2168
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7672              		.loc 2 197 9 view .LVU2169
 7673              		.syntax unified
 7674              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7675 0112 4FF05003 			mov r3, #80												
 7676 0116 72B6     		cpsid i													
 7677 0118 83F31188 		msr basepri, r3											
 7678 011c BFF36F8F 		isb														
 7679 0120 BFF34F8F 		dsb														
 7680 0124 62B6     		cpsie i													
 7681              	
 7682              	@ 0 "" 2
 7683              	.LVL567:
 7684              		.thumb
 7685              		.syntax unified
 7686              	.L587:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7687              		.loc 2 197 9 is_stmt 0 view .LVU2170
 7688              	.LBE273:
 7689              	.LBE272:
5062:os/tasks.c    **** 
 7690              		.loc 1 5062 17 is_stmt 1 discriminator 4 view .LVU2171
5062:os/tasks.c    **** 
 7691              		.loc 1 5062 17 discriminator 4 view .LVU2172
5062:os/tasks.c    **** 
 7692              		.loc 1 5062 17 discriminator 4 view .LVU2173
 7693 0126 FEE7     		b	.L587
 7694              	.L586:
5062:os/tasks.c    **** 
 7695              		.loc 1 5062 94 discriminator 2 view .LVU2174
5064:os/tasks.c    ****                 {
 7696              		.loc 1 5064 17 discriminator 2 view .LVU2175
5064:os/tasks.c    ****                 {
 7697              		.loc 1 5064 42 is_stmt 0 discriminator 2 view .LVU2176
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 269


 7698 0128 154B     		ldr	r3, .L598+4
 7699 012a 1B68     		ldr	r3, [r3]
5064:os/tasks.c    ****                 {
 7700              		.loc 1 5064 19 discriminator 2 view .LVU2177
 7701 012c 03BB     		cbnz	r3, .L588
5066:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 7702              		.loc 1 5066 21 is_stmt 1 view .LVU2178
5066:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 7703              		.loc 1 5066 30 is_stmt 0 view .LVU2179
 7704 012e 05F10408 		add	r8, r5, #4
 7705              	.LVL568:
5066:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 7706              		.loc 1 5066 30 view .LVU2180
 7707 0132 4046     		mov	r0, r8
 7708 0134 FFF7FEFF 		bl	uxListRemove
 7709              	.LVL569:
5067:os/tasks.c    ****                 }
 7710              		.loc 1 5067 21 is_stmt 1 view .LVU2181
5067:os/tasks.c    ****                 }
 7711              		.loc 1 5067 21 view .LVU2182
 7712 0138 E86A     		ldr	r0, [r5, #44]
 7713 013a 124B     		ldr	r3, .L598+8
 7714 013c 1B68     		ldr	r3, [r3]
 7715 013e 9842     		cmp	r0, r3
 7716 0140 01D9     		bls	.L589
5067:os/tasks.c    ****                 }
 7717              		.loc 1 5067 21 discriminator 1 view .LVU2183
 7718 0142 104B     		ldr	r3, .L598+8
 7719 0144 1860     		str	r0, [r3]
 7720              	.L589:
5067:os/tasks.c    ****                 }
 7721              		.loc 1 5067 21 discriminator 3 view .LVU2184
5067:os/tasks.c    ****                 }
 7722              		.loc 1 5067 21 discriminator 3 view .LVU2185
 7723 0146 00EB8000 		add	r0, r0, r0, lsl #2
 7724 014a 4146     		mov	r1, r8
 7725 014c 0E4B     		ldr	r3, .L598+12
 7726 014e 03EB8000 		add	r0, r3, r0, lsl #2
 7727 0152 FFF7FEFF 		bl	vListInsertEnd
 7728              	.LVL570:
5067:os/tasks.c    ****                 }
 7729              		.loc 1 5067 51 discriminator 3 view .LVU2186
 7730              	.L590:
5076:os/tasks.c    ****                 {
 7731              		.loc 1 5076 17 view .LVU2187
5076:os/tasks.c    ****                 {
 7732              		.loc 1 5076 26 is_stmt 0 view .LVU2188
 7733 0156 EA6A     		ldr	r2, [r5, #44]
5076:os/tasks.c    ****                 {
 7734              		.loc 1 5076 53 view .LVU2189
 7735 0158 0C4B     		ldr	r3, .L598+16
 7736 015a 1B68     		ldr	r3, [r3]
 7737 015c DB6A     		ldr	r3, [r3, #44]
5076:os/tasks.c    ****                 {
 7738              		.loc 1 5076 19 view .LVU2190
 7739 015e 9A42     		cmp	r2, r3
 7740 0160 CCD9     		bls	.L585
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 270


5080:os/tasks.c    ****                     {
 7741              		.loc 1 5080 21 is_stmt 1 view .LVU2191
5080:os/tasks.c    ****                     {
 7742              		.loc 1 5080 23 is_stmt 0 view .LVU2192
 7743 0162 0EB1     		cbz	r6, .L591
5082:os/tasks.c    ****                     }
 7744              		.loc 1 5082 25 is_stmt 1 view .LVU2193
5082:os/tasks.c    ****                     }
 7745              		.loc 1 5082 52 is_stmt 0 view .LVU2194
 7746 0164 0123     		movs	r3, #1
 7747 0166 3360     		str	r3, [r6]
 7748              	.L591:
5088:os/tasks.c    ****                 }
 7749              		.loc 1 5088 21 is_stmt 1 view .LVU2195
5088:os/tasks.c    ****                 }
 7750              		.loc 1 5088 35 is_stmt 0 view .LVU2196
 7751 0168 094B     		ldr	r3, .L598+20
 7752 016a 0122     		movs	r2, #1
 7753 016c 1A60     		str	r2, [r3]
 7754 016e C5E7     		b	.L585
 7755              	.LVL571:
 7756              	.L588:
5073:os/tasks.c    ****                 }
 7757              		.loc 1 5073 21 is_stmt 1 view .LVU2197
 7758 0170 05F11801 		add	r1, r5, #24
 7759 0174 0748     		ldr	r0, .L598+24
 7760 0176 FFF7FEFF 		bl	vListInsertEnd
 7761              	.LVL572:
5073:os/tasks.c    ****                 }
 7762              		.loc 1 5073 21 is_stmt 0 view .LVU2198
 7763 017a ECE7     		b	.L590
 7764              	.L599:
 7765              		.align	2
 7766              	.L598:
 7767 017c 00000000 		.word	.LANCHOR15
 7768 0180 00000000 		.word	.LANCHOR16
 7769 0184 00000000 		.word	.LANCHOR13
 7770 0188 00000000 		.word	.LANCHOR4
 7771 018c 00000000 		.word	.LANCHOR10
 7772 0190 00000000 		.word	.LANCHOR17
 7773 0194 00000000 		.word	.LANCHOR1
 7774              		.cfi_endproc
 7775              	.LFE61:
 7777              		.section	.text.vTaskGenericNotifyGiveFromISR,"ax",%progbits
 7778              		.align	1
 7779              		.global	vTaskGenericNotifyGiveFromISR
 7780              		.syntax unified
 7781              		.thumb
 7782              		.thumb_func
 7783              		.fpu fpv5-d16
 7785              	vTaskGenericNotifyGiveFromISR:
 7786              	.LVL573:
 7787              	.LFB62:
5109:os/tasks.c    ****         TCB_t * pxTCB;
 7788              		.loc 1 5109 5 is_stmt 1 view -0
 7789              		.cfi_startproc
 7790              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 271


 7791              		@ frame_needed = 0, uses_anonymous_args = 0
5109:os/tasks.c    ****         TCB_t * pxTCB;
 7792              		.loc 1 5109 5 is_stmt 0 view .LVU2200
 7793 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 7794              	.LCFI62:
 7795              		.cfi_def_cfa_offset 24
 7796              		.cfi_offset 3, -24
 7797              		.cfi_offset 4, -20
 7798              		.cfi_offset 5, -16
 7799              		.cfi_offset 6, -12
 7800              		.cfi_offset 7, -8
 7801              		.cfi_offset 14, -4
5110:os/tasks.c    ****         uint8_t ucOriginalNotifyState;
 7802              		.loc 1 5110 9 is_stmt 1 view .LVU2201
5111:os/tasks.c    ****         UBaseType_t uxSavedInterruptStatus;
 7803              		.loc 1 5111 9 view .LVU2202
5112:os/tasks.c    **** 
 7804              		.loc 1 5112 9 view .LVU2203
5114:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7805              		.loc 1 5114 9 view .LVU2204
 7806 0002 70B1     		cbz	r0, .L613
 7807 0004 0C46     		mov	r4, r1
 7808 0006 1646     		mov	r6, r2
 7809 0008 0546     		mov	r5, r0
5114:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7810              		.loc 1 5114 38 discriminator 2 view .LVU2205
5115:os/tasks.c    **** 
 7811              		.loc 1 5115 9 discriminator 2 view .LVU2206
 7812 000a A9B1     		cbz	r1, .L603
5115:os/tasks.c    **** 
 7813              		.loc 1 5115 9 view .LVU2207
 7814              	.LBB274:
 7815              	.LBI274:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7816              		.loc 2 193 34 view .LVU2208
 7817              	.LBB275:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7818              		.loc 2 195 9 view .LVU2209
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7819              		.loc 2 197 9 view .LVU2210
 7820              		.syntax unified
 7821              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7822 000c 4FF05003 			mov r3, #80												
 7823 0010 72B6     		cpsid i													
 7824 0012 83F31188 		msr basepri, r3											
 7825 0016 BFF36F8F 		isb														
 7826 001a BFF34F8F 		dsb														
 7827 001e 62B6     		cpsie i													
 7828              	
 7829              	@ 0 "" 2
 7830              	.LVL574:
 7831              		.thumb
 7832              		.syntax unified
 7833              	.L604:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7834              		.loc 2 197 9 is_stmt 0 view .LVU2211
 7835              	.LBE275:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 272


 7836              	.LBE274:
5115:os/tasks.c    **** 
 7837              		.loc 1 5115 9 is_stmt 1 discriminator 2 view .LVU2212
5115:os/tasks.c    **** 
 7838              		.loc 1 5115 9 discriminator 2 view .LVU2213
5115:os/tasks.c    **** 
 7839              		.loc 1 5115 9 discriminator 2 view .LVU2214
 7840 0020 FEE7     		b	.L604
 7841              	.L613:
5114:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7842              		.loc 1 5114 9 view .LVU2215
 7843              	.LBB276:
 7844              	.LBI276:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7845              		.loc 2 193 34 view .LVU2216
 7846              	.LBB277:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7847              		.loc 2 195 9 view .LVU2217
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7848              		.loc 2 197 9 view .LVU2218
 7849              		.syntax unified
 7850              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7851 0022 4FF05003 			mov r3, #80												
 7852 0026 72B6     		cpsid i													
 7853 0028 83F31188 		msr basepri, r3											
 7854 002c BFF36F8F 		isb														
 7855 0030 BFF34F8F 		dsb														
 7856 0034 62B6     		cpsie i													
 7857              	
 7858              	@ 0 "" 2
 7859              	.LVL575:
 7860              		.thumb
 7861              		.syntax unified
 7862              	.L602:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7863              		.loc 2 197 9 is_stmt 0 view .LVU2219
 7864              	.LBE277:
 7865              	.LBE276:
5114:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7866              		.loc 1 5114 9 is_stmt 1 discriminator 1 view .LVU2220
5114:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7867              		.loc 1 5114 9 discriminator 1 view .LVU2221
5114:os/tasks.c    ****         configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 7868              		.loc 1 5114 9 discriminator 1 view .LVU2222
 7869 0036 FEE7     		b	.L602
 7870              	.L603:
5115:os/tasks.c    **** 
 7871              		.loc 1 5115 80 discriminator 2 view .LVU2223
5133:os/tasks.c    **** 
 7872              		.loc 1 5133 9 discriminator 2 view .LVU2224
 7873 0038 FFF7FEFF 		bl	vPortValidateInterruptPriority
 7874              	.LVL576:
5135:os/tasks.c    **** 
 7875              		.loc 1 5135 9 discriminator 2 view .LVU2225
5137:os/tasks.c    ****         {
 7876              		.loc 1 5137 9 discriminator 2 view .LVU2226
 7877              	.LBB278:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 273


 7878              	.LBI278:
 211:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7879              		.loc 2 211 38 discriminator 2 view .LVU2227
 7880              	.LBB279:
 213:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7881              		.loc 2 213 9 discriminator 2 view .LVU2228
 215:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7882              		.loc 2 215 9 discriminator 2 view .LVU2229
 7883              		.syntax unified
 7884              	@ 215 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7885 003c EFF31187 			mrs r7, basepri											
 7886 0040 4FF05003 		mov r3, #80												
 7887 0044 72B6     		cpsid i													
 7888 0046 83F31188 		msr basepri, r3											
 7889 004a BFF36F8F 		isb														
 7890 004e BFF34F8F 		dsb														
 7891 0052 62B6     		cpsie i													
 7892              	
 7893              	@ 0 "" 2
 7894              	.LVL577:
 229:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 7895              		.loc 2 229 9 discriminator 2 view .LVU2230
 229:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     }
 7896              		.loc 2 229 9 is_stmt 0 discriminator 2 view .LVU2231
 7897              		.thumb
 7898              		.syntax unified
 7899              	.LBE279:
 7900              	.LBE278:
5139:os/tasks.c    ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7901              		.loc 1 5139 13 is_stmt 1 discriminator 2 view .LVU2232
5139:os/tasks.c    ****             pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 7902              		.loc 1 5139 35 is_stmt 0 discriminator 2 view .LVU2233
 7903 0054 2B19     		adds	r3, r5, r4
 7904 0056 93F85820 		ldrb	r2, [r3, #88]	@ zero_extendqisi2
 7905 005a D2B2     		uxtb	r2, r2
 7906              	.LVL578:
5140:os/tasks.c    **** 
 7907              		.loc 1 5140 13 is_stmt 1 discriminator 2 view .LVU2234
5140:os/tasks.c    **** 
 7908              		.loc 1 5140 53 is_stmt 0 discriminator 2 view .LVU2235
 7909 005c 0221     		movs	r1, #2
 7910 005e 83F85810 		strb	r1, [r3, #88]
5144:os/tasks.c    **** 
 7911              		.loc 1 5144 13 is_stmt 1 discriminator 2 view .LVU2236
5144:os/tasks.c    **** 
 7912              		.loc 1 5144 37 is_stmt 0 discriminator 2 view .LVU2237
 7913 0062 04F11403 		add	r3, r4, #20
 7914 0066 05EB8303 		add	r3, r5, r3, lsl #2
 7915 006a 5968     		ldr	r1, [r3, #4]
5144:os/tasks.c    **** 
 7916              		.loc 1 5144 58 discriminator 2 view .LVU2238
 7917 006c 0131     		adds	r1, r1, #1
 7918 006e 5960     		str	r1, [r3, #4]
5146:os/tasks.c    **** 
 7919              		.loc 1 5146 62 is_stmt 1 discriminator 2 view .LVU2239
5150:os/tasks.c    ****             {
 7920              		.loc 1 5150 13 discriminator 2 view .LVU2240
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 274


5150:os/tasks.c    ****             {
 7921              		.loc 1 5150 15 is_stmt 0 discriminator 2 view .LVU2241
 7922 0070 012A     		cmp	r2, #1
 7923 0072 02D0     		beq	.L614
 7924              	.LVL579:
 7925              	.L605:
5183:os/tasks.c    ****                 }
 7926              		.loc 1 5183 45 is_stmt 1 view .LVU2242
5187:os/tasks.c    ****     }
 7927              		.loc 1 5187 9 view .LVU2243
 7928              	.LBB280:
 7929              	.LBI280:
 233:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7930              		.loc 2 233 34 view .LVU2244
 7931              	.LBB281:
 7932              		.loc 2 235 9 view .LVU2245
 7933              		.syntax unified
 7934              	@ 235 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7935 0074 87F31188 			msr basepri, r7	
 7936              	@ 0 "" 2
 7937              	.LVL580:
 7938              		.loc 2 235 9 is_stmt 0 view .LVU2246
 7939              		.thumb
 7940              		.syntax unified
 7941              	.LBE281:
 7942              	.LBE280:
5188:os/tasks.c    **** 
 7943              		.loc 1 5188 5 view .LVU2247
 7944 0078 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 7945              	.LVL581:
 7946              	.L614:
5153:os/tasks.c    **** 
 7947              		.loc 1 5153 17 is_stmt 1 view .LVU2248
 7948 007a AB6A     		ldr	r3, [r5, #40]
 7949 007c 53B1     		cbz	r3, .L606
5153:os/tasks.c    **** 
 7950              		.loc 1 5153 17 view .LVU2249
 7951              	.LBB282:
 7952              	.LBI282:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 7953              		.loc 2 193 34 view .LVU2250
 7954              	.LBB283:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 7955              		.loc 2 195 9 view .LVU2251
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7956              		.loc 2 197 9 view .LVU2252
 7957              		.syntax unified
 7958              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 7959 007e 4FF05003 			mov r3, #80												
 7960 0082 72B6     		cpsid i													
 7961 0084 83F31188 		msr basepri, r3											
 7962 0088 BFF36F8F 		isb														
 7963 008c BFF34F8F 		dsb														
 7964 0090 62B6     		cpsie i													
 7965              	
 7966              	@ 0 "" 2
 7967              	.LVL582:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 275


 7968              		.thumb
 7969              		.syntax unified
 7970              	.L607:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 7971              		.loc 2 197 9 is_stmt 0 view .LVU2253
 7972              	.LBE283:
 7973              	.LBE282:
5153:os/tasks.c    **** 
 7974              		.loc 1 5153 17 is_stmt 1 discriminator 3 view .LVU2254
5153:os/tasks.c    **** 
 7975              		.loc 1 5153 17 discriminator 3 view .LVU2255
5153:os/tasks.c    **** 
 7976              		.loc 1 5153 17 discriminator 3 view .LVU2256
 7977 0092 FEE7     		b	.L607
 7978              	.L606:
5153:os/tasks.c    **** 
 7979              		.loc 1 5153 94 discriminator 2 view .LVU2257
5155:os/tasks.c    ****                 {
 7980              		.loc 1 5155 17 discriminator 2 view .LVU2258
5155:os/tasks.c    ****                 {
 7981              		.loc 1 5155 42 is_stmt 0 discriminator 2 view .LVU2259
 7982 0094 144B     		ldr	r3, .L615
 7983 0096 1B68     		ldr	r3, [r3]
5155:os/tasks.c    ****                 {
 7984              		.loc 1 5155 19 discriminator 2 view .LVU2260
 7985 0098 FBB9     		cbnz	r3, .L608
5157:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 7986              		.loc 1 5157 21 is_stmt 1 view .LVU2261
5157:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 7987              		.loc 1 5157 30 is_stmt 0 view .LVU2262
 7988 009a 2C1D     		adds	r4, r5, #4
 7989              	.LVL583:
5157:os/tasks.c    ****                     prvAddTaskToReadyList( pxTCB );
 7990              		.loc 1 5157 30 view .LVU2263
 7991 009c 2046     		mov	r0, r4
 7992 009e FFF7FEFF 		bl	uxListRemove
 7993              	.LVL584:
5158:os/tasks.c    ****                 }
 7994              		.loc 1 5158 21 is_stmt 1 view .LVU2264
5158:os/tasks.c    ****                 }
 7995              		.loc 1 5158 21 view .LVU2265
 7996 00a2 E86A     		ldr	r0, [r5, #44]
 7997 00a4 114B     		ldr	r3, .L615+4
 7998 00a6 1B68     		ldr	r3, [r3]
 7999 00a8 9842     		cmp	r0, r3
 8000 00aa 01D9     		bls	.L609
5158:os/tasks.c    ****                 }
 8001              		.loc 1 5158 21 discriminator 1 view .LVU2266
 8002 00ac 0F4B     		ldr	r3, .L615+4
 8003 00ae 1860     		str	r0, [r3]
 8004              	.L609:
5158:os/tasks.c    ****                 }
 8005              		.loc 1 5158 21 discriminator 3 view .LVU2267
5158:os/tasks.c    ****                 }
 8006              		.loc 1 5158 21 discriminator 3 view .LVU2268
 8007 00b0 00EB8000 		add	r0, r0, r0, lsl #2
 8008 00b4 2146     		mov	r1, r4
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 276


 8009 00b6 0E4B     		ldr	r3, .L615+8
 8010 00b8 03EB8000 		add	r0, r3, r0, lsl #2
 8011 00bc FFF7FEFF 		bl	vListInsertEnd
 8012              	.LVL585:
5158:os/tasks.c    ****                 }
 8013              		.loc 1 5158 51 discriminator 3 view .LVU2269
 8014              	.L610:
5167:os/tasks.c    ****                 {
 8015              		.loc 1 5167 17 view .LVU2270
5167:os/tasks.c    ****                 {
 8016              		.loc 1 5167 26 is_stmt 0 view .LVU2271
 8017 00c0 EA6A     		ldr	r2, [r5, #44]
5167:os/tasks.c    ****                 {
 8018              		.loc 1 5167 53 view .LVU2272
 8019 00c2 0C4B     		ldr	r3, .L615+12
 8020 00c4 1B68     		ldr	r3, [r3]
 8021 00c6 DB6A     		ldr	r3, [r3, #44]
5167:os/tasks.c    ****                 {
 8022              		.loc 1 5167 19 view .LVU2273
 8023 00c8 9A42     		cmp	r2, r3
 8024 00ca D3D9     		bls	.L605
5171:os/tasks.c    ****                     {
 8025              		.loc 1 5171 21 is_stmt 1 view .LVU2274
5171:os/tasks.c    ****                     {
 8026              		.loc 1 5171 23 is_stmt 0 view .LVU2275
 8027 00cc 0EB1     		cbz	r6, .L611
5173:os/tasks.c    ****                     }
 8028              		.loc 1 5173 25 is_stmt 1 view .LVU2276
5173:os/tasks.c    ****                     }
 8029              		.loc 1 5173 52 is_stmt 0 view .LVU2277
 8030 00ce 0123     		movs	r3, #1
 8031 00d0 3360     		str	r3, [r6]
 8032              	.L611:
5179:os/tasks.c    ****                 }
 8033              		.loc 1 5179 21 is_stmt 1 view .LVU2278
5179:os/tasks.c    ****                 }
 8034              		.loc 1 5179 35 is_stmt 0 view .LVU2279
 8035 00d2 094B     		ldr	r3, .L615+16
 8036 00d4 0122     		movs	r2, #1
 8037 00d6 1A60     		str	r2, [r3]
 8038 00d8 CCE7     		b	.L605
 8039              	.LVL586:
 8040              	.L608:
5164:os/tasks.c    ****                 }
 8041              		.loc 1 5164 21 is_stmt 1 view .LVU2280
 8042 00da 05F11801 		add	r1, r5, #24
 8043 00de 0748     		ldr	r0, .L615+20
 8044 00e0 FFF7FEFF 		bl	vListInsertEnd
 8045              	.LVL587:
5164:os/tasks.c    ****                 }
 8046              		.loc 1 5164 21 is_stmt 0 view .LVU2281
 8047 00e4 ECE7     		b	.L610
 8048              	.L616:
 8049 00e6 00BF     		.align	2
 8050              	.L615:
 8051 00e8 00000000 		.word	.LANCHOR16
 8052 00ec 00000000 		.word	.LANCHOR13
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 277


 8053 00f0 00000000 		.word	.LANCHOR4
 8054 00f4 00000000 		.word	.LANCHOR10
 8055 00f8 00000000 		.word	.LANCHOR17
 8056 00fc 00000000 		.word	.LANCHOR1
 8057              		.cfi_endproc
 8058              	.LFE62:
 8060              		.section	.text.xTaskGenericNotifyStateClear,"ax",%progbits
 8061              		.align	1
 8062              		.global	xTaskGenericNotifyStateClear
 8063              		.syntax unified
 8064              		.thumb
 8065              		.thumb_func
 8066              		.fpu fpv5-d16
 8068              	xTaskGenericNotifyStateClear:
 8069              	.LVL588:
 8070              	.LFB63:
5197:os/tasks.c    ****         TCB_t * pxTCB;
 8071              		.loc 1 5197 5 is_stmt 1 view -0
 8072              		.cfi_startproc
 8073              		@ args = 0, pretend = 0, frame = 0
 8074              		@ frame_needed = 0, uses_anonymous_args = 0
5197:os/tasks.c    ****         TCB_t * pxTCB;
 8075              		.loc 1 5197 5 is_stmt 0 view .LVU2283
 8076 0000 38B5     		push	{r3, r4, r5, lr}
 8077              	.LCFI63:
 8078              		.cfi_def_cfa_offset 16
 8079              		.cfi_offset 3, -16
 8080              		.cfi_offset 4, -12
 8081              		.cfi_offset 5, -8
 8082              		.cfi_offset 14, -4
5198:os/tasks.c    ****         BaseType_t xReturn;
 8083              		.loc 1 5198 9 is_stmt 1 view .LVU2284
5199:os/tasks.c    **** 
 8084              		.loc 1 5199 9 view .LVU2285
5201:os/tasks.c    **** 
 8085              		.loc 1 5201 9 view .LVU2286
 8086 0002 51B1     		cbz	r1, .L618
5201:os/tasks.c    **** 
 8087              		.loc 1 5201 9 view .LVU2287
 8088              	.LBB284:
 8089              	.LBI284:
 193:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****     {
 8090              		.loc 2 193 34 view .LVU2288
 8091              	.LBB285:
 195:os/portable/GCC/ARM_CM7/r0p1/portmacro.h **** 
 8092              		.loc 2 195 9 view .LVU2289
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 8093              		.loc 2 197 9 view .LVU2290
 8094              		.syntax unified
 8095              	@ 197 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h" 1
 8096 0004 4FF05003 			mov r3, #80												
 8097 0008 72B6     		cpsid i													
 8098 000a 83F31188 		msr basepri, r3											
 8099 000e BFF36F8F 		isb														
 8100 0012 BFF34F8F 		dsb														
 8101 0016 62B6     		cpsie i													
 8102              	
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 278


 8103              	@ 0 "" 2
 8104              	.LVL589:
 8105              		.thumb
 8106              		.syntax unified
 8107              	.L619:
 197:os/portable/GCC/ARM_CM7/r0p1/portmacro.h ****         (
 8108              		.loc 2 197 9 is_stmt 0 view .LVU2291
 8109              	.LBE285:
 8110              	.LBE284:
5201:os/tasks.c    **** 
 8111              		.loc 1 5201 9 is_stmt 1 discriminator 1 view .LVU2292
5201:os/tasks.c    **** 
 8112              		.loc 1 5201 9 discriminator 1 view .LVU2293
5201:os/tasks.c    **** 
 8113              		.loc 1 5201 9 discriminator 1 view .LVU2294
 8114 0018 FEE7     		b	.L619
 8115              	.L618:
 8116 001a 0446     		mov	r4, r0
 8117 001c 0D46     		mov	r5, r1
5201:os/tasks.c    **** 
 8118              		.loc 1 5201 79 discriminator 2 view .LVU2295
5205:os/tasks.c    **** 
 8119              		.loc 1 5205 9 discriminator 2 view .LVU2296
5205:os/tasks.c    **** 
 8120              		.loc 1 5205 17 is_stmt 0 discriminator 2 view .LVU2297
 8121 001e 60B1     		cbz	r0, .L624
 8122              	.LVL590:
 8123              	.L620:
5207:os/tasks.c    ****         {
 8124              		.loc 1 5207 9 is_stmt 1 discriminator 4 view .LVU2298
 8125 0020 FFF7FEFF 		bl	vPortEnterCritical
 8126              	.LVL591:
5209:os/tasks.c    ****             {
 8127              		.loc 1 5209 13 discriminator 4 view .LVU2299
5209:os/tasks.c    ****             {
 8128              		.loc 1 5209 37 is_stmt 0 discriminator 4 view .LVU2300
 8129 0024 6319     		adds	r3, r4, r5
 8130 0026 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 8131 002a DBB2     		uxtb	r3, r3
5209:os/tasks.c    ****             {
 8132              		.loc 1 5209 15 discriminator 4 view .LVU2301
 8133 002c 022B     		cmp	r3, #2
 8134 002e 07D0     		beq	.L625
5216:os/tasks.c    ****             }
 8135              		.loc 1 5216 25 view .LVU2302
 8136 0030 0024     		movs	r4, #0
 8137              	.LVL592:
 8138              	.L621:
5219:os/tasks.c    **** 
 8139              		.loc 1 5219 9 is_stmt 1 view .LVU2303
 8140 0032 FFF7FEFF 		bl	vPortExitCritical
 8141              	.LVL593:
5221:os/tasks.c    ****     }
 8142              		.loc 1 5221 9 view .LVU2304
5222:os/tasks.c    **** 
 8143              		.loc 1 5222 5 is_stmt 0 view .LVU2305
 8144 0036 2046     		mov	r0, r4
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 279


 8145 0038 38BD     		pop	{r3, r4, r5, pc}
 8146              	.LVL594:
 8147              	.L624:
5205:os/tasks.c    **** 
 8148              		.loc 1 5205 17 discriminator 1 view .LVU2306
 8149 003a 044B     		ldr	r3, .L626
 8150 003c 1C68     		ldr	r4, [r3]
 8151              	.LVL595:
5205:os/tasks.c    **** 
 8152              		.loc 1 5205 17 discriminator 1 view .LVU2307
 8153 003e EFE7     		b	.L620
 8154              	.LVL596:
 8155              	.L625:
5211:os/tasks.c    ****                 xReturn = pdPASS;
 8156              		.loc 1 5211 17 is_stmt 1 view .LVU2308
5211:os/tasks.c    ****                 xReturn = pdPASS;
 8157              		.loc 1 5211 56 is_stmt 0 view .LVU2309
 8158 0040 2C44     		add	r4, r4, r5
 8159              	.LVL597:
5211:os/tasks.c    ****                 xReturn = pdPASS;
 8160              		.loc 1 5211 56 view .LVU2310
 8161 0042 0023     		movs	r3, #0
 8162 0044 84F85830 		strb	r3, [r4, #88]
5212:os/tasks.c    ****             }
 8163              		.loc 1 5212 17 is_stmt 1 view .LVU2311
 8164              	.LVL598:
5212:os/tasks.c    ****             }
 8165              		.loc 1 5212 25 is_stmt 0 view .LVU2312
 8166 0048 0124     		movs	r4, #1
 8167 004a F2E7     		b	.L621
 8168              	.L627:
 8169              		.align	2
 8170              	.L626:
 8171 004c 00000000 		.word	.LANCHOR10
 8172              		.cfi_endproc
 8173              	.LFE63:
 8175              		.section	.text.ulTaskGenericNotifyValueClear,"ax",%progbits
 8176              		.align	1
 8177              		.global	ulTaskGenericNotifyValueClear
 8178              		.syntax unified
 8179              		.thumb
 8180              		.thumb_func
 8181              		.fpu fpv5-d16
 8183              	ulTaskGenericNotifyValueClear:
 8184              	.LVL599:
 8185              	.LFB64:
5232:os/tasks.c    ****         TCB_t * pxTCB;
 8186              		.loc 1 5232 5 is_stmt 1 view -0
 8187              		.cfi_startproc
 8188              		@ args = 0, pretend = 0, frame = 0
 8189              		@ frame_needed = 0, uses_anonymous_args = 0
5232:os/tasks.c    ****         TCB_t * pxTCB;
 8190              		.loc 1 5232 5 is_stmt 0 view .LVU2314
 8191 0000 70B5     		push	{r4, r5, r6, lr}
 8192              	.LCFI64:
 8193              		.cfi_def_cfa_offset 16
 8194              		.cfi_offset 4, -16
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 280


 8195              		.cfi_offset 5, -12
 8196              		.cfi_offset 6, -8
 8197              		.cfi_offset 14, -4
 8198 0002 0D46     		mov	r5, r1
 8199 0004 1646     		mov	r6, r2
5233:os/tasks.c    ****         uint32_t ulReturn;
 8200              		.loc 1 5233 9 is_stmt 1 view .LVU2315
5234:os/tasks.c    **** 
 8201              		.loc 1 5234 9 view .LVU2316
5238:os/tasks.c    **** 
 8202              		.loc 1 5238 9 view .LVU2317
5238:os/tasks.c    **** 
 8203              		.loc 1 5238 17 is_stmt 0 view .LVU2318
 8204 0006 0446     		mov	r4, r0
 8205 0008 70B1     		cbz	r0, .L631
 8206              	.LVL600:
 8207              	.L629:
5240:os/tasks.c    ****         {
 8208              		.loc 1 5240 9 is_stmt 1 discriminator 4 view .LVU2319
 8209 000a FFF7FEFF 		bl	vPortEnterCritical
 8210              	.LVL601:
5244:os/tasks.c    ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8211              		.loc 1 5244 13 discriminator 4 view .LVU2320
5244:os/tasks.c    ****             pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8212              		.loc 1 5244 22 is_stmt 0 discriminator 4 view .LVU2321
 8213 000e 05F11401 		add	r1, r5, #20
 8214 0012 04EB8101 		add	r1, r4, r1, lsl #2
 8215 0016 4C68     		ldr	r4, [r1, #4]
 8216              	.LVL602:
5245:os/tasks.c    ****         }
 8217              		.loc 1 5245 13 is_stmt 1 discriminator 4 view .LVU2322
5245:os/tasks.c    ****         }
 8218              		.loc 1 5245 54 is_stmt 0 discriminator 4 view .LVU2323
 8219 0018 4B68     		ldr	r3, [r1, #4]
 8220 001a 23EA0603 		bic	r3, r3, r6
 8221 001e 4B60     		str	r3, [r1, #4]
5247:os/tasks.c    **** 
 8222              		.loc 1 5247 9 is_stmt 1 discriminator 4 view .LVU2324
 8223 0020 FFF7FEFF 		bl	vPortExitCritical
 8224              	.LVL603:
5249:os/tasks.c    ****     }
 8225              		.loc 1 5249 9 discriminator 4 view .LVU2325
5250:os/tasks.c    **** 
 8226              		.loc 1 5250 5 is_stmt 0 discriminator 4 view .LVU2326
 8227 0024 2046     		mov	r0, r4
 8228 0026 70BD     		pop	{r4, r5, r6, pc}
 8229              	.LVL604:
 8230              	.L631:
5238:os/tasks.c    **** 
 8231              		.loc 1 5238 17 discriminator 1 view .LVU2327
 8232 0028 014B     		ldr	r3, .L632
 8233 002a 1C68     		ldr	r4, [r3]
 8234              	.LVL605:
5238:os/tasks.c    **** 
 8235              		.loc 1 5238 17 discriminator 1 view .LVU2328
 8236 002c EDE7     		b	.L629
 8237              	.L633:
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 281


 8238 002e 00BF     		.align	2
 8239              	.L632:
 8240 0030 00000000 		.word	.LANCHOR10
 8241              		.cfi_endproc
 8242              	.LFE64:
 8244              		.global	uxTopUsedPriority
 8245              		.global	pxCurrentTCB
 8246              		.section	.bss.pxCurrentTCB,"aw",%nobits
 8247              		.align	2
 8248              		.set	.LANCHOR10,. + 0
 8251              	pxCurrentTCB:
 8252 0000 00000000 		.space	4
 8253              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 8254              		.align	2
 8255              		.set	.LANCHOR2,. + 0
 8258              	pxDelayedTaskList:
 8259 0000 00000000 		.space	4
 8260              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 8261              		.align	2
 8262              		.set	.LANCHOR8,. + 0
 8265              	pxOverflowDelayedTaskList:
 8266 0000 00000000 		.space	4
 8267              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 8268              		.align	2
 8269              		.set	.LANCHOR4,. + 0
 8272              	pxReadyTasksLists:
 8273 0000 00000000 		.space	80
 8273      00000000 
 8273      00000000 
 8273      00000000 
 8273      00000000 
 8274              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 8275              		.align	2
 8276              		.set	.LANCHOR9,. + 0
 8279              	uxCurrentNumberOfTasks:
 8280 0000 00000000 		.space	4
 8281              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 8282              		.align	2
 8283              		.set	.LANCHOR14,. + 0
 8286              	uxDeletedTasksWaitingCleanUp:
 8287 0000 00000000 		.space	4
 8288              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 8289              		.align	2
 8290              		.set	.LANCHOR16,. + 0
 8293              	uxSchedulerSuspended:
 8294 0000 00000000 		.space	4
 8295              		.section	.bss.uxTaskNumber,"aw",%nobits
 8296              		.align	2
 8297              		.set	.LANCHOR12,. + 0
 8300              	uxTaskNumber:
 8301 0000 00000000 		.space	4
 8302              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 8303              		.align	2
 8304              		.set	.LANCHOR13,. + 0
 8307              	uxTopReadyPriority:
 8308 0000 00000000 		.space	4
 8309              		.section	.bss.xDelayedTaskList1,"aw",%nobits
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 282


 8310              		.align	2
 8311              		.set	.LANCHOR5,. + 0
 8314              	xDelayedTaskList1:
 8315 0000 00000000 		.space	20
 8315      00000000 
 8315      00000000 
 8315      00000000 
 8315      00000000 
 8316              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 8317              		.align	2
 8318              		.set	.LANCHOR6,. + 0
 8321              	xDelayedTaskList2:
 8322 0000 00000000 		.space	20
 8322      00000000 
 8322      00000000 
 8322      00000000 
 8322      00000000 
 8323              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 8324              		.align	2
 8325              		.set	.LANCHOR3,. + 0
 8328              	xNextTaskUnblockTime:
 8329 0000 00000000 		.space	4
 8330              		.section	.bss.xNumOfOverflows,"aw",%nobits
 8331              		.align	2
 8332              		.set	.LANCHOR19,. + 0
 8335              	xNumOfOverflows:
 8336 0000 00000000 		.space	4
 8337              		.section	.bss.xPendedTicks,"aw",%nobits
 8338              		.align	2
 8339              		.set	.LANCHOR20,. + 0
 8342              	xPendedTicks:
 8343 0000 00000000 		.space	4
 8344              		.section	.bss.xPendingReadyList,"aw",%nobits
 8345              		.align	2
 8346              		.set	.LANCHOR1,. + 0
 8349              	xPendingReadyList:
 8350 0000 00000000 		.space	20
 8350      00000000 
 8350      00000000 
 8350      00000000 
 8350      00000000 
 8351              		.section	.bss.xSchedulerRunning,"aw",%nobits
 8352              		.align	2
 8353              		.set	.LANCHOR11,. + 0
 8356              	xSchedulerRunning:
 8357 0000 00000000 		.space	4
 8358              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 8359              		.align	2
 8360              		.set	.LANCHOR0,. + 0
 8363              	xSuspendedTaskList:
 8364 0000 00000000 		.space	20
 8364      00000000 
 8364      00000000 
 8364      00000000 
 8364      00000000 
 8365              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 8366              		.align	2
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 283


 8367              		.set	.LANCHOR7,. + 0
 8370              	xTasksWaitingTermination:
 8371 0000 00000000 		.space	20
 8371      00000000 
 8371      00000000 
 8371      00000000 
 8371      00000000 
 8372              		.section	.bss.xTickCount,"aw",%nobits
 8373              		.align	2
 8374              		.set	.LANCHOR15,. + 0
 8377              	xTickCount:
 8378 0000 00000000 		.space	4
 8379              		.section	.bss.xYieldPending,"aw",%nobits
 8380              		.align	2
 8381              		.set	.LANCHOR17,. + 0
 8384              	xYieldPending:
 8385 0000 00000000 		.space	4
 8386              		.section	.data.uxTopUsedPriority,"aw"
 8387              		.align	2
 8388              		.set	.LANCHOR18,. + 0
 8391              	uxTopUsedPriority:
 8392 0000 03000000 		.word	3
 8393              		.text
 8394              	.Letext0:
 8395              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 8396              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 8397              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 8398              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 8399              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 8400              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 8401              		.file 9 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 8402              		.file 10 "user/Inc/FreeRTOSConfig.h"
 8403              		.file 11 "os/include/projdefs.h"
 8404              		.file 12 "os/include/FreeRTOS.h"
 8405              		.file 13 "os/include/list.h"
 8406              		.file 14 "os/include/task.h"
 8407              		.file 15 "os/include/portable.h"
 8408              		.file 16 "os/include/timers.h"
 8409              		.file 17 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\in
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 284


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:17     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:116    .text.prvTaskIsTaskSuspended:0000003c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:122    .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:128    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:171    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:177    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:212    .text.prvResetNextTaskUnblockTime:00000020 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:218    .text.prvInitialiseNewTask:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:224    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:392    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:398    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:473    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:485    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:491    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:633    .text.prvAddNewTaskToReadyList:00000090 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:644    .text.prvDeleteTCB:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:650    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:730    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:736    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:813    .text.prvCheckTasksWaitingTermination:00000040 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:820    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:826    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:936    .text.prvAddCurrentTaskToDelayedList:0000006c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:946    .text.prvIdleTask:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:952    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1012   .text.prvIdleTask:00000028 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1018   .text.xTaskCreateStatic:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1025   .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1196   .text.xTaskCreate:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1203   .text.xTaskCreate:00000000 xTaskCreate
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1328   .text.vTaskDelete:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1335   .text.vTaskDelete:00000000 vTaskDelete
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1505   .text.vTaskDelete:0000009c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1517   .text.eTaskGetState:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1524   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1704   .text.eTaskGetState:00000088 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1713   .text.uxTaskPriorityGet:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1720   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1766   .text.uxTaskPriorityGet:0000001c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1771   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1778   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1861   .text.uxTaskPriorityGetFromISR:00000030 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1866   .text.vTaskPrioritySet:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:1873   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2110   .text.vTaskPrioritySet:000000c8 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2118   .text.vTaskResume:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2125   .text.vTaskResume:00000000 vTaskResume
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2261   .text.vTaskResume:0000007c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2269   .text.xTaskResumeFromISR:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2276   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2460   .text.xTaskResumeFromISR:0000009c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2470   .rodata.vTaskStartScheduler.str1.4:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2474   .text.vTaskStartScheduler:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2481   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 285


C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2655   .text.vTaskStartScheduler:0000008c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2665   .text.vTaskEndScheduler:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2672   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2717   .text.vTaskEndScheduler:00000024 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2722   .text.vTaskSuspendAll:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2729   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2748   .text.vTaskSuspendAll:0000000c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2753   .text.xTaskGetTickCount:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2760   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2781   .text.xTaskGetTickCount:00000008 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2786   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2793   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2822   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2827   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2834   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2850   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2855   .text.pcTaskGetName:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2862   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2925   .text.pcTaskGetName:00000028 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2930   .text.xTaskIncrementTick:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:2937   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3206   .text.xTaskIncrementTick:000000f4 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3221   .text.xTaskResumeAll:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3228   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3469   .text.xTaskResumeAll:000000d8 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3482   .text.xTaskDelayUntil:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3489   .text.xTaskDelayUntil:00000000 xTaskDelayUntil
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3742   .text.xTaskDelayUntil:000000b0 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3749   .text.vTaskDelay:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3756   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3851   .text.vTaskDelay:00000048 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3857   .text.xTaskCatchUpTicks:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3864   .text.xTaskCatchUpTicks:00000000 xTaskCatchUpTicks
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3934   .text.xTaskCatchUpTicks:00000034 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3940   .text.vTaskSwitchContext:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:3947   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4091   .text.vTaskSwitchContext:00000088 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4102   .text.vTaskSuspend:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4109   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4324   .text.vTaskSuspend:000000bc $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4334   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4341   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4411   .text.vTaskPlaceOnEventList:00000030 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4416   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4423   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4538   .text.vTaskPlaceOnUnorderedEventList:00000058 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4544   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4551   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4628   .text.vTaskPlaceOnEventListRestricted:00000038 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4633   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4640   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4776   .text.xTaskRemoveFromEventList:00000078 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4786   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4793   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4934   .text.vTaskRemoveFromUnorderedEventList:0000007c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4943   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:4950   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 286


C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5022   .text.vTaskSetTimeOutState:00000034 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5028   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5035   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5058   .text.vTaskInternalSetTimeOutState:00000010 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5064   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5071   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5259   .text.xTaskCheckForTimeOut:00000088 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5265   .text.vTaskMissedYield:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5272   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5289   .text.vTaskMissedYield:00000008 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5294   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5301   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5334   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5341   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5366   .text.vTaskGetInfo:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5373   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5520   .text.vTaskGetInfo:00000074 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5525   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5531   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5648   .text.uxTaskGetSystemState:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5655   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5794   .text.uxTaskGetSystemState:00000098 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5804   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5811   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5853   .text.uxTaskGetStackHighWaterMark:00000014 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5858   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5865   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5884   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5889   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5896   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5934   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5940   .text.xTaskPriorityInherit:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:5947   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6103   .text.xTaskPriorityInherit:0000008c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6110   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6117   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6302   .text.xTaskPriorityDisinherit:0000008c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6309   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6316   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6513   .text.vTaskPriorityDisinheritAfterTimeout:000000a0 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6520   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6527   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6554   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6559   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6566   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6597   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6602   .text.ulTaskGenericNotifyTake:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6609   .text.ulTaskGenericNotifyTake:00000000 ulTaskGenericNotifyTake
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6776   .text.ulTaskGenericNotifyTake:000000a8 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6782   .text.xTaskGenericNotifyWait:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6789   .text.xTaskGenericNotifyWait:00000000 xTaskGenericNotifyWait
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6981   .text.xTaskGenericNotifyWait:000000d0 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6987   .text.xTaskGenericNotify:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:6994   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7089   .text.xTaskGenericNotify:00000058 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7347   .text.xTaskGenericNotify:0000014c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7356   .text.xTaskGenericNotifyFromISR:00000000 $t
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 287


C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7363   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7515   .text.xTaskGenericNotifyFromISR:0000008a $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7767   .text.xTaskGenericNotifyFromISR:0000017c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7778   .text.vTaskGenericNotifyGiveFromISR:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7785   .text.vTaskGenericNotifyGiveFromISR:00000000 vTaskGenericNotifyGiveFromISR
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8051   .text.vTaskGenericNotifyGiveFromISR:000000e8 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8061   .text.xTaskGenericNotifyStateClear:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8068   .text.xTaskGenericNotifyStateClear:00000000 xTaskGenericNotifyStateClear
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8171   .text.xTaskGenericNotifyStateClear:0000004c $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8176   .text.ulTaskGenericNotifyValueClear:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8183   .text.ulTaskGenericNotifyValueClear:00000000 ulTaskGenericNotifyValueClear
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8240   .text.ulTaskGenericNotifyValueClear:00000030 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8391   .data.uxTopUsedPriority:00000000 uxTopUsedPriority
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8251   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8247   .bss.pxCurrentTCB:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8254   .bss.pxDelayedTaskList:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8258   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8261   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8265   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8268   .bss.pxReadyTasksLists:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8272   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8275   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8279   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8282   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8286   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8289   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8293   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8296   .bss.uxTaskNumber:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8300   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8303   .bss.uxTopReadyPriority:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8307   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8310   .bss.xDelayedTaskList1:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8314   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8317   .bss.xDelayedTaskList2:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8321   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8324   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8328   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8331   .bss.xNumOfOverflows:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8335   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8338   .bss.xPendedTicks:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8342   .bss.xPendedTicks:00000000 xPendedTicks
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8345   .bss.xPendingReadyList:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8349   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8352   .bss.xSchedulerRunning:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8356   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8359   .bss.xSuspendedTaskList:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8363   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8366   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8370   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8373   .bss.xTickCount:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8377   .bss.xTickCount:00000000 xTickCount
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8380   .bss.xYieldPending:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8384   .bss.xYieldPending:00000000 xYieldPending
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:8387   .data.uxTopUsedPriority:00000000 $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7095   .text.xTaskGenericNotify:0000005d $d
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7095   .text.xTaskGenericNotify:0000005e $t
C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7520   .text.xTaskGenericNotifyFromISR:0000008f $d
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s 			page 288


C:\Users\BIGBIG~1\AppData\Local\Temp\cc56DkAo.s:7520   .text.xTaskGenericNotifyFromISR:00000090 $t

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
vPortFree
uxListRemove
vListInsert
vApplicationIdleHook
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
