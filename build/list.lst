ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"list.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.vListInitialise,"ax",%progbits
  17              		.align	1
  18              		.global	vListInitialise
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv5-d16
  25              	vListInitialise:
  26              	.LVL0:
  27              	.LFB4:
  28              		.file 1 "os/list.c"
   1:os/list.c     **** /*
   2:os/list.c     ****  * FreeRTOS Kernel V10.4.3
   3:os/list.c     ****  * Copyright (C) 2020 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:os/list.c     ****  *
   5:os/list.c     ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:os/list.c     ****  * this software and associated documentation files (the "Software"), to deal in
   7:os/list.c     ****  * the Software without restriction, including without limitation the rights to
   8:os/list.c     ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:os/list.c     ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:os/list.c     ****  * subject to the following conditions:
  11:os/list.c     ****  *
  12:os/list.c     ****  * The above copyright notice and this permission notice shall be included in all
  13:os/list.c     ****  * copies or substantial portions of the Software.
  14:os/list.c     ****  *
  15:os/list.c     ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:os/list.c     ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:os/list.c     ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:os/list.c     ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:os/list.c     ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:os/list.c     ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:os/list.c     ****  *
  22:os/list.c     ****  * https://www.FreeRTOS.org
  23:os/list.c     ****  * https://github.com/FreeRTOS
  24:os/list.c     ****  *
  25:os/list.c     ****  */
  26:os/list.c     **** 
  27:os/list.c     **** 
  28:os/list.c     **** #include <stdlib.h>
  29:os/list.c     **** 
  30:os/list.c     **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 2


  31:os/list.c     ****  * all the API functions to use the MPU wrappers.  That should only be done when
  32:os/list.c     ****  * task.h is included from an application file. */
  33:os/list.c     **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  34:os/list.c     **** 
  35:os/list.c     **** #include "FreeRTOS.h"
  36:os/list.c     **** #include "list.h"
  37:os/list.c     **** 
  38:os/list.c     **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  39:os/list.c     ****  * because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be
  40:os/list.c     ****  * defined for the header files above, but not in this file, in order to
  41:os/list.c     ****  * generate the correct privileged Vs unprivileged linkage and placement. */
  42:os/list.c     **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  43:os/list.c     **** 
  44:os/list.c     **** /*-----------------------------------------------------------
  45:os/list.c     **** * PUBLIC LIST API documented in list.h
  46:os/list.c     **** *----------------------------------------------------------*/
  47:os/list.c     **** 
  48:os/list.c     **** void vListInitialise( List_t * const pxList )
  49:os/list.c     **** {
  29              		.loc 1 49 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  50:os/list.c     ****     /* The list structure contains a list item which is used to mark the
  51:os/list.c     ****      * end of the list.  To initialise the list the list end is inserted
  52:os/list.c     ****      * as the only list entry. */
  53:os/list.c     ****     pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini li
  34              		.loc 1 53 5 view .LVU1
  35              		.loc 1 53 40 is_stmt 0 view .LVU2
  36 0000 00F10803 		add	r3, r0, #8
  37              		.loc 1 53 21 view .LVU3
  38 0004 4360     		str	r3, [r0, #4]
  54:os/list.c     **** 
  55:os/list.c     ****     /* The list end value is the highest possible value in the list to
  56:os/list.c     ****      * ensure it remains at the end of the list. */
  57:os/list.c     ****     pxList->xListEnd.xItemValue = portMAX_DELAY;
  39              		.loc 1 57 5 is_stmt 1 view .LVU4
  40              		.loc 1 57 33 is_stmt 0 view .LVU5
  41 0006 4FF0FF32 		mov	r2, #-1
  42 000a 8260     		str	r2, [r0, #8]
  58:os/list.c     **** 
  59:os/list.c     ****     /* The list end next and previous pointers point to itself so we know
  60:os/list.c     ****      * when the list is empty. */
  61:os/list.c     ****     pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087
  43              		.loc 1 61 5 is_stmt 1 view .LVU6
  44              		.loc 1 61 29 is_stmt 0 view .LVU7
  45 000c C360     		str	r3, [r0, #12]
  62:os/list.c     ****     pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087
  46              		.loc 1 62 5 is_stmt 1 view .LVU8
  47              		.loc 1 62 33 is_stmt 0 view .LVU9
  48 000e 0361     		str	r3, [r0, #16]
  63:os/list.c     **** 
  64:os/list.c     ****     pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  49              		.loc 1 64 5 is_stmt 1 view .LVU10
  50              		.loc 1 64 29 is_stmt 0 view .LVU11
  51 0010 0023     		movs	r3, #0
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 3


  52 0012 0360     		str	r3, [r0]
  65:os/list.c     **** 
  66:os/list.c     ****     /* Write known values into the list if
  67:os/list.c     ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  68:os/list.c     ****     listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
  53              		.loc 1 68 51 is_stmt 1 view .LVU12
  69:os/list.c     ****     listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
  54              		.loc 1 69 51 view .LVU13
  70:os/list.c     **** }
  55              		.loc 1 70 1 is_stmt 0 view .LVU14
  56 0014 7047     		bx	lr
  57              		.cfi_endproc
  58              	.LFE4:
  60              		.section	.text.vListInitialiseItem,"ax",%progbits
  61              		.align	1
  62              		.global	vListInitialiseItem
  63              		.syntax unified
  64              		.thumb
  65              		.thumb_func
  66              		.fpu fpv5-d16
  68              	vListInitialiseItem:
  69              	.LVL1:
  70              	.LFB5:
  71:os/list.c     **** /*-----------------------------------------------------------*/
  72:os/list.c     **** 
  73:os/list.c     **** void vListInitialiseItem( ListItem_t * const pxItem )
  74:os/list.c     **** {
  71              		.loc 1 74 1 is_stmt 1 view -0
  72              		.cfi_startproc
  73              		@ args = 0, pretend = 0, frame = 0
  74              		@ frame_needed = 0, uses_anonymous_args = 0
  75              		@ link register save eliminated.
  75:os/list.c     ****     /* Make sure the list item is not recorded as being on a list. */
  76:os/list.c     ****     pxItem->pxContainer = NULL;
  76              		.loc 1 76 5 view .LVU16
  77              		.loc 1 76 25 is_stmt 0 view .LVU17
  78 0000 0023     		movs	r3, #0
  79 0002 0361     		str	r3, [r0, #16]
  77:os/list.c     **** 
  78:os/list.c     ****     /* Write known values into the list item if
  79:os/list.c     ****      * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
  80:os/list.c     ****     listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  80              		.loc 1 80 60 is_stmt 1 view .LVU18
  81:os/list.c     ****     listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
  81              		.loc 1 81 61 view .LVU19
  82:os/list.c     **** }
  82              		.loc 1 82 1 is_stmt 0 view .LVU20
  83 0004 7047     		bx	lr
  84              		.cfi_endproc
  85              	.LFE5:
  87              		.section	.text.vListInsertEnd,"ax",%progbits
  88              		.align	1
  89              		.global	vListInsertEnd
  90              		.syntax unified
  91              		.thumb
  92              		.thumb_func
  93              		.fpu fpv5-d16
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 4


  95              	vListInsertEnd:
  96              	.LVL2:
  97              	.LFB6:
  83:os/list.c     **** /*-----------------------------------------------------------*/
  84:os/list.c     **** 
  85:os/list.c     **** void vListInsertEnd( List_t * const pxList,
  86:os/list.c     ****                      ListItem_t * const pxNewListItem )
  87:os/list.c     **** {
  98              		.loc 1 87 1 is_stmt 1 view -0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 0
 101              		@ frame_needed = 0, uses_anonymous_args = 0
 102              		@ link register save eliminated.
  88:os/list.c     ****     ListItem_t * const pxIndex = pxList->pxIndex;
 103              		.loc 1 88 5 view .LVU22
 104              		.loc 1 88 24 is_stmt 0 view .LVU23
 105 0000 4368     		ldr	r3, [r0, #4]
 106              	.LVL3:
  89:os/list.c     **** 
  90:os/list.c     ****     /* Only effective when configASSERT() is also defined, these tests may catch
  91:os/list.c     ****      * the list data structures being overwritten in memory.  They will not catch
  92:os/list.c     ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
  93:os/list.c     ****     listTEST_LIST_INTEGRITY( pxList );
 107              		.loc 1 93 38 is_stmt 1 view .LVU24
  94:os/list.c     ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 108              		.loc 1 94 50 view .LVU25
  95:os/list.c     **** 
  96:os/list.c     ****     /* Insert a new list item into pxList, but rather than sort the list,
  97:os/list.c     ****      * makes the new list item the last item to be removed by a call to
  98:os/list.c     ****      * listGET_OWNER_OF_NEXT_ENTRY(). */
  99:os/list.c     ****     pxNewListItem->pxNext = pxIndex;
 109              		.loc 1 99 5 view .LVU26
 110              		.loc 1 99 27 is_stmt 0 view .LVU27
 111 0002 4B60     		str	r3, [r1, #4]
 100:os/list.c     ****     pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 112              		.loc 1 100 5 is_stmt 1 view .LVU28
 113              		.loc 1 100 40 is_stmt 0 view .LVU29
 114 0004 9A68     		ldr	r2, [r3, #8]
 115              		.loc 1 100 31 view .LVU30
 116 0006 8A60     		str	r2, [r1, #8]
 101:os/list.c     **** 
 102:os/list.c     ****     /* Only used during decision coverage testing. */
 103:os/list.c     ****     mtCOVERAGE_TEST_DELAY();
 117              		.loc 1 103 28 is_stmt 1 view .LVU31
 104:os/list.c     **** 
 105:os/list.c     ****     pxIndex->pxPrevious->pxNext = pxNewListItem;
 118              		.loc 1 105 5 view .LVU32
 119              		.loc 1 105 33 is_stmt 0 view .LVU33
 120 0008 5160     		str	r1, [r2, #4]
 106:os/list.c     ****     pxIndex->pxPrevious = pxNewListItem;
 121              		.loc 1 106 5 is_stmt 1 view .LVU34
 122              		.loc 1 106 25 is_stmt 0 view .LVU35
 123 000a 9960     		str	r1, [r3, #8]
 107:os/list.c     **** 
 108:os/list.c     ****     /* Remember which list the item is in. */
 109:os/list.c     ****     pxNewListItem->pxContainer = pxList;
 124              		.loc 1 109 5 is_stmt 1 view .LVU36
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 5


 125              		.loc 1 109 32 is_stmt 0 view .LVU37
 126 000c 0861     		str	r0, [r1, #16]
 110:os/list.c     **** 
 111:os/list.c     ****     ( pxList->uxNumberOfItems )++;
 127              		.loc 1 111 5 is_stmt 1 view .LVU38
 128              		.loc 1 111 13 is_stmt 0 view .LVU39
 129 000e 0368     		ldr	r3, [r0]
 130              	.LVL4:
 131              		.loc 1 111 32 view .LVU40
 132 0010 0133     		adds	r3, r3, #1
 133 0012 0360     		str	r3, [r0]
 112:os/list.c     **** }
 134              		.loc 1 112 1 view .LVU41
 135 0014 7047     		bx	lr
 136              		.cfi_endproc
 137              	.LFE6:
 139              		.section	.text.vListInsert,"ax",%progbits
 140              		.align	1
 141              		.global	vListInsert
 142              		.syntax unified
 143              		.thumb
 144              		.thumb_func
 145              		.fpu fpv5-d16
 147              	vListInsert:
 148              	.LVL5:
 149              	.LFB7:
 113:os/list.c     **** /*-----------------------------------------------------------*/
 114:os/list.c     **** 
 115:os/list.c     **** void vListInsert( List_t * const pxList,
 116:os/list.c     ****                   ListItem_t * const pxNewListItem )
 117:os/list.c     **** {
 150              		.loc 1 117 1 is_stmt 1 view -0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155              		.loc 1 117 1 is_stmt 0 view .LVU43
 156 0000 30B4     		push	{r4, r5}
 157              	.LCFI0:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 4, -8
 160              		.cfi_offset 5, -4
 118:os/list.c     ****     ListItem_t * pxIterator;
 161              		.loc 1 118 5 is_stmt 1 view .LVU44
 119:os/list.c     ****     const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 162              		.loc 1 119 5 view .LVU45
 163              		.loc 1 119 22 is_stmt 0 view .LVU46
 164 0002 0D68     		ldr	r5, [r1]
 165              	.LVL6:
 120:os/list.c     **** 
 121:os/list.c     ****     /* Only effective when configASSERT() is also defined, these tests may catch
 122:os/list.c     ****      * the list data structures being overwritten in memory.  They will not catch
 123:os/list.c     ****      * data errors caused by incorrect configuration or use of FreeRTOS. */
 124:os/list.c     ****     listTEST_LIST_INTEGRITY( pxList );
 166              		.loc 1 124 38 is_stmt 1 view .LVU47
 125:os/list.c     ****     listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
 167              		.loc 1 125 50 view .LVU48
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 6


 126:os/list.c     **** 
 127:os/list.c     ****     /* Insert the new list item into the list, sorted in xItemValue order.
 128:os/list.c     ****      *
 129:os/list.c     ****      * If the list already contains a list item with the same item value then the
 130:os/list.c     ****      * new list item should be placed after it.  This ensures that TCBs which are
 131:os/list.c     ****      * stored in ready lists (all of which have the same xItemValue value) get a
 132:os/list.c     ****      * share of the CPU.  However, if the xItemValue is the same as the back marker
 133:os/list.c     ****      * the iteration loop below will not end.  Therefore the value is checked
 134:os/list.c     ****      * first, and the algorithm slightly modified if necessary. */
 135:os/list.c     ****     if( xValueOfInsertion == portMAX_DELAY )
 168              		.loc 1 135 5 view .LVU49
 169              		.loc 1 135 7 is_stmt 0 view .LVU50
 170 0004 B5F1FF3F 		cmp	r5, #-1
 171 0008 11D0     		beq	.L9
 136:os/list.c     ****     {
 137:os/list.c     ****         pxIterator = pxList->xListEnd.pxPrevious;
 138:os/list.c     ****     }
 139:os/list.c     ****     else
 140:os/list.c     ****     {
 141:os/list.c     ****         /* *** NOTE ***********************************************************
 142:os/list.c     ****         *  If you find your application is crashing here then likely causes are
 143:os/list.c     ****         *  listed below.  In addition see https://www.FreeRTOS.org/FAQHelp.html for
 144:os/list.c     ****         *  more tips, and ensure configASSERT() is defined!
 145:os/list.c     ****         *  https://www.FreeRTOS.org/a00110.html#configASSERT
 146:os/list.c     ****         *
 147:os/list.c     ****         *   1) Stack overflow -
 148:os/list.c     ****         *      see https://www.FreeRTOS.org/Stacks-and-stack-overflow-checking.html
 149:os/list.c     ****         *   2) Incorrect interrupt priority assignment, especially on Cortex-M
 150:os/list.c     ****         *      parts where numerically high priority values denote low actual
 151:os/list.c     ****         *      interrupt priorities, which can seem counter intuitive.  See
 152:os/list.c     ****         *      https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html and the definition
 153:os/list.c     ****         *      of configMAX_SYSCALL_INTERRUPT_PRIORITY on
 154:os/list.c     ****         *      https://www.FreeRTOS.org/a00110.html
 155:os/list.c     ****         *   3) Calling an API function from within a critical section or when
 156:os/list.c     ****         *      the scheduler is suspended, or calling an API function that does
 157:os/list.c     ****         *      not end in "FromISR" from an interrupt.
 158:os/list.c     ****         *   4) Using a queue or semaphore before it has been initialised or
 159:os/list.c     ****         *      before the scheduler has been started (are interrupts firing
 160:os/list.c     ****         *      before vTaskStartScheduler() has been called?).
 161:os/list.c     ****         **********************************************************************/
 162:os/list.c     **** 
 163:os/list.c     ****         for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <=
 172              		.loc 1 163 9 is_stmt 1 view .LVU51
 173              		.loc 1 163 25 is_stmt 0 view .LVU52
 174 000a 00F10803 		add	r3, r0, #8
 175              	.LVL7:
 176              	.L7:
 177              		.loc 1 163 67 is_stmt 1 discriminator 1 view .LVU53
 178 000e 1C46     		mov	r4, r3
 179              		.loc 1 163 77 is_stmt 0 discriminator 1 view .LVU54
 180 0010 5B68     		ldr	r3, [r3, #4]
 181              	.LVL8:
 182              		.loc 1 163 85 discriminator 1 view .LVU55
 183 0012 1A68     		ldr	r2, [r3]
 184              		.loc 1 163 9 discriminator 1 view .LVU56
 185 0014 AA42     		cmp	r2, r5
 186 0016 FAD9     		bls	.L7
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 7


 187              	.L6:
 164:os/list.c     ****         {
 165:os/list.c     ****             /* There is nothing to do here, just iterating to the wanted
 166:os/list.c     ****              * insertion position. */
 167:os/list.c     ****         }
 168:os/list.c     ****     }
 169:os/list.c     **** 
 170:os/list.c     ****     pxNewListItem->pxNext = pxIterator->pxNext;
 188              		.loc 1 170 5 is_stmt 1 view .LVU57
 189              		.loc 1 170 39 is_stmt 0 view .LVU58
 190 0018 6368     		ldr	r3, [r4, #4]
 191              		.loc 1 170 27 view .LVU59
 192 001a 4B60     		str	r3, [r1, #4]
 171:os/list.c     ****     pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 193              		.loc 1 171 5 is_stmt 1 view .LVU60
 194              		.loc 1 171 39 is_stmt 0 view .LVU61
 195 001c 9960     		str	r1, [r3, #8]
 172:os/list.c     ****     pxNewListItem->pxPrevious = pxIterator;
 196              		.loc 1 172 5 is_stmt 1 view .LVU62
 197              		.loc 1 172 31 is_stmt 0 view .LVU63
 198 001e 8C60     		str	r4, [r1, #8]
 173:os/list.c     ****     pxIterator->pxNext = pxNewListItem;
 199              		.loc 1 173 5 is_stmt 1 view .LVU64
 200              		.loc 1 173 24 is_stmt 0 view .LVU65
 201 0020 6160     		str	r1, [r4, #4]
 174:os/list.c     **** 
 175:os/list.c     ****     /* Remember which list the item is in.  This allows fast removal of the
 176:os/list.c     ****      * item later. */
 177:os/list.c     ****     pxNewListItem->pxContainer = pxList;
 202              		.loc 1 177 5 is_stmt 1 view .LVU66
 203              		.loc 1 177 32 is_stmt 0 view .LVU67
 204 0022 0861     		str	r0, [r1, #16]
 178:os/list.c     **** 
 179:os/list.c     ****     ( pxList->uxNumberOfItems )++;
 205              		.loc 1 179 5 is_stmt 1 view .LVU68
 206              		.loc 1 179 13 is_stmt 0 view .LVU69
 207 0024 0368     		ldr	r3, [r0]
 208              		.loc 1 179 32 view .LVU70
 209 0026 0133     		adds	r3, r3, #1
 210 0028 0360     		str	r3, [r0]
 180:os/list.c     **** }
 211              		.loc 1 180 1 view .LVU71
 212 002a 30BC     		pop	{r4, r5}
 213              	.LCFI1:
 214              		.cfi_remember_state
 215              		.cfi_restore 5
 216              		.cfi_restore 4
 217              		.cfi_def_cfa_offset 0
 218              	.LVL9:
 219              		.loc 1 180 1 view .LVU72
 220 002c 7047     		bx	lr
 221              	.LVL10:
 222              	.L9:
 223              	.LCFI2:
 224              		.cfi_restore_state
 137:os/list.c     ****     }
 225              		.loc 1 137 9 is_stmt 1 view .LVU73
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 8


 137:os/list.c     ****     }
 226              		.loc 1 137 20 is_stmt 0 view .LVU74
 227 002e 0469     		ldr	r4, [r0, #16]
 228              	.LVL11:
 137:os/list.c     ****     }
 229              		.loc 1 137 20 view .LVU75
 230 0030 F2E7     		b	.L6
 231              		.cfi_endproc
 232              	.LFE7:
 234              		.section	.text.uxListRemove,"ax",%progbits
 235              		.align	1
 236              		.global	uxListRemove
 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu fpv5-d16
 242              	uxListRemove:
 243              	.LVL12:
 244              	.LFB8:
 181:os/list.c     **** /*-----------------------------------------------------------*/
 182:os/list.c     **** 
 183:os/list.c     **** UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
 184:os/list.c     **** {
 245              		.loc 1 184 1 is_stmt 1 view -0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 0, uses_anonymous_args = 0
 249              		@ link register save eliminated.
 185:os/list.c     **** /* The list item knows which list it is in.  Obtain the list from the list
 186:os/list.c     ****  * item. */
 187:os/list.c     ****     List_t * const pxList = pxItemToRemove->pxContainer;
 250              		.loc 1 187 5 view .LVU77
 251              		.loc 1 187 20 is_stmt 0 view .LVU78
 252 0000 0369     		ldr	r3, [r0, #16]
 253              	.LVL13:
 188:os/list.c     **** 
 189:os/list.c     ****     pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 254              		.loc 1 189 5 is_stmt 1 view .LVU79
 255              		.loc 1 189 19 is_stmt 0 view .LVU80
 256 0002 4168     		ldr	r1, [r0, #4]
 257              		.loc 1 189 56 view .LVU81
 258 0004 8268     		ldr	r2, [r0, #8]
 259              		.loc 1 189 40 view .LVU82
 260 0006 8A60     		str	r2, [r1, #8]
 190:os/list.c     ****     pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 261              		.loc 1 190 5 is_stmt 1 view .LVU83
 262              		.loc 1 190 56 is_stmt 0 view .LVU84
 263 0008 4168     		ldr	r1, [r0, #4]
 264              		.loc 1 190 40 view .LVU85
 265 000a 5160     		str	r1, [r2, #4]
 191:os/list.c     **** 
 192:os/list.c     ****     /* Only used during decision coverage testing. */
 193:os/list.c     ****     mtCOVERAGE_TEST_DELAY();
 266              		.loc 1 193 28 is_stmt 1 view .LVU86
 194:os/list.c     **** 
 195:os/list.c     ****     /* Make sure the index is left pointing to a valid item. */
 196:os/list.c     ****     if( pxList->pxIndex == pxItemToRemove )
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 9


 267              		.loc 1 196 5 view .LVU87
 268              		.loc 1 196 15 is_stmt 0 view .LVU88
 269 000c 5A68     		ldr	r2, [r3, #4]
 270              		.loc 1 196 7 view .LVU89
 271 000e 8242     		cmp	r2, r0
 272 0010 06D0     		beq	.L12
 273              	.L11:
 197:os/list.c     ****     {
 198:os/list.c     ****         pxList->pxIndex = pxItemToRemove->pxPrevious;
 199:os/list.c     ****     }
 200:os/list.c     ****     else
 201:os/list.c     ****     {
 202:os/list.c     ****         mtCOVERAGE_TEST_MARKER();
 274              		.loc 1 202 33 is_stmt 1 view .LVU90
 203:os/list.c     ****     }
 204:os/list.c     **** 
 205:os/list.c     ****     pxItemToRemove->pxContainer = NULL;
 275              		.loc 1 205 5 view .LVU91
 276              		.loc 1 205 33 is_stmt 0 view .LVU92
 277 0012 0022     		movs	r2, #0
 278 0014 0261     		str	r2, [r0, #16]
 206:os/list.c     ****     ( pxList->uxNumberOfItems )--;
 279              		.loc 1 206 5 is_stmt 1 view .LVU93
 280              		.loc 1 206 13 is_stmt 0 view .LVU94
 281 0016 1A68     		ldr	r2, [r3]
 282              		.loc 1 206 32 view .LVU95
 283 0018 013A     		subs	r2, r2, #1
 284 001a 1A60     		str	r2, [r3]
 207:os/list.c     **** 
 208:os/list.c     ****     return pxList->uxNumberOfItems;
 285              		.loc 1 208 5 is_stmt 1 view .LVU96
 286              		.loc 1 208 18 is_stmt 0 view .LVU97
 287 001c 1868     		ldr	r0, [r3]
 288              	.LVL14:
 209:os/list.c     **** }
 289              		.loc 1 209 1 view .LVU98
 290 001e 7047     		bx	lr
 291              	.LVL15:
 292              	.L12:
 198:os/list.c     ****     }
 293              		.loc 1 198 9 is_stmt 1 view .LVU99
 198:os/list.c     ****     }
 294              		.loc 1 198 41 is_stmt 0 view .LVU100
 295 0020 8268     		ldr	r2, [r0, #8]
 198:os/list.c     ****     }
 296              		.loc 1 198 25 view .LVU101
 297 0022 5A60     		str	r2, [r3, #4]
 298 0024 F5E7     		b	.L11
 299              		.cfi_endproc
 300              	.LFE8:
 302              		.text
 303              	.Letext0:
 304              		.file 2 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\lib\\gcc\\arm-none
 305              		.file 3 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 306              		.file 4 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 307              		.file 5 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 308              		.file 6 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 10


 309              		.file 7 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 310              		.file 8 "c:\\program files (x86)\\gnu arm embedded toolchain\\9 2020-q2-update\\arm-none-eabi\\inc
 311              		.file 9 "user/Inc/FreeRTOSConfig.h"
 312              		.file 10 "os/portable/GCC/ARM_CM7/r0p1/portmacro.h"
 313              		.file 11 "os/include/list.h"
ARM GAS  C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s 			page 11


DEFINED SYMBOLS
                            *ABS*:00000000 list.c
C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s:17     .text.vListInitialise:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s:25     .text.vListInitialise:00000000 vListInitialise
C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s:61     .text.vListInitialiseItem:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s:68     .text.vListInitialiseItem:00000000 vListInitialiseItem
C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s:88     .text.vListInsertEnd:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s:95     .text.vListInsertEnd:00000000 vListInsertEnd
C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s:140    .text.vListInsert:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s:147    .text.vListInsert:00000000 vListInsert
C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s:235    .text.uxListRemove:00000000 $t
C:\Users\BIGBIG~1\AppData\Local\Temp\ccwY2A5J.s:242    .text.uxListRemove:00000000 uxListRemove

NO UNDEFINED SYMBOLS
